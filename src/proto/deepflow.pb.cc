// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deepflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TensorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorParam> {
} _TensorParam_default_instance_;
class OpAddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpAddParam> {
} _OpAddParam_default_instance_;
class OpEqualParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpEqualParam> {
} _OpEqualParam_default_instance_;
class OpBiasAddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpBiasAddParam> {
} _OpBiasAddParam_default_instance_;
class OpPoolingParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpPoolingParam> {
} _OpPoolingParam_default_instance_;
class OpConv2dParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpConv2dParam> {
} _OpConv2dParam_default_instance_;
class OpDropoutParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpDropoutParam> {
} _OpDropoutParam_default_instance_;
class OpMatMulParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpMatMulParam> {
} _OpMatMulParam_default_instance_;
class OpReluParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpReluParam> {
} _OpReluParam_default_instance_;
class OpReduceParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpReduceParam> {
} _OpReduceParam_default_instance_;
class SnapshotParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotParam> {
} _SnapshotParam_default_instance_;
class VariableParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariableParam> {
} _VariableParam_default_instance_;
class BlockParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockParam> {
} _BlockParam_default_instance_;
class LossParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossParam> {
} _LossParam_default_instance_;
class MnistReaderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MnistReaderParam> {
} _MnistReaderParam_default_instance_;
class NodeParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeParam> {
} _NodeParam_default_instance_;
class OpArgmaxParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpArgmaxParam> {
} _OpArgmaxParam_default_instance_;
class OpSquareParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpSquareParam> {
} _OpSquareParam_default_instance_;
class SoftmaxLossParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxLossParam> {
} _SoftmaxLossParam_default_instance_;
class OpSoftmaxParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpSoftmaxParam> {
} _OpSoftmaxParam_default_instance_;
class InitFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitFillParam> {
} _InitFillParam_default_instance_;
class InitIndexFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitIndexFillParam> {
} _InitIndexFillParam_default_instance_;
class InitRandomUniformParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRandomUniformParam> {
} _InitRandomUniformParam_default_instance_;
class InitStepParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitStepParam> {
} _InitStepParam_default_instance_;
class InitParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitParam> {
} _InitParam_default_instance_;
class SGDSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SGDSolverParam> {
} _SGDSolverParam_default_instance_;
class GainSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSolverParam> {
} _GainSolverParam_default_instance_;
class SolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverParam> {
} _SolverParam_default_instance_;

namespace protobuf_deepflow_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, dims_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpAddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpAddParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpAddParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpEqualParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpBiasAddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, window_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, window_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, h_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, v_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, h_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPoolingParam, v_stride_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, upscale_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpConv2dParam, upscale_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpDropoutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpDropoutParam, dropout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMatMulParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMatMulParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpMatMulParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReluParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReluParam, negative_slope_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReduceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReduceParam, reduce_op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReduceParam, reduce_dim_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, snapshot_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, softmax_loss_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, folder_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, mnist_reader_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, variable_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, block_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_bias_add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_conv_2d_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_square_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_matmul_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_argmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_reduce_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, op_equal_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpArgmaxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpSquareParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpSoftmaxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpSoftmaxParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpSoftmaxParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, index_fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, random_uniform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, step_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, learning_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, max_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, min_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_plus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_mult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, max_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, sgd_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, gain_solver_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TensorParam)},
  { 6, -1, sizeof(OpAddParam)},
  { 12, -1, sizeof(OpEqualParam)},
  { 16, -1, sizeof(OpBiasAddParam)},
  { 20, -1, sizeof(OpPoolingParam)},
  { 30, -1, sizeof(OpConv2dParam)},
  { 40, -1, sizeof(OpDropoutParam)},
  { 45, -1, sizeof(OpMatMulParam)},
  { 51, -1, sizeof(OpReluParam)},
  { 56, -1, sizeof(OpReduceParam)},
  { 62, -1, sizeof(SnapshotParam)},
  { 70, -1, sizeof(VariableParam)},
  { 75, -1, sizeof(BlockParam)},
  { 79, -1, sizeof(LossParam)},
  { 84, -1, sizeof(MnistReaderParam)},
  { 91, -1, sizeof(NodeParam)},
  { 113, -1, sizeof(OpArgmaxParam)},
  { 117, -1, sizeof(OpSquareParam)},
  { 121, -1, sizeof(SoftmaxLossParam)},
  { 127, -1, sizeof(OpSoftmaxParam)},
  { 133, -1, sizeof(InitFillParam)},
  { 138, -1, sizeof(InitIndexFillParam)},
  { 143, -1, sizeof(InitRandomUniformParam)},
  { 149, -1, sizeof(InitStepParam)},
  { 155, -1, sizeof(InitParam)},
  { 164, -1, sizeof(SGDSolverParam)},
  { 170, -1, sizeof(GainSolverParam)},
  { 180, -1, sizeof(SolverParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpAddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpEqualParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpBiasAddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPoolingParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpConv2dParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpDropoutParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpMatMulParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpReluParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpReduceParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariableParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MnistReaderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpArgmaxParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpSquareParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxLossParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpSoftmaxParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitIndexFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRandomUniformParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitStepParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SGDSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "deepflow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _TensorParam_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OpAddParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _OpEqualParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _OpBiasAddParam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _OpPoolingParam_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _OpConv2dParam_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _OpDropoutParam_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _OpMatMulParam_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _OpReluParam_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _OpReduceParam_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SnapshotParam_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _VariableParam_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _BlockParam_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _LossParam_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _MnistReaderParam_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _NodeParam_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _OpArgmaxParam_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _OpSquareParam_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SoftmaxLossParam_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _OpSoftmaxParam_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _InitFillParam_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _InitIndexFillParam_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _InitRandomUniformParam_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _InitStepParam_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _InitParam_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SGDSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GainSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SolverParam_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TensorParam_default_instance_.DefaultConstruct();
  _OpAddParam_default_instance_.DefaultConstruct();
  _OpEqualParam_default_instance_.DefaultConstruct();
  _OpBiasAddParam_default_instance_.DefaultConstruct();
  _OpPoolingParam_default_instance_.DefaultConstruct();
  _OpConv2dParam_default_instance_.DefaultConstruct();
  _OpDropoutParam_default_instance_.DefaultConstruct();
  _OpMatMulParam_default_instance_.DefaultConstruct();
  _OpReluParam_default_instance_.DefaultConstruct();
  _OpReduceParam_default_instance_.DefaultConstruct();
  _SnapshotParam_default_instance_.DefaultConstruct();
  _VariableParam_default_instance_.DefaultConstruct();
  _BlockParam_default_instance_.DefaultConstruct();
  _LossParam_default_instance_.DefaultConstruct();
  _MnistReaderParam_default_instance_.DefaultConstruct();
  _NodeParam_default_instance_.DefaultConstruct();
  _OpArgmaxParam_default_instance_.DefaultConstruct();
  _OpSquareParam_default_instance_.DefaultConstruct();
  _SoftmaxLossParam_default_instance_.DefaultConstruct();
  _OpSoftmaxParam_default_instance_.DefaultConstruct();
  _InitFillParam_default_instance_.DefaultConstruct();
  _InitIndexFillParam_default_instance_.DefaultConstruct();
  _InitRandomUniformParam_default_instance_.DefaultConstruct();
  _InitStepParam_default_instance_.DefaultConstruct();
  _InitParam_default_instance_.DefaultConstruct();
  _SGDSolverParam_default_instance_.DefaultConstruct();
  _GainSolverParam_default_instance_.DefaultConstruct();
  _SolverParam_default_instance_.DefaultConstruct();
  _VariableParam_default_instance_.get_mutable()->snapshot_param_ = const_cast< ::SnapshotParam*>(
      ::SnapshotParam::internal_default_instance());
  _LossParam_default_instance_.get_mutable()->softmax_loss_param_ = const_cast< ::SoftmaxLossParam*>(
      ::SoftmaxLossParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::TensorParam*>(
      ::TensorParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->mnist_reader_param_ = const_cast< ::MnistReaderParam*>(
      ::MnistReaderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->variable_param_ = const_cast< ::VariableParam*>(
      ::VariableParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->block_param_ = const_cast< ::BlockParam*>(
      ::BlockParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->loss_param_ = const_cast< ::LossParam*>(
      ::LossParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_add_param_ = const_cast< ::OpAddParam*>(
      ::OpAddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_bias_add_param_ = const_cast< ::OpBiasAddParam*>(
      ::OpBiasAddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_conv_2d_param_ = const_cast< ::OpConv2dParam*>(
      ::OpConv2dParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_dropout_param_ = const_cast< ::OpDropoutParam*>(
      ::OpDropoutParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_relu_param_ = const_cast< ::OpReluParam*>(
      ::OpReluParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_softmax_param_ = const_cast< ::OpSoftmaxParam*>(
      ::OpSoftmaxParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_square_param_ = const_cast< ::OpSquareParam*>(
      ::OpSquareParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_matmul_param_ = const_cast< ::OpMatMulParam*>(
      ::OpMatMulParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_pooling_param_ = const_cast< ::OpPoolingParam*>(
      ::OpPoolingParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_argmax_param_ = const_cast< ::OpArgmaxParam*>(
      ::OpArgmaxParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_reduce_param_ = const_cast< ::OpReduceParam*>(
      ::OpReduceParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->op_equal_param_ = const_cast< ::OpEqualParam*>(
      ::OpEqualParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::TensorParam*>(
      ::TensorParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->fill_param_ = const_cast< ::InitFillParam*>(
      ::InitFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->index_fill_param_ = const_cast< ::InitIndexFillParam*>(
      ::InitIndexFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->random_uniform_param_ = const_cast< ::InitRandomUniformParam*>(
      ::InitRandomUniformParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->step_param_ = const_cast< ::InitStepParam*>(
      ::InitStepParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->sgd_solver_ = const_cast< ::SGDSolverParam*>(
      ::SGDSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->gain_solver_ = const_cast< ::GainSolverParam*>(
      ::GainSolverParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016deepflow.proto\"\222\001\n\013TensorParam\022%\n\004type"
      "\030\001 \001(\0162\027.TensorParam.TensorType\022\014\n\004dims\030"
      "\002 \003(\005\"N\n\nTensorType\022\t\n\005FLOAT\020\000\022\n\n\006DOUBLE"
      "\020\001\022\010\n\004HALF\020\002\022\010\n\004INT8\020\003\022\t\n\005INT32\020\004\022\n\n\006INT"
      "8x4\020\005\")\n\nOpAddParam\022\r\n\005alpha\030\001 \001(\002\022\014\n\004be"
      "ta\030\002 \001(\002\"\016\n\014OpEqualParam\"\020\n\016OpBiasAddPar"
      "am\"v\n\016OpPoolingParam\022\020\n\010window_h\030\001 \001(\005\022\020"
      "\n\010window_w\030\002 \001(\005\022\r\n\005h_pad\030\003 \001(\005\022\r\n\005v_pad"
      "\030\004 \001(\005\022\020\n\010h_stride\030\005 \001(\005\022\020\n\010v_stride\030\006 \001"
      "(\005\"i\n\rOpConv2dParam\022\r\n\005pad_h\030\001 \001(\005\022\r\n\005pa"
      "d_w\030\002 \001(\005\022\t\n\001u\030\003 \001(\005\022\t\n\001v\030\004 \001(\005\022\021\n\tupsca"
      "le_x\030\005 \001(\005\022\021\n\tupscale_y\030\006 \001(\005\"!\n\016OpDropo"
      "utParam\022\017\n\007dropout\030\001 \001(\002\",\n\rOpMatMulPara"
      "m\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"%\n\013OpRelu"
      "Param\022\026\n\016negative_slope\030\001 \001(\002\"\250\001\n\rOpRedu"
      "ceParam\022*\n\treduce_op\030\001 \001(\0162\027.OpReducePar"
      "am.ReduceOp\022\022\n\nreduce_dim\030\002 \001(\005\"W\n\010Reduc"
      "eOp\022\007\n\003ADD\020\000\022\007\n\003MUL\020\001\022\007\n\003MIN\020\002\022\007\n\003MAX\020\003\022"
      "\010\n\004AMAX\020\004\022\007\n\003AVG\020\005\022\t\n\005NORM1\020\006\022\t\n\005NORM2\020\007"
      "\"v\n\rSnapshotParam\022\031\n\021snapshot_interval\030\001"
      " \001(\005\022\027\n\017snapshot_prefix\030\002 \001(\t\022\030\n\020per_ima"
      "ge_height\030\003 \001(\005\022\027\n\017per_image_width\030\004 \001(\005"
      "\"7\n\rVariableParam\022&\n\016snapshot_param\030\001 \001("
      "\0132\016.SnapshotParam\"\014\n\nBlockParam\":\n\tLossP"
      "aram\022-\n\022softmax_loss_param\030\001 \001(\0132\021.Softm"
      "axLossParam\"\212\001\n\020MnistReaderParam\022\023\n\013fold"
      "er_path\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\005\022*\n\004typ"
      "e\030\003 \001(\0162\034.MnistReaderParam.ReaderType\"!\n"
      "\nReaderType\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001\"\300\005\n\tNod"
      "eParam\022\014\n\004name\030\001 \001(\t\022\"\n\014tensor_param\030\n \001"
      "(\0132\014.TensorParam\022-\n\022mnist_reader_param\030\024"
      " \001(\0132\021.MnistReaderParam\022&\n\016variable_para"
      "m\030\036 \001(\0132\016.VariableParam\022 \n\013block_param\030("
      " \001(\0132\013.BlockParam\022\036\n\nloss_param\0302 \001(\0132\n."
      "LossParam\022!\n\014op_add_param\030< \001(\0132\013.OpAddP"
      "aram\022*\n\021op_bias_add_param\030= \001(\0132\017.OpBias"
      "AddParam\022(\n\020op_conv_2d_param\030> \001(\0132\016.OpC"
      "onv2dParam\022)\n\020op_dropout_param\030\? \001(\0132\017.O"
      "pDropoutParam\022#\n\rop_relu_param\030@ \001(\0132\014.O"
      "pReluParam\022)\n\020op_softmax_param\030A \001(\0132\017.O"
      "pSoftmaxParam\022\'\n\017op_square_param\030B \001(\0132\016"
      ".OpSquareParam\022\'\n\017op_matmul_param\030C \001(\0132"
      "\016.OpMatMulParam\022)\n\020op_pooling_param\030D \001("
      "\0132\017.OpPoolingParam\022\'\n\017op_argmax_param\030E "
      "\001(\0132\016.OpArgmaxParam\022\'\n\017op_reduce_param\030F"
      " \001(\0132\016.OpReduceParam\022%\n\016op_equal_param\030G"
      " \001(\0132\r.OpEqualParam\"\017\n\rOpArgmaxParam\"\017\n\r"
      "OpSquareParam\"/\n\020SoftmaxLossParam\022\r\n\005alp"
      "ha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"-\n\016OpSoftmaxParam"
      "\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"\036\n\rInitFil"
      "lParam\022\r\n\005value\030\001 \001(\002\"$\n\022InitIndexFillPa"
      "ram\022\016\n\006offset\030\001 \001(\002\"2\n\026InitRandomUniform"
      "Param\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\")\n\rInitS"
      "tepParam\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"\335\001\n\tI"
      "nitParam\022\"\n\014tensor_param\030\001 \001(\0132\014.TensorP"
      "aram\022\"\n\nfill_param\030\002 \001(\0132\016.InitFillParam"
      "\022-\n\020index_fill_param\030\003 \001(\0132\023.InitIndexFi"
      "llParam\0225\n\024random_uniform_param\030\004 \001(\0132\027."
      "InitRandomUniformParam\022\"\n\nstep_param\030\005 \001"
      "(\0132\016.InitStepParam\"9\n\016SGDSolverParam\022\020\n\010"
      "momentum\030\001 \001(\002\022\025\n\rlearning_rate\030\002 \001(\002\"\204\001"
      "\n\017GainSolverParam\022\020\n\010momentum\030\001 \001(\002\022\025\n\rl"
      "earning_rate\030\002 \001(\002\022\020\n\010max_gain\030\003 \001(\002\022\020\n\010"
      "min_gain\030\004 \001(\002\022\021\n\tgain_plus\030\005 \001(\002\022\021\n\tgai"
      "n_mult\030\006 \001(\002\"p\n\013SolverParam\022\025\n\rmax_itera"
      "tion\030\001 \001(\005\022#\n\nsgd_solver\030\002 \001(\0132\017.SGDSolv"
      "erParam\022%\n\013gain_solver\030\003 \001(\0132\020.GainSolve"
      "rParamb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deepflow.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_deepflow_2eproto

const ::google::protobuf::EnumDescriptor* TensorParam_TensorType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[0];
}
bool TensorParam_TensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorParam_TensorType TensorParam::FLOAT;
const TensorParam_TensorType TensorParam::DOUBLE;
const TensorParam_TensorType TensorParam::HALF;
const TensorParam_TensorType TensorParam::INT8;
const TensorParam_TensorType TensorParam::INT32;
const TensorParam_TensorType TensorParam::INT8x4;
const TensorParam_TensorType TensorParam::TensorType_MIN;
const TensorParam_TensorType TensorParam::TensorType_MAX;
const int TensorParam::TensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OpReduceParam_ReduceOp_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[1];
}
bool OpReduceParam_ReduceOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpReduceParam_ReduceOp OpReduceParam::ADD;
const OpReduceParam_ReduceOp OpReduceParam::MUL;
const OpReduceParam_ReduceOp OpReduceParam::MIN;
const OpReduceParam_ReduceOp OpReduceParam::MAX;
const OpReduceParam_ReduceOp OpReduceParam::AMAX;
const OpReduceParam_ReduceOp OpReduceParam::AVG;
const OpReduceParam_ReduceOp OpReduceParam::NORM1;
const OpReduceParam_ReduceOp OpReduceParam::NORM2;
const OpReduceParam_ReduceOp OpReduceParam::ReduceOp_MIN;
const OpReduceParam_ReduceOp OpReduceParam::ReduceOp_MAX;
const int OpReduceParam::ReduceOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MnistReaderParam_ReaderType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[2];
}
bool MnistReaderParam_ReaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MnistReaderParam_ReaderType MnistReaderParam::TRAIN;
const MnistReaderParam_ReaderType MnistReaderParam::TEST;
const MnistReaderParam_ReaderType MnistReaderParam::ReaderType_MIN;
const MnistReaderParam_ReaderType MnistReaderParam::ReaderType_MAX;
const int MnistReaderParam::ReaderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorParam::kTypeFieldNumber;
const int TensorParam::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorParam::TensorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorParam)
}
TensorParam::TensorParam(const TensorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dims_(from.dims_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TensorParam)
}

void TensorParam::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

TensorParam::~TensorParam() {
  // @@protoc_insertion_point(destructor:TensorParam)
  SharedDtor();
}

void TensorParam::SharedDtor() {
}

void TensorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[0].descriptor;
}

const TensorParam& TensorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorParam* TensorParam::New(::google::protobuf::Arena* arena) const {
  TensorParam* n = new TensorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorParam)
  dims_.Clear();
  type_ = 0;
}

bool TensorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TensorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam.TensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TensorParam_TensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dims = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TensorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TensorParam)
  return false;
#undef DO_
}

void TensorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TensorParam)
  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dims(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TensorParam)
}

::google::protobuf::uint8* TensorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TensorParam)
  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dims_cached_byte_size_, target);
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dims(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TensorParam)
  return target;
}

size_t TensorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorParam)
  size_t total_size = 0;

  // repeated int32 dims = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TensorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TensorParam)
    MergeFrom(*source);
  }
}

void TensorParam::MergeFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dims_.MergeFrom(from.dims_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TensorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorParam::CopyFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParam::IsInitialized() const {
  return true;
}

void TensorParam::Swap(TensorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorParam::InternalSwap(TensorParam* other) {
  dims_.UnsafeArenaSwap(&other->dims_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorParam

// .TensorParam.TensorType type = 1;
void TensorParam::clear_type() {
  type_ = 0;
}
::TensorParam_TensorType TensorParam::type() const {
  // @@protoc_insertion_point(field_get:TensorParam.type)
  return static_cast< ::TensorParam_TensorType >(type_);
}
void TensorParam::set_type(::TensorParam_TensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TensorParam.type)
}

// repeated int32 dims = 2;
int TensorParam::dims_size() const {
  return dims_.size();
}
void TensorParam::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int32 TensorParam::dims(int index) const {
  // @@protoc_insertion_point(field_get:TensorParam.dims)
  return dims_.Get(index);
}
void TensorParam::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorParam.dims)
}
void TensorParam::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:TensorParam.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorParam::dims() const {
  // @@protoc_insertion_point(field_list:TensorParam.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorParam::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:TensorParam.dims)
  return &dims_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpAddParam::kAlphaFieldNumber;
const int OpAddParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpAddParam::OpAddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpAddParam)
}
OpAddParam::OpAddParam(const OpAddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:OpAddParam)
}

void OpAddParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

OpAddParam::~OpAddParam() {
  // @@protoc_insertion_point(destructor:OpAddParam)
  SharedDtor();
}

void OpAddParam::SharedDtor() {
}

void OpAddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpAddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[1].descriptor;
}

const OpAddParam& OpAddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpAddParam* OpAddParam::New(::google::protobuf::Arena* arena) const {
  OpAddParam* n = new OpAddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpAddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpAddParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool OpAddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpAddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpAddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpAddParam)
  return false;
#undef DO_
}

void OpAddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpAddParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpAddParam)
}

::google::protobuf::uint8* OpAddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpAddParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpAddParam)
  return target;
}

size_t OpAddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpAddParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpAddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpAddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpAddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpAddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpAddParam)
    MergeFrom(*source);
  }
}

void OpAddParam::MergeFrom(const OpAddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void OpAddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpAddParam::CopyFrom(const OpAddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpAddParam::IsInitialized() const {
  return true;
}

void OpAddParam::Swap(OpAddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpAddParam::InternalSwap(OpAddParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpAddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpAddParam

// float alpha = 1;
void OpAddParam::clear_alpha() {
  alpha_ = 0;
}
float OpAddParam::alpha() const {
  // @@protoc_insertion_point(field_get:OpAddParam.alpha)
  return alpha_;
}
void OpAddParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:OpAddParam.alpha)
}

// float beta = 2;
void OpAddParam::clear_beta() {
  beta_ = 0;
}
float OpAddParam::beta() const {
  // @@protoc_insertion_point(field_get:OpAddParam.beta)
  return beta_;
}
void OpAddParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:OpAddParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpEqualParam::OpEqualParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpEqualParam)
}
OpEqualParam::OpEqualParam(const OpEqualParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpEqualParam)
}

void OpEqualParam::SharedCtor() {
  _cached_size_ = 0;
}

OpEqualParam::~OpEqualParam() {
  // @@protoc_insertion_point(destructor:OpEqualParam)
  SharedDtor();
}

void OpEqualParam::SharedDtor() {
}

void OpEqualParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpEqualParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[2].descriptor;
}

const OpEqualParam& OpEqualParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpEqualParam* OpEqualParam::New(::google::protobuf::Arena* arena) const {
  OpEqualParam* n = new OpEqualParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpEqualParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpEqualParam)
}

bool OpEqualParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpEqualParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:OpEqualParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpEqualParam)
  return false;
#undef DO_
}

void OpEqualParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpEqualParam)
  // @@protoc_insertion_point(serialize_end:OpEqualParam)
}

::google::protobuf::uint8* OpEqualParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpEqualParam)
  // @@protoc_insertion_point(serialize_to_array_end:OpEqualParam)
  return target;
}

size_t OpEqualParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpEqualParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpEqualParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpEqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpEqualParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpEqualParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpEqualParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpEqualParam)
    MergeFrom(*source);
  }
}

void OpEqualParam::MergeFrom(const OpEqualParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpEqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void OpEqualParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpEqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpEqualParam::CopyFrom(const OpEqualParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpEqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpEqualParam::IsInitialized() const {
  return true;
}

void OpEqualParam::Swap(OpEqualParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpEqualParam::InternalSwap(OpEqualParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpEqualParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpEqualParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpBiasAddParam::OpBiasAddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpBiasAddParam)
}
OpBiasAddParam::OpBiasAddParam(const OpBiasAddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpBiasAddParam)
}

void OpBiasAddParam::SharedCtor() {
  _cached_size_ = 0;
}

OpBiasAddParam::~OpBiasAddParam() {
  // @@protoc_insertion_point(destructor:OpBiasAddParam)
  SharedDtor();
}

void OpBiasAddParam::SharedDtor() {
}

void OpBiasAddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpBiasAddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[3].descriptor;
}

const OpBiasAddParam& OpBiasAddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpBiasAddParam* OpBiasAddParam::New(::google::protobuf::Arena* arena) const {
  OpBiasAddParam* n = new OpBiasAddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpBiasAddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpBiasAddParam)
}

bool OpBiasAddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpBiasAddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:OpBiasAddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpBiasAddParam)
  return false;
#undef DO_
}

void OpBiasAddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpBiasAddParam)
  // @@protoc_insertion_point(serialize_end:OpBiasAddParam)
}

::google::protobuf::uint8* OpBiasAddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpBiasAddParam)
  // @@protoc_insertion_point(serialize_to_array_end:OpBiasAddParam)
  return target;
}

size_t OpBiasAddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpBiasAddParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpBiasAddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpBiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpBiasAddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpBiasAddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpBiasAddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpBiasAddParam)
    MergeFrom(*source);
  }
}

void OpBiasAddParam::MergeFrom(const OpBiasAddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpBiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void OpBiasAddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpBiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpBiasAddParam::CopyFrom(const OpBiasAddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpBiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpBiasAddParam::IsInitialized() const {
  return true;
}

void OpBiasAddParam::Swap(OpBiasAddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpBiasAddParam::InternalSwap(OpBiasAddParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpBiasAddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpBiasAddParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPoolingParam::kWindowHFieldNumber;
const int OpPoolingParam::kWindowWFieldNumber;
const int OpPoolingParam::kHPadFieldNumber;
const int OpPoolingParam::kVPadFieldNumber;
const int OpPoolingParam::kHStrideFieldNumber;
const int OpPoolingParam::kVStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPoolingParam::OpPoolingParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpPoolingParam)
}
OpPoolingParam::OpPoolingParam(const OpPoolingParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&window_h_, &from.window_h_,
    reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  // @@protoc_insertion_point(copy_constructor:OpPoolingParam)
}

void OpPoolingParam::SharedCtor() {
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  _cached_size_ = 0;
}

OpPoolingParam::~OpPoolingParam() {
  // @@protoc_insertion_point(destructor:OpPoolingParam)
  SharedDtor();
}

void OpPoolingParam::SharedDtor() {
}

void OpPoolingParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPoolingParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[4].descriptor;
}

const OpPoolingParam& OpPoolingParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPoolingParam* OpPoolingParam::New(::google::protobuf::Arena* arena) const {
  OpPoolingParam* n = new OpPoolingParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpPoolingParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpPoolingParam)
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
}

bool OpPoolingParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpPoolingParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 window_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 window_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_pad = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_stride = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpPoolingParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpPoolingParam)
  return false;
#undef DO_
}

void OpPoolingParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpPoolingParam)
  // int32 window_h = 1;
  if (this->window_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_h(), output);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_w(), output);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h_pad(), output);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v_pad(), output);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->h_stride(), output);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->v_stride(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpPoolingParam)
}

::google::protobuf::uint8* OpPoolingParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpPoolingParam)
  // int32 window_h = 1;
  if (this->window_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_h(), target);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_w(), target);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h_pad(), target);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v_pad(), target);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->h_stride(), target);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->v_stride(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpPoolingParam)
  return target;
}

size_t OpPoolingParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpPoolingParam)
  size_t total_size = 0;

  // int32 window_h = 1;
  if (this->window_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_h());
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_w());
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_pad());
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_pad());
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_stride());
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_stride());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPoolingParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpPoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPoolingParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPoolingParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpPoolingParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpPoolingParam)
    MergeFrom(*source);
  }
}

void OpPoolingParam::MergeFrom(const OpPoolingParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpPoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.window_h() != 0) {
    set_window_h(from.window_h());
  }
  if (from.window_w() != 0) {
    set_window_w(from.window_w());
  }
  if (from.h_pad() != 0) {
    set_h_pad(from.h_pad());
  }
  if (from.v_pad() != 0) {
    set_v_pad(from.v_pad());
  }
  if (from.h_stride() != 0) {
    set_h_stride(from.h_stride());
  }
  if (from.v_stride() != 0) {
    set_v_stride(from.v_stride());
  }
}

void OpPoolingParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpPoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPoolingParam::CopyFrom(const OpPoolingParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpPoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPoolingParam::IsInitialized() const {
  return true;
}

void OpPoolingParam::Swap(OpPoolingParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpPoolingParam::InternalSwap(OpPoolingParam* other) {
  std::swap(window_h_, other->window_h_);
  std::swap(window_w_, other->window_w_);
  std::swap(h_pad_, other->h_pad_);
  std::swap(v_pad_, other->v_pad_);
  std::swap(h_stride_, other->h_stride_);
  std::swap(v_stride_, other->v_stride_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPoolingParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPoolingParam

// int32 window_h = 1;
void OpPoolingParam::clear_window_h() {
  window_h_ = 0;
}
::google::protobuf::int32 OpPoolingParam::window_h() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.window_h)
  return window_h_;
}
void OpPoolingParam::set_window_h(::google::protobuf::int32 value) {
  
  window_h_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.window_h)
}

// int32 window_w = 2;
void OpPoolingParam::clear_window_w() {
  window_w_ = 0;
}
::google::protobuf::int32 OpPoolingParam::window_w() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.window_w)
  return window_w_;
}
void OpPoolingParam::set_window_w(::google::protobuf::int32 value) {
  
  window_w_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.window_w)
}

// int32 h_pad = 3;
void OpPoolingParam::clear_h_pad() {
  h_pad_ = 0;
}
::google::protobuf::int32 OpPoolingParam::h_pad() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.h_pad)
  return h_pad_;
}
void OpPoolingParam::set_h_pad(::google::protobuf::int32 value) {
  
  h_pad_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.h_pad)
}

// int32 v_pad = 4;
void OpPoolingParam::clear_v_pad() {
  v_pad_ = 0;
}
::google::protobuf::int32 OpPoolingParam::v_pad() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.v_pad)
  return v_pad_;
}
void OpPoolingParam::set_v_pad(::google::protobuf::int32 value) {
  
  v_pad_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.v_pad)
}

// int32 h_stride = 5;
void OpPoolingParam::clear_h_stride() {
  h_stride_ = 0;
}
::google::protobuf::int32 OpPoolingParam::h_stride() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.h_stride)
  return h_stride_;
}
void OpPoolingParam::set_h_stride(::google::protobuf::int32 value) {
  
  h_stride_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.h_stride)
}

// int32 v_stride = 6;
void OpPoolingParam::clear_v_stride() {
  v_stride_ = 0;
}
::google::protobuf::int32 OpPoolingParam::v_stride() const {
  // @@protoc_insertion_point(field_get:OpPoolingParam.v_stride)
  return v_stride_;
}
void OpPoolingParam::set_v_stride(::google::protobuf::int32 value) {
  
  v_stride_ = value;
  // @@protoc_insertion_point(field_set:OpPoolingParam.v_stride)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpConv2dParam::kPadHFieldNumber;
const int OpConv2dParam::kPadWFieldNumber;
const int OpConv2dParam::kUFieldNumber;
const int OpConv2dParam::kVFieldNumber;
const int OpConv2dParam::kUpscaleXFieldNumber;
const int OpConv2dParam::kUpscaleYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpConv2dParam::OpConv2dParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpConv2dParam)
}
OpConv2dParam::OpConv2dParam(const OpConv2dParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_h_, &from.pad_h_,
    reinterpret_cast<char*>(&upscale_y_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(upscale_y_));
  // @@protoc_insertion_point(copy_constructor:OpConv2dParam)
}

void OpConv2dParam::SharedCtor() {
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&upscale_y_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(upscale_y_));
  _cached_size_ = 0;
}

OpConv2dParam::~OpConv2dParam() {
  // @@protoc_insertion_point(destructor:OpConv2dParam)
  SharedDtor();
}

void OpConv2dParam::SharedDtor() {
}

void OpConv2dParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpConv2dParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[5].descriptor;
}

const OpConv2dParam& OpConv2dParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpConv2dParam* OpConv2dParam::New(::google::protobuf::Arena* arena) const {
  OpConv2dParam* n = new OpConv2dParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpConv2dParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpConv2dParam)
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&upscale_y_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(upscale_y_));
}

bool OpConv2dParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpConv2dParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pad_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 u = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upscale_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upscale_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upscale_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upscale_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpConv2dParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpConv2dParam)
  return false;
#undef DO_
}

void OpConv2dParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpConv2dParam)
  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pad_h(), output);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pad_w(), output);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->u(), output);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  // int32 upscale_x = 5;
  if (this->upscale_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upscale_x(), output);
  }

  // int32 upscale_y = 6;
  if (this->upscale_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upscale_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpConv2dParam)
}

::google::protobuf::uint8* OpConv2dParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpConv2dParam)
  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pad_h(), target);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pad_w(), target);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->u(), target);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  // int32 upscale_x = 5;
  if (this->upscale_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upscale_x(), target);
  }

  // int32 upscale_y = 6;
  if (this->upscale_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upscale_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpConv2dParam)
  return target;
}

size_t OpConv2dParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpConv2dParam)
  size_t total_size = 0;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_h());
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_w());
  }

  // int32 u = 3;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  // int32 v = 4;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 upscale_x = 5;
  if (this->upscale_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upscale_x());
  }

  // int32 upscale_y = 6;
  if (this->upscale_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upscale_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpConv2dParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpConv2dParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpConv2dParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpConv2dParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpConv2dParam)
    MergeFrom(*source);
  }
}

void OpConv2dParam::MergeFrom(const OpConv2dParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pad_h() != 0) {
    set_pad_h(from.pad_h());
  }
  if (from.pad_w() != 0) {
    set_pad_w(from.pad_w());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.upscale_x() != 0) {
    set_upscale_x(from.upscale_x());
  }
  if (from.upscale_y() != 0) {
    set_upscale_y(from.upscale_y());
  }
}

void OpConv2dParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpConv2dParam::CopyFrom(const OpConv2dParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpConv2dParam::IsInitialized() const {
  return true;
}

void OpConv2dParam::Swap(OpConv2dParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpConv2dParam::InternalSwap(OpConv2dParam* other) {
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(upscale_x_, other->upscale_x_);
  std::swap(upscale_y_, other->upscale_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpConv2dParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpConv2dParam

// int32 pad_h = 1;
void OpConv2dParam::clear_pad_h() {
  pad_h_ = 0;
}
::google::protobuf::int32 OpConv2dParam::pad_h() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.pad_h)
  return pad_h_;
}
void OpConv2dParam::set_pad_h(::google::protobuf::int32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.pad_h)
}

// int32 pad_w = 2;
void OpConv2dParam::clear_pad_w() {
  pad_w_ = 0;
}
::google::protobuf::int32 OpConv2dParam::pad_w() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.pad_w)
  return pad_w_;
}
void OpConv2dParam::set_pad_w(::google::protobuf::int32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.pad_w)
}

// int32 u = 3;
void OpConv2dParam::clear_u() {
  u_ = 0;
}
::google::protobuf::int32 OpConv2dParam::u() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.u)
  return u_;
}
void OpConv2dParam::set_u(::google::protobuf::int32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.u)
}

// int32 v = 4;
void OpConv2dParam::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 OpConv2dParam::v() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.v)
  return v_;
}
void OpConv2dParam::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.v)
}

// int32 upscale_x = 5;
void OpConv2dParam::clear_upscale_x() {
  upscale_x_ = 0;
}
::google::protobuf::int32 OpConv2dParam::upscale_x() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.upscale_x)
  return upscale_x_;
}
void OpConv2dParam::set_upscale_x(::google::protobuf::int32 value) {
  
  upscale_x_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.upscale_x)
}

// int32 upscale_y = 6;
void OpConv2dParam::clear_upscale_y() {
  upscale_y_ = 0;
}
::google::protobuf::int32 OpConv2dParam::upscale_y() const {
  // @@protoc_insertion_point(field_get:OpConv2dParam.upscale_y)
  return upscale_y_;
}
void OpConv2dParam::set_upscale_y(::google::protobuf::int32 value) {
  
  upscale_y_ = value;
  // @@protoc_insertion_point(field_set:OpConv2dParam.upscale_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpDropoutParam::kDropoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpDropoutParam::OpDropoutParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpDropoutParam)
}
OpDropoutParam::OpDropoutParam(const OpDropoutParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ = from.dropout_;
  // @@protoc_insertion_point(copy_constructor:OpDropoutParam)
}

void OpDropoutParam::SharedCtor() {
  dropout_ = 0;
  _cached_size_ = 0;
}

OpDropoutParam::~OpDropoutParam() {
  // @@protoc_insertion_point(destructor:OpDropoutParam)
  SharedDtor();
}

void OpDropoutParam::SharedDtor() {
}

void OpDropoutParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpDropoutParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[6].descriptor;
}

const OpDropoutParam& OpDropoutParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpDropoutParam* OpDropoutParam::New(::google::protobuf::Arena* arena) const {
  OpDropoutParam* n = new OpDropoutParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpDropoutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpDropoutParam)
  dropout_ = 0;
}

bool OpDropoutParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpDropoutParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dropout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpDropoutParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpDropoutParam)
  return false;
#undef DO_
}

void OpDropoutParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpDropoutParam)
  // float dropout = 1;
  if (this->dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpDropoutParam)
}

::google::protobuf::uint8* OpDropoutParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpDropoutParam)
  // float dropout = 1;
  if (this->dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpDropoutParam)
  return target;
}

size_t OpDropoutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpDropoutParam)
  size_t total_size = 0;

  // float dropout = 1;
  if (this->dropout() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpDropoutParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpDropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDropoutParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpDropoutParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpDropoutParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpDropoutParam)
    MergeFrom(*source);
  }
}

void OpDropoutParam::MergeFrom(const OpDropoutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpDropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dropout() != 0) {
    set_dropout(from.dropout());
  }
}

void OpDropoutParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpDropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDropoutParam::CopyFrom(const OpDropoutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpDropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDropoutParam::IsInitialized() const {
  return true;
}

void OpDropoutParam::Swap(OpDropoutParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpDropoutParam::InternalSwap(OpDropoutParam* other) {
  std::swap(dropout_, other->dropout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpDropoutParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpDropoutParam

// float dropout = 1;
void OpDropoutParam::clear_dropout() {
  dropout_ = 0;
}
float OpDropoutParam::dropout() const {
  // @@protoc_insertion_point(field_get:OpDropoutParam.dropout)
  return dropout_;
}
void OpDropoutParam::set_dropout(float value) {
  
  dropout_ = value;
  // @@protoc_insertion_point(field_set:OpDropoutParam.dropout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpMatMulParam::kAlphaFieldNumber;
const int OpMatMulParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpMatMulParam::OpMatMulParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpMatMulParam)
}
OpMatMulParam::OpMatMulParam(const OpMatMulParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:OpMatMulParam)
}

void OpMatMulParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

OpMatMulParam::~OpMatMulParam() {
  // @@protoc_insertion_point(destructor:OpMatMulParam)
  SharedDtor();
}

void OpMatMulParam::SharedDtor() {
}

void OpMatMulParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpMatMulParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[7].descriptor;
}

const OpMatMulParam& OpMatMulParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpMatMulParam* OpMatMulParam::New(::google::protobuf::Arena* arena) const {
  OpMatMulParam* n = new OpMatMulParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpMatMulParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpMatMulParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool OpMatMulParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpMatMulParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpMatMulParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpMatMulParam)
  return false;
#undef DO_
}

void OpMatMulParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpMatMulParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpMatMulParam)
}

::google::protobuf::uint8* OpMatMulParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpMatMulParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpMatMulParam)
  return target;
}

size_t OpMatMulParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpMatMulParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpMatMulParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpMatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpMatMulParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpMatMulParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpMatMulParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpMatMulParam)
    MergeFrom(*source);
  }
}

void OpMatMulParam::MergeFrom(const OpMatMulParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpMatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void OpMatMulParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpMatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpMatMulParam::CopyFrom(const OpMatMulParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpMatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpMatMulParam::IsInitialized() const {
  return true;
}

void OpMatMulParam::Swap(OpMatMulParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpMatMulParam::InternalSwap(OpMatMulParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpMatMulParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpMatMulParam

// float alpha = 1;
void OpMatMulParam::clear_alpha() {
  alpha_ = 0;
}
float OpMatMulParam::alpha() const {
  // @@protoc_insertion_point(field_get:OpMatMulParam.alpha)
  return alpha_;
}
void OpMatMulParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:OpMatMulParam.alpha)
}

// float beta = 2;
void OpMatMulParam::clear_beta() {
  beta_ = 0;
}
float OpMatMulParam::beta() const {
  // @@protoc_insertion_point(field_get:OpMatMulParam.beta)
  return beta_;
}
void OpMatMulParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:OpMatMulParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpReluParam::kNegativeSlopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpReluParam::OpReluParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpReluParam)
}
OpReluParam::OpReluParam(const OpReluParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_slope_ = from.negative_slope_;
  // @@protoc_insertion_point(copy_constructor:OpReluParam)
}

void OpReluParam::SharedCtor() {
  negative_slope_ = 0;
  _cached_size_ = 0;
}

OpReluParam::~OpReluParam() {
  // @@protoc_insertion_point(destructor:OpReluParam)
  SharedDtor();
}

void OpReluParam::SharedDtor() {
}

void OpReluParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpReluParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[8].descriptor;
}

const OpReluParam& OpReluParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpReluParam* OpReluParam::New(::google::protobuf::Arena* arena) const {
  OpReluParam* n = new OpReluParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpReluParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpReluParam)
  negative_slope_ = 0;
}

bool OpReluParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpReluParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float negative_slope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpReluParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpReluParam)
  return false;
#undef DO_
}

void OpReluParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpReluParam)
  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpReluParam)
}

::google::protobuf::uint8* OpReluParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpReluParam)
  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpReluParam)
  return target;
}

size_t OpReluParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpReluParam)
  size_t total_size = 0;

  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpReluParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpReluParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpReluParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpReluParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpReluParam)
    MergeFrom(*source);
  }
}

void OpReluParam::MergeFrom(const OpReluParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.negative_slope() != 0) {
    set_negative_slope(from.negative_slope());
  }
}

void OpReluParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpReluParam::CopyFrom(const OpReluParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReluParam::IsInitialized() const {
  return true;
}

void OpReluParam::Swap(OpReluParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpReluParam::InternalSwap(OpReluParam* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpReluParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpReluParam

// float negative_slope = 1;
void OpReluParam::clear_negative_slope() {
  negative_slope_ = 0;
}
float OpReluParam::negative_slope() const {
  // @@protoc_insertion_point(field_get:OpReluParam.negative_slope)
  return negative_slope_;
}
void OpReluParam::set_negative_slope(float value) {
  
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:OpReluParam.negative_slope)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpReduceParam::kReduceOpFieldNumber;
const int OpReduceParam::kReduceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpReduceParam::OpReduceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpReduceParam)
}
OpReduceParam::OpReduceParam(const OpReduceParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reduce_op_, &from.reduce_op_,
    reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
  // @@protoc_insertion_point(copy_constructor:OpReduceParam)
}

void OpReduceParam::SharedCtor() {
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
  _cached_size_ = 0;
}

OpReduceParam::~OpReduceParam() {
  // @@protoc_insertion_point(destructor:OpReduceParam)
  SharedDtor();
}

void OpReduceParam::SharedDtor() {
}

void OpReduceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpReduceParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[9].descriptor;
}

const OpReduceParam& OpReduceParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpReduceParam* OpReduceParam::New(::google::protobuf::Arena* arena) const {
  OpReduceParam* n = new OpReduceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpReduceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpReduceParam)
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
}

bool OpReduceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpReduceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .OpReduceParam.ReduceOp reduce_op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reduce_op(static_cast< ::OpReduceParam_ReduceOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reduce_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpReduceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpReduceParam)
  return false;
#undef DO_
}

void OpReduceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpReduceParam)
  // .OpReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reduce_op(), output);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reduce_dim(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpReduceParam)
}

::google::protobuf::uint8* OpReduceParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpReduceParam)
  // .OpReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reduce_op(), target);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reduce_dim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpReduceParam)
  return target;
}

size_t OpReduceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpReduceParam)
  size_t total_size = 0;

  // .OpReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reduce_op());
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reduce_dim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpReduceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpReduceParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpReduceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpReduceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpReduceParam)
    MergeFrom(*source);
  }
}

void OpReduceParam::MergeFrom(const OpReduceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.reduce_op() != 0) {
    set_reduce_op(from.reduce_op());
  }
  if (from.reduce_dim() != 0) {
    set_reduce_dim(from.reduce_dim());
  }
}

void OpReduceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpReduceParam::CopyFrom(const OpReduceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReduceParam::IsInitialized() const {
  return true;
}

void OpReduceParam::Swap(OpReduceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpReduceParam::InternalSwap(OpReduceParam* other) {
  std::swap(reduce_op_, other->reduce_op_);
  std::swap(reduce_dim_, other->reduce_dim_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpReduceParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpReduceParam

// .OpReduceParam.ReduceOp reduce_op = 1;
void OpReduceParam::clear_reduce_op() {
  reduce_op_ = 0;
}
::OpReduceParam_ReduceOp OpReduceParam::reduce_op() const {
  // @@protoc_insertion_point(field_get:OpReduceParam.reduce_op)
  return static_cast< ::OpReduceParam_ReduceOp >(reduce_op_);
}
void OpReduceParam::set_reduce_op(::OpReduceParam_ReduceOp value) {
  
  reduce_op_ = value;
  // @@protoc_insertion_point(field_set:OpReduceParam.reduce_op)
}

// int32 reduce_dim = 2;
void OpReduceParam::clear_reduce_dim() {
  reduce_dim_ = 0;
}
::google::protobuf::int32 OpReduceParam::reduce_dim() const {
  // @@protoc_insertion_point(field_get:OpReduceParam.reduce_dim)
  return reduce_dim_;
}
void OpReduceParam::set_reduce_dim(::google::protobuf::int32 value) {
  
  reduce_dim_ = value;
  // @@protoc_insertion_point(field_set:OpReduceParam.reduce_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotParam::kSnapshotIntervalFieldNumber;
const int SnapshotParam::kSnapshotPrefixFieldNumber;
const int SnapshotParam::kPerImageHeightFieldNumber;
const int SnapshotParam::kPerImageWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotParam::SnapshotParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SnapshotParam)
}
SnapshotParam::SnapshotParam(const SnapshotParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_prefix().size() > 0) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  ::memcpy(&snapshot_interval_, &from.snapshot_interval_,
    reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  // @@protoc_insertion_point(copy_constructor:SnapshotParam)
}

void SnapshotParam::SharedCtor() {
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  _cached_size_ = 0;
}

SnapshotParam::~SnapshotParam() {
  // @@protoc_insertion_point(destructor:SnapshotParam)
  SharedDtor();
}

void SnapshotParam::SharedDtor() {
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[10].descriptor;
}

const SnapshotParam& SnapshotParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotParam* SnapshotParam::New(::google::protobuf::Arena* arena) const {
  SnapshotParam* n = new SnapshotParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SnapshotParam)
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
}

bool SnapshotParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SnapshotParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 snapshot_interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SnapshotParam.snapshot_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SnapshotParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SnapshotParam)
  return false;
#undef DO_
}

void SnapshotParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SnapshotParam)
  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->snapshot_interval(), output);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotParam.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshot_prefix(), output);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->per_image_height(), output);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->per_image_width(), output);
  }

  // @@protoc_insertion_point(serialize_end:SnapshotParam)
}

::google::protobuf::uint8* SnapshotParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SnapshotParam)
  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->snapshot_interval(), target);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotParam.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshot_prefix(), target);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->per_image_height(), target);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->per_image_width(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SnapshotParam)
  return target;
}

size_t SnapshotParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnapshotParam)
  size_t total_size = 0;

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_prefix());
  }

  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->snapshot_interval());
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_height());
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SnapshotParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SnapshotParam)
    MergeFrom(*source);
  }
}

void SnapshotParam::MergeFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.snapshot_prefix().size() > 0) {

    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  if (from.snapshot_interval() != 0) {
    set_snapshot_interval(from.snapshot_interval());
  }
  if (from.per_image_height() != 0) {
    set_per_image_height(from.per_image_height());
  }
  if (from.per_image_width() != 0) {
    set_per_image_width(from.per_image_width());
  }
}

void SnapshotParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotParam::CopyFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotParam::IsInitialized() const {
  return true;
}

void SnapshotParam::Swap(SnapshotParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotParam::InternalSwap(SnapshotParam* other) {
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(snapshot_interval_, other->snapshot_interval_);
  std::swap(per_image_height_, other->per_image_height_);
  std::swap(per_image_width_, other->per_image_width_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotParam

// int32 snapshot_interval = 1;
void SnapshotParam::clear_snapshot_interval() {
  snapshot_interval_ = 0;
}
::google::protobuf::int32 SnapshotParam::snapshot_interval() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.snapshot_interval)
  return snapshot_interval_;
}
void SnapshotParam::set_snapshot_interval(::google::protobuf::int32 value) {
  
  snapshot_interval_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.snapshot_interval)
}

// string snapshot_prefix = 2;
void SnapshotParam::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotParam::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SnapshotParam::set_snapshot_prefix(const ::std::string& value) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SnapshotParam.snapshot_prefix)
}
#if LANG_CXX11
void SnapshotParam::set_snapshot_prefix(::std::string&& value) {
  
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SnapshotParam.snapshot_prefix)
}
#endif
void SnapshotParam::set_snapshot_prefix(const char* value) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SnapshotParam.snapshot_prefix)
}
void SnapshotParam::set_snapshot_prefix(const char* value, size_t size) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SnapshotParam.snapshot_prefix)
}
::std::string* SnapshotParam::mutable_snapshot_prefix() {
  
  // @@protoc_insertion_point(field_mutable:SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotParam::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:SnapshotParam.snapshot_prefix)
  
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotParam::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    
  } else {
    
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:SnapshotParam.snapshot_prefix)
}

// int32 per_image_height = 3;
void SnapshotParam::clear_per_image_height() {
  per_image_height_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_height() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.per_image_height)
  return per_image_height_;
}
void SnapshotParam::set_per_image_height(::google::protobuf::int32 value) {
  
  per_image_height_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.per_image_height)
}

// int32 per_image_width = 4;
void SnapshotParam::clear_per_image_width() {
  per_image_width_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_width() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.per_image_width)
  return per_image_width_;
}
void SnapshotParam::set_per_image_width(::google::protobuf::int32 value) {
  
  per_image_width_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.per_image_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableParam::kSnapshotParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableParam::VariableParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VariableParam)
}
VariableParam::VariableParam(const VariableParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot_param()) {
    snapshot_param_ = new ::SnapshotParam(*from.snapshot_param_);
  } else {
    snapshot_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:VariableParam)
}

void VariableParam::SharedCtor() {
  snapshot_param_ = NULL;
  _cached_size_ = 0;
}

VariableParam::~VariableParam() {
  // @@protoc_insertion_point(destructor:VariableParam)
  SharedDtor();
}

void VariableParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete snapshot_param_;
  }
}

void VariableParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[11].descriptor;
}

const VariableParam& VariableParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariableParam* VariableParam::New(::google::protobuf::Arena* arena) const {
  VariableParam* n = new VariableParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VariableParam::Clear() {
// @@protoc_insertion_point(message_clear_start:VariableParam)
  if (GetArenaNoVirtual() == NULL && snapshot_param_ != NULL) {
    delete snapshot_param_;
  }
  snapshot_param_ = NULL;
}

bool VariableParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VariableParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SnapshotParam snapshot_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VariableParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VariableParam)
  return false;
#undef DO_
}

void VariableParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VariableParam)
  // .SnapshotParam snapshot_param = 1;
  if (this->has_snapshot_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->snapshot_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:VariableParam)
}

::google::protobuf::uint8* VariableParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VariableParam)
  // .SnapshotParam snapshot_param = 1;
  if (this->has_snapshot_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->snapshot_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VariableParam)
  return target;
}

size_t VariableParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VariableParam)
  size_t total_size = 0;

  // .SnapshotParam snapshot_param = 1;
  if (this->has_snapshot_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snapshot_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VariableParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VariableParam)
    MergeFrom(*source);
  }
}

void VariableParam::MergeFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot_param()) {
    mutable_snapshot_param()->::SnapshotParam::MergeFrom(from.snapshot_param());
  }
}

void VariableParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableParam::CopyFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableParam::IsInitialized() const {
  return true;
}

void VariableParam::Swap(VariableParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableParam::InternalSwap(VariableParam* other) {
  std::swap(snapshot_param_, other->snapshot_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariableParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariableParam

// .SnapshotParam snapshot_param = 1;
bool VariableParam::has_snapshot_param() const {
  return this != internal_default_instance() && snapshot_param_ != NULL;
}
void VariableParam::clear_snapshot_param() {
  if (GetArenaNoVirtual() == NULL && snapshot_param_ != NULL) delete snapshot_param_;
  snapshot_param_ = NULL;
}
const ::SnapshotParam& VariableParam::snapshot_param() const {
  // @@protoc_insertion_point(field_get:VariableParam.snapshot_param)
  return snapshot_param_ != NULL ? *snapshot_param_
                         : *::SnapshotParam::internal_default_instance();
}
::SnapshotParam* VariableParam::mutable_snapshot_param() {
  
  if (snapshot_param_ == NULL) {
    snapshot_param_ = new ::SnapshotParam;
  }
  // @@protoc_insertion_point(field_mutable:VariableParam.snapshot_param)
  return snapshot_param_;
}
::SnapshotParam* VariableParam::release_snapshot_param() {
  // @@protoc_insertion_point(field_release:VariableParam.snapshot_param)
  
  ::SnapshotParam* temp = snapshot_param_;
  snapshot_param_ = NULL;
  return temp;
}
void VariableParam::set_allocated_snapshot_param(::SnapshotParam* snapshot_param) {
  delete snapshot_param_;
  snapshot_param_ = snapshot_param;
  if (snapshot_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VariableParam.snapshot_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockParam::BlockParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockParam)
}
BlockParam::BlockParam(const BlockParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BlockParam)
}

void BlockParam::SharedCtor() {
  _cached_size_ = 0;
}

BlockParam::~BlockParam() {
  // @@protoc_insertion_point(destructor:BlockParam)
  SharedDtor();
}

void BlockParam::SharedDtor() {
}

void BlockParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[12].descriptor;
}

const BlockParam& BlockParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockParam* BlockParam::New(::google::protobuf::Arena* arena) const {
  BlockParam* n = new BlockParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockParam::Clear() {
// @@protoc_insertion_point(message_clear_start:BlockParam)
}

bool BlockParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:BlockParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockParam)
  return false;
#undef DO_
}

void BlockParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockParam)
  // @@protoc_insertion_point(serialize_end:BlockParam)
}

::google::protobuf::uint8* BlockParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BlockParam)
  // @@protoc_insertion_point(serialize_to_array_end:BlockParam)
  return target;
}

size_t BlockParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BlockParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BlockParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BlockParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BlockParam)
    MergeFrom(*source);
  }
}

void BlockParam::MergeFrom(const BlockParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BlockParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void BlockParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BlockParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockParam::CopyFrom(const BlockParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BlockParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParam::IsInitialized() const {
  return true;
}

void BlockParam::Swap(BlockParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockParam::InternalSwap(BlockParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParam::kSoftmaxLossParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParam::LossParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LossParam)
}
LossParam::LossParam(const LossParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_softmax_loss_param()) {
    softmax_loss_param_ = new ::SoftmaxLossParam(*from.softmax_loss_param_);
  } else {
    softmax_loss_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LossParam)
}

void LossParam::SharedCtor() {
  softmax_loss_param_ = NULL;
  _cached_size_ = 0;
}

LossParam::~LossParam() {
  // @@protoc_insertion_point(destructor:LossParam)
  SharedDtor();
}

void LossParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete softmax_loss_param_;
  }
}

void LossParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[13].descriptor;
}

const LossParam& LossParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParam* LossParam::New(::google::protobuf::Arena* arena) const {
  LossParam* n = new LossParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParam::Clear() {
// @@protoc_insertion_point(message_clear_start:LossParam)
  if (GetArenaNoVirtual() == NULL && softmax_loss_param_ != NULL) {
    delete softmax_loss_param_;
  }
  softmax_loss_param_ = NULL;
}

bool LossParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LossParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SoftmaxLossParam softmax_loss_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LossParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LossParam)
  return false;
#undef DO_
}

void LossParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LossParam)
  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->softmax_loss_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:LossParam)
}

::google::protobuf::uint8* LossParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LossParam)
  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->softmax_loss_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LossParam)
  return target;
}

size_t LossParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LossParam)
  size_t total_size = 0;

  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_loss_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LossParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LossParam)
    MergeFrom(*source);
  }
}

void LossParam::MergeFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_softmax_loss_param()) {
    mutable_softmax_loss_param()->::SoftmaxLossParam::MergeFrom(from.softmax_loss_param());
  }
}

void LossParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParam::CopyFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParam::IsInitialized() const {
  return true;
}

void LossParam::Swap(LossParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParam::InternalSwap(LossParam* other) {
  std::swap(softmax_loss_param_, other->softmax_loss_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParam

// .SoftmaxLossParam softmax_loss_param = 1;
bool LossParam::has_softmax_loss_param() const {
  return this != internal_default_instance() && softmax_loss_param_ != NULL;
}
void LossParam::clear_softmax_loss_param() {
  if (GetArenaNoVirtual() == NULL && softmax_loss_param_ != NULL) delete softmax_loss_param_;
  softmax_loss_param_ = NULL;
}
const ::SoftmaxLossParam& LossParam::softmax_loss_param() const {
  // @@protoc_insertion_point(field_get:LossParam.softmax_loss_param)
  return softmax_loss_param_ != NULL ? *softmax_loss_param_
                         : *::SoftmaxLossParam::internal_default_instance();
}
::SoftmaxLossParam* LossParam::mutable_softmax_loss_param() {
  
  if (softmax_loss_param_ == NULL) {
    softmax_loss_param_ = new ::SoftmaxLossParam;
  }
  // @@protoc_insertion_point(field_mutable:LossParam.softmax_loss_param)
  return softmax_loss_param_;
}
::SoftmaxLossParam* LossParam::release_softmax_loss_param() {
  // @@protoc_insertion_point(field_release:LossParam.softmax_loss_param)
  
  ::SoftmaxLossParam* temp = softmax_loss_param_;
  softmax_loss_param_ = NULL;
  return temp;
}
void LossParam::set_allocated_softmax_loss_param(::SoftmaxLossParam* softmax_loss_param) {
  delete softmax_loss_param_;
  softmax_loss_param_ = softmax_loss_param;
  if (softmax_loss_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LossParam.softmax_loss_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MnistReaderParam::kFolderPathFieldNumber;
const int MnistReaderParam::kBatchSizeFieldNumber;
const int MnistReaderParam::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MnistReaderParam::MnistReaderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MnistReaderParam)
}
MnistReaderParam::MnistReaderParam(const MnistReaderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_path().size() > 0) {
    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MnistReaderParam)
}

void MnistReaderParam::SharedCtor() {
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
  _cached_size_ = 0;
}

MnistReaderParam::~MnistReaderParam() {
  // @@protoc_insertion_point(destructor:MnistReaderParam)
  SharedDtor();
}

void MnistReaderParam::SharedDtor() {
  folder_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MnistReaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MnistReaderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[14].descriptor;
}

const MnistReaderParam& MnistReaderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MnistReaderParam* MnistReaderParam::New(::google::protobuf::Arena* arena) const {
  MnistReaderParam* n = new MnistReaderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MnistReaderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:MnistReaderParam)
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
}

bool MnistReaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MnistReaderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string folder_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_path().data(), this->folder_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MnistReaderParam.folder_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batch_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MnistReaderParam.ReaderType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MnistReaderParam_ReaderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MnistReaderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MnistReaderParam)
  return false;
#undef DO_
}

void MnistReaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MnistReaderParam)
  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MnistReaderParam.folder_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->folder_path(), output);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch_size(), output);
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:MnistReaderParam)
}

::google::protobuf::uint8* MnistReaderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MnistReaderParam)
  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MnistReaderParam.folder_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->folder_path(), target);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch_size(), target);
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MnistReaderParam)
  return target;
}

size_t MnistReaderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MnistReaderParam)
  size_t total_size = 0;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_path());
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MnistReaderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MnistReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MnistReaderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MnistReaderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MnistReaderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MnistReaderParam)
    MergeFrom(*source);
  }
}

void MnistReaderParam::MergeFrom(const MnistReaderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MnistReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.folder_path().size() > 0) {

    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MnistReaderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MnistReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MnistReaderParam::CopyFrom(const MnistReaderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MnistReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MnistReaderParam::IsInitialized() const {
  return true;
}

void MnistReaderParam::Swap(MnistReaderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MnistReaderParam::InternalSwap(MnistReaderParam* other) {
  folder_path_.Swap(&other->folder_path_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MnistReaderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MnistReaderParam

// string folder_path = 1;
void MnistReaderParam::clear_folder_path() {
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MnistReaderParam::folder_path() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.folder_path)
  return folder_path_.GetNoArena();
}
void MnistReaderParam::set_folder_path(const ::std::string& value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MnistReaderParam.folder_path)
}
#if LANG_CXX11
void MnistReaderParam::set_folder_path(::std::string&& value) {
  
  folder_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MnistReaderParam.folder_path)
}
#endif
void MnistReaderParam::set_folder_path(const char* value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MnistReaderParam.folder_path)
}
void MnistReaderParam::set_folder_path(const char* value, size_t size) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MnistReaderParam.folder_path)
}
::std::string* MnistReaderParam::mutable_folder_path() {
  
  // @@protoc_insertion_point(field_mutable:MnistReaderParam.folder_path)
  return folder_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MnistReaderParam::release_folder_path() {
  // @@protoc_insertion_point(field_release:MnistReaderParam.folder_path)
  
  return folder_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MnistReaderParam::set_allocated_folder_path(::std::string* folder_path) {
  if (folder_path != NULL) {
    
  } else {
    
  }
  folder_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_path);
  // @@protoc_insertion_point(field_set_allocated:MnistReaderParam.folder_path)
}

// int32 batch_size = 2;
void MnistReaderParam::clear_batch_size() {
  batch_size_ = 0;
}
::google::protobuf::int32 MnistReaderParam::batch_size() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.batch_size)
  return batch_size_;
}
void MnistReaderParam::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:MnistReaderParam.batch_size)
}

// .MnistReaderParam.ReaderType type = 3;
void MnistReaderParam::clear_type() {
  type_ = 0;
}
::MnistReaderParam_ReaderType MnistReaderParam::type() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.type)
  return static_cast< ::MnistReaderParam_ReaderType >(type_);
}
void MnistReaderParam::set_type(::MnistReaderParam_ReaderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MnistReaderParam.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeParam::kNameFieldNumber;
const int NodeParam::kTensorParamFieldNumber;
const int NodeParam::kMnistReaderParamFieldNumber;
const int NodeParam::kVariableParamFieldNumber;
const int NodeParam::kBlockParamFieldNumber;
const int NodeParam::kLossParamFieldNumber;
const int NodeParam::kOpAddParamFieldNumber;
const int NodeParam::kOpBiasAddParamFieldNumber;
const int NodeParam::kOpConv2DParamFieldNumber;
const int NodeParam::kOpDropoutParamFieldNumber;
const int NodeParam::kOpReluParamFieldNumber;
const int NodeParam::kOpSoftmaxParamFieldNumber;
const int NodeParam::kOpSquareParamFieldNumber;
const int NodeParam::kOpMatmulParamFieldNumber;
const int NodeParam::kOpPoolingParamFieldNumber;
const int NodeParam::kOpArgmaxParamFieldNumber;
const int NodeParam::kOpReduceParamFieldNumber;
const int NodeParam::kOpEqualParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeParam::NodeParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeParam)
}
NodeParam::NodeParam(const NodeParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_param()) {
    tensor_param_ = new ::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  if (from.has_mnist_reader_param()) {
    mnist_reader_param_ = new ::MnistReaderParam(*from.mnist_reader_param_);
  } else {
    mnist_reader_param_ = NULL;
  }
  if (from.has_variable_param()) {
    variable_param_ = new ::VariableParam(*from.variable_param_);
  } else {
    variable_param_ = NULL;
  }
  if (from.has_block_param()) {
    block_param_ = new ::BlockParam(*from.block_param_);
  } else {
    block_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::LossParam(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_op_add_param()) {
    op_add_param_ = new ::OpAddParam(*from.op_add_param_);
  } else {
    op_add_param_ = NULL;
  }
  if (from.has_op_bias_add_param()) {
    op_bias_add_param_ = new ::OpBiasAddParam(*from.op_bias_add_param_);
  } else {
    op_bias_add_param_ = NULL;
  }
  if (from.has_op_conv_2d_param()) {
    op_conv_2d_param_ = new ::OpConv2dParam(*from.op_conv_2d_param_);
  } else {
    op_conv_2d_param_ = NULL;
  }
  if (from.has_op_dropout_param()) {
    op_dropout_param_ = new ::OpDropoutParam(*from.op_dropout_param_);
  } else {
    op_dropout_param_ = NULL;
  }
  if (from.has_op_relu_param()) {
    op_relu_param_ = new ::OpReluParam(*from.op_relu_param_);
  } else {
    op_relu_param_ = NULL;
  }
  if (from.has_op_softmax_param()) {
    op_softmax_param_ = new ::OpSoftmaxParam(*from.op_softmax_param_);
  } else {
    op_softmax_param_ = NULL;
  }
  if (from.has_op_square_param()) {
    op_square_param_ = new ::OpSquareParam(*from.op_square_param_);
  } else {
    op_square_param_ = NULL;
  }
  if (from.has_op_matmul_param()) {
    op_matmul_param_ = new ::OpMatMulParam(*from.op_matmul_param_);
  } else {
    op_matmul_param_ = NULL;
  }
  if (from.has_op_pooling_param()) {
    op_pooling_param_ = new ::OpPoolingParam(*from.op_pooling_param_);
  } else {
    op_pooling_param_ = NULL;
  }
  if (from.has_op_argmax_param()) {
    op_argmax_param_ = new ::OpArgmaxParam(*from.op_argmax_param_);
  } else {
    op_argmax_param_ = NULL;
  }
  if (from.has_op_reduce_param()) {
    op_reduce_param_ = new ::OpReduceParam(*from.op_reduce_param_);
  } else {
    op_reduce_param_ = NULL;
  }
  if (from.has_op_equal_param()) {
    op_equal_param_ = new ::OpEqualParam(*from.op_equal_param_);
  } else {
    op_equal_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NodeParam)
}

void NodeParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&op_equal_param_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(op_equal_param_));
  _cached_size_ = 0;
}

NodeParam::~NodeParam() {
  // @@protoc_insertion_point(destructor:NodeParam)
  SharedDtor();
}

void NodeParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
  if (this != internal_default_instance()) {
    delete mnist_reader_param_;
  }
  if (this != internal_default_instance()) {
    delete variable_param_;
  }
  if (this != internal_default_instance()) {
    delete block_param_;
  }
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
  if (this != internal_default_instance()) {
    delete op_add_param_;
  }
  if (this != internal_default_instance()) {
    delete op_bias_add_param_;
  }
  if (this != internal_default_instance()) {
    delete op_conv_2d_param_;
  }
  if (this != internal_default_instance()) {
    delete op_dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete op_relu_param_;
  }
  if (this != internal_default_instance()) {
    delete op_softmax_param_;
  }
  if (this != internal_default_instance()) {
    delete op_square_param_;
  }
  if (this != internal_default_instance()) {
    delete op_matmul_param_;
  }
  if (this != internal_default_instance()) {
    delete op_pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete op_argmax_param_;
  }
  if (this != internal_default_instance()) {
    delete op_reduce_param_;
  }
  if (this != internal_default_instance()) {
    delete op_equal_param_;
  }
}

void NodeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[15].descriptor;
}

const NodeParam& NodeParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeParam* NodeParam::New(::google::protobuf::Arena* arena) const {
  NodeParam* n = new NodeParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeParam)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && mnist_reader_param_ != NULL) {
    delete mnist_reader_param_;
  }
  mnist_reader_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) {
    delete variable_param_;
  }
  variable_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && block_param_ != NULL) {
    delete block_param_;
  }
  block_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) {
    delete loss_param_;
  }
  loss_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_add_param_ != NULL) {
    delete op_add_param_;
  }
  op_add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_bias_add_param_ != NULL) {
    delete op_bias_add_param_;
  }
  op_bias_add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_conv_2d_param_ != NULL) {
    delete op_conv_2d_param_;
  }
  op_conv_2d_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_dropout_param_ != NULL) {
    delete op_dropout_param_;
  }
  op_dropout_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_relu_param_ != NULL) {
    delete op_relu_param_;
  }
  op_relu_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_softmax_param_ != NULL) {
    delete op_softmax_param_;
  }
  op_softmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_square_param_ != NULL) {
    delete op_square_param_;
  }
  op_square_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_matmul_param_ != NULL) {
    delete op_matmul_param_;
  }
  op_matmul_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_pooling_param_ != NULL) {
    delete op_pooling_param_;
  }
  op_pooling_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_argmax_param_ != NULL) {
    delete op_argmax_param_;
  }
  op_argmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_reduce_param_ != NULL) {
    delete op_reduce_param_;
  }
  op_reduce_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_equal_param_ != NULL) {
    delete op_equal_param_;
  }
  op_equal_param_ = NULL;
}

bool NodeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NodeParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TensorParam tensor_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MnistReaderParam mnist_reader_param = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mnist_reader_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VariableParam variable_param = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BlockParam block_param = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LossParam loss_param = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpAddParam op_add_param = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpBiasAddParam op_bias_add_param = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(490u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_bias_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpConv2dParam op_conv_2d_param = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(498u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_conv_2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpDropoutParam op_dropout_param = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(506u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpReluParam op_relu_param = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(514u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpSoftmaxParam op_softmax_param = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(522u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpSquareParam op_square_param = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(530u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_square_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpMatMulParam op_matmul_param = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(538u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_matmul_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpPoolingParam op_pooling_param = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(546u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpArgmaxParam op_argmax_param = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(554u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_argmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpReduceParam op_reduce_param = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(562u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_reduce_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OpEqualParam op_equal_param = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(570u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_equal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeParam)
  return false;
#undef DO_
}

void NodeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .TensorParam tensor_param = 10;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->tensor_param_, output);
  }

  // .MnistReaderParam mnist_reader_param = 20;
  if (this->has_mnist_reader_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->mnist_reader_param_, output);
  }

  // .VariableParam variable_param = 30;
  if (this->has_variable_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->variable_param_, output);
  }

  // .BlockParam block_param = 40;
  if (this->has_block_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->block_param_, output);
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->loss_param_, output);
  }

  // .OpAddParam op_add_param = 60;
  if (this->has_op_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, *this->op_add_param_, output);
  }

  // .OpBiasAddParam op_bias_add_param = 61;
  if (this->has_op_bias_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, *this->op_bias_add_param_, output);
  }

  // .OpConv2dParam op_conv_2d_param = 62;
  if (this->has_op_conv_2d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, *this->op_conv_2d_param_, output);
  }

  // .OpDropoutParam op_dropout_param = 63;
  if (this->has_op_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->op_dropout_param_, output);
  }

  // .OpReluParam op_relu_param = 64;
  if (this->has_op_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *this->op_relu_param_, output);
  }

  // .OpSoftmaxParam op_softmax_param = 65;
  if (this->has_op_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, *this->op_softmax_param_, output);
  }

  // .OpSquareParam op_square_param = 66;
  if (this->has_op_square_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, *this->op_square_param_, output);
  }

  // .OpMatMulParam op_matmul_param = 67;
  if (this->has_op_matmul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, *this->op_matmul_param_, output);
  }

  // .OpPoolingParam op_pooling_param = 68;
  if (this->has_op_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, *this->op_pooling_param_, output);
  }

  // .OpArgmaxParam op_argmax_param = 69;
  if (this->has_op_argmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, *this->op_argmax_param_, output);
  }

  // .OpReduceParam op_reduce_param = 70;
  if (this->has_op_reduce_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, *this->op_reduce_param_, output);
  }

  // .OpEqualParam op_equal_param = 71;
  if (this->has_op_equal_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, *this->op_equal_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:NodeParam)
}

::google::protobuf::uint8* NodeParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NodeParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .TensorParam tensor_param = 10;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->tensor_param_, false, target);
  }

  // .MnistReaderParam mnist_reader_param = 20;
  if (this->has_mnist_reader_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->mnist_reader_param_, false, target);
  }

  // .VariableParam variable_param = 30;
  if (this->has_variable_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->variable_param_, false, target);
  }

  // .BlockParam block_param = 40;
  if (this->has_block_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->block_param_, false, target);
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->loss_param_, false, target);
  }

  // .OpAddParam op_add_param = 60;
  if (this->has_op_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        60, *this->op_add_param_, false, target);
  }

  // .OpBiasAddParam op_bias_add_param = 61;
  if (this->has_op_bias_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, *this->op_bias_add_param_, false, target);
  }

  // .OpConv2dParam op_conv_2d_param = 62;
  if (this->has_op_conv_2d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, *this->op_conv_2d_param_, false, target);
  }

  // .OpDropoutParam op_dropout_param = 63;
  if (this->has_op_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, *this->op_dropout_param_, false, target);
  }

  // .OpReluParam op_relu_param = 64;
  if (this->has_op_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, *this->op_relu_param_, false, target);
  }

  // .OpSoftmaxParam op_softmax_param = 65;
  if (this->has_op_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        65, *this->op_softmax_param_, false, target);
  }

  // .OpSquareParam op_square_param = 66;
  if (this->has_op_square_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        66, *this->op_square_param_, false, target);
  }

  // .OpMatMulParam op_matmul_param = 67;
  if (this->has_op_matmul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        67, *this->op_matmul_param_, false, target);
  }

  // .OpPoolingParam op_pooling_param = 68;
  if (this->has_op_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        68, *this->op_pooling_param_, false, target);
  }

  // .OpArgmaxParam op_argmax_param = 69;
  if (this->has_op_argmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        69, *this->op_argmax_param_, false, target);
  }

  // .OpReduceParam op_reduce_param = 70;
  if (this->has_op_reduce_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        70, *this->op_reduce_param_, false, target);
  }

  // .OpEqualParam op_equal_param = 71;
  if (this->has_op_equal_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        71, *this->op_equal_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NodeParam)
  return target;
}

size_t NodeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeParam)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .TensorParam tensor_param = 10;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // .MnistReaderParam mnist_reader_param = 20;
  if (this->has_mnist_reader_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mnist_reader_param_);
  }

  // .VariableParam variable_param = 30;
  if (this->has_variable_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variable_param_);
  }

  // .BlockParam block_param = 40;
  if (this->has_block_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_param_);
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loss_param_);
  }

  // .OpAddParam op_add_param = 60;
  if (this->has_op_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_add_param_);
  }

  // .OpBiasAddParam op_bias_add_param = 61;
  if (this->has_op_bias_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_bias_add_param_);
  }

  // .OpConv2dParam op_conv_2d_param = 62;
  if (this->has_op_conv_2d_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_conv_2d_param_);
  }

  // .OpDropoutParam op_dropout_param = 63;
  if (this->has_op_dropout_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_dropout_param_);
  }

  // .OpReluParam op_relu_param = 64;
  if (this->has_op_relu_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_relu_param_);
  }

  // .OpSoftmaxParam op_softmax_param = 65;
  if (this->has_op_softmax_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_softmax_param_);
  }

  // .OpSquareParam op_square_param = 66;
  if (this->has_op_square_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_square_param_);
  }

  // .OpMatMulParam op_matmul_param = 67;
  if (this->has_op_matmul_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_matmul_param_);
  }

  // .OpPoolingParam op_pooling_param = 68;
  if (this->has_op_pooling_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_pooling_param_);
  }

  // .OpArgmaxParam op_argmax_param = 69;
  if (this->has_op_argmax_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_argmax_param_);
  }

  // .OpReduceParam op_reduce_param = 70;
  if (this->has_op_reduce_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_reduce_param_);
  }

  // .OpEqualParam op_equal_param = 71;
  if (this->has_op_equal_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_equal_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeParam)
    MergeFrom(*source);
  }
}

void NodeParam::MergeFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.has_mnist_reader_param()) {
    mutable_mnist_reader_param()->::MnistReaderParam::MergeFrom(from.mnist_reader_param());
  }
  if (from.has_variable_param()) {
    mutable_variable_param()->::VariableParam::MergeFrom(from.variable_param());
  }
  if (from.has_block_param()) {
    mutable_block_param()->::BlockParam::MergeFrom(from.block_param());
  }
  if (from.has_loss_param()) {
    mutable_loss_param()->::LossParam::MergeFrom(from.loss_param());
  }
  if (from.has_op_add_param()) {
    mutable_op_add_param()->::OpAddParam::MergeFrom(from.op_add_param());
  }
  if (from.has_op_bias_add_param()) {
    mutable_op_bias_add_param()->::OpBiasAddParam::MergeFrom(from.op_bias_add_param());
  }
  if (from.has_op_conv_2d_param()) {
    mutable_op_conv_2d_param()->::OpConv2dParam::MergeFrom(from.op_conv_2d_param());
  }
  if (from.has_op_dropout_param()) {
    mutable_op_dropout_param()->::OpDropoutParam::MergeFrom(from.op_dropout_param());
  }
  if (from.has_op_relu_param()) {
    mutable_op_relu_param()->::OpReluParam::MergeFrom(from.op_relu_param());
  }
  if (from.has_op_softmax_param()) {
    mutable_op_softmax_param()->::OpSoftmaxParam::MergeFrom(from.op_softmax_param());
  }
  if (from.has_op_square_param()) {
    mutable_op_square_param()->::OpSquareParam::MergeFrom(from.op_square_param());
  }
  if (from.has_op_matmul_param()) {
    mutable_op_matmul_param()->::OpMatMulParam::MergeFrom(from.op_matmul_param());
  }
  if (from.has_op_pooling_param()) {
    mutable_op_pooling_param()->::OpPoolingParam::MergeFrom(from.op_pooling_param());
  }
  if (from.has_op_argmax_param()) {
    mutable_op_argmax_param()->::OpArgmaxParam::MergeFrom(from.op_argmax_param());
  }
  if (from.has_op_reduce_param()) {
    mutable_op_reduce_param()->::OpReduceParam::MergeFrom(from.op_reduce_param());
  }
  if (from.has_op_equal_param()) {
    mutable_op_equal_param()->::OpEqualParam::MergeFrom(from.op_equal_param());
  }
}

void NodeParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeParam::CopyFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeParam::IsInitialized() const {
  return true;
}

void NodeParam::Swap(NodeParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeParam::InternalSwap(NodeParam* other) {
  name_.Swap(&other->name_);
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(mnist_reader_param_, other->mnist_reader_param_);
  std::swap(variable_param_, other->variable_param_);
  std::swap(block_param_, other->block_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(op_add_param_, other->op_add_param_);
  std::swap(op_bias_add_param_, other->op_bias_add_param_);
  std::swap(op_conv_2d_param_, other->op_conv_2d_param_);
  std::swap(op_dropout_param_, other->op_dropout_param_);
  std::swap(op_relu_param_, other->op_relu_param_);
  std::swap(op_softmax_param_, other->op_softmax_param_);
  std::swap(op_square_param_, other->op_square_param_);
  std::swap(op_matmul_param_, other->op_matmul_param_);
  std::swap(op_pooling_param_, other->op_pooling_param_);
  std::swap(op_argmax_param_, other->op_argmax_param_);
  std::swap(op_reduce_param_, other->op_reduce_param_);
  std::swap(op_equal_param_, other->op_equal_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeParam

// string name = 1;
void NodeParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeParam::name() const {
  // @@protoc_insertion_point(field_get:NodeParam.name)
  return name_.GetNoArena();
}
void NodeParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeParam.name)
}
#if LANG_CXX11
void NodeParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeParam.name)
}
#endif
void NodeParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeParam.name)
}
void NodeParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeParam.name)
}
::std::string* NodeParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NodeParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeParam::release_name() {
  // @@protoc_insertion_point(field_release:NodeParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NodeParam.name)
}

// .TensorParam tensor_param = 10;
bool NodeParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void NodeParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::TensorParam& NodeParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::TensorParam::internal_default_instance();
}
::TensorParam* NodeParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.tensor_param)
  return tensor_param_;
}
::TensorParam* NodeParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:NodeParam.tensor_param)
  
  ::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_tensor_param(::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.tensor_param)
}

// .MnistReaderParam mnist_reader_param = 20;
bool NodeParam::has_mnist_reader_param() const {
  return this != internal_default_instance() && mnist_reader_param_ != NULL;
}
void NodeParam::clear_mnist_reader_param() {
  if (GetArenaNoVirtual() == NULL && mnist_reader_param_ != NULL) delete mnist_reader_param_;
  mnist_reader_param_ = NULL;
}
const ::MnistReaderParam& NodeParam::mnist_reader_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.mnist_reader_param)
  return mnist_reader_param_ != NULL ? *mnist_reader_param_
                         : *::MnistReaderParam::internal_default_instance();
}
::MnistReaderParam* NodeParam::mutable_mnist_reader_param() {
  
  if (mnist_reader_param_ == NULL) {
    mnist_reader_param_ = new ::MnistReaderParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.mnist_reader_param)
  return mnist_reader_param_;
}
::MnistReaderParam* NodeParam::release_mnist_reader_param() {
  // @@protoc_insertion_point(field_release:NodeParam.mnist_reader_param)
  
  ::MnistReaderParam* temp = mnist_reader_param_;
  mnist_reader_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_mnist_reader_param(::MnistReaderParam* mnist_reader_param) {
  delete mnist_reader_param_;
  mnist_reader_param_ = mnist_reader_param;
  if (mnist_reader_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.mnist_reader_param)
}

// .VariableParam variable_param = 30;
bool NodeParam::has_variable_param() const {
  return this != internal_default_instance() && variable_param_ != NULL;
}
void NodeParam::clear_variable_param() {
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) delete variable_param_;
  variable_param_ = NULL;
}
const ::VariableParam& NodeParam::variable_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.variable_param)
  return variable_param_ != NULL ? *variable_param_
                         : *::VariableParam::internal_default_instance();
}
::VariableParam* NodeParam::mutable_variable_param() {
  
  if (variable_param_ == NULL) {
    variable_param_ = new ::VariableParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.variable_param)
  return variable_param_;
}
::VariableParam* NodeParam::release_variable_param() {
  // @@protoc_insertion_point(field_release:NodeParam.variable_param)
  
  ::VariableParam* temp = variable_param_;
  variable_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_variable_param(::VariableParam* variable_param) {
  delete variable_param_;
  variable_param_ = variable_param;
  if (variable_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.variable_param)
}

// .BlockParam block_param = 40;
bool NodeParam::has_block_param() const {
  return this != internal_default_instance() && block_param_ != NULL;
}
void NodeParam::clear_block_param() {
  if (GetArenaNoVirtual() == NULL && block_param_ != NULL) delete block_param_;
  block_param_ = NULL;
}
const ::BlockParam& NodeParam::block_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.block_param)
  return block_param_ != NULL ? *block_param_
                         : *::BlockParam::internal_default_instance();
}
::BlockParam* NodeParam::mutable_block_param() {
  
  if (block_param_ == NULL) {
    block_param_ = new ::BlockParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.block_param)
  return block_param_;
}
::BlockParam* NodeParam::release_block_param() {
  // @@protoc_insertion_point(field_release:NodeParam.block_param)
  
  ::BlockParam* temp = block_param_;
  block_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_block_param(::BlockParam* block_param) {
  delete block_param_;
  block_param_ = block_param;
  if (block_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.block_param)
}

// .LossParam loss_param = 50;
bool NodeParam::has_loss_param() const {
  return this != internal_default_instance() && loss_param_ != NULL;
}
void NodeParam::clear_loss_param() {
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) delete loss_param_;
  loss_param_ = NULL;
}
const ::LossParam& NodeParam::loss_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::LossParam::internal_default_instance();
}
::LossParam* NodeParam::mutable_loss_param() {
  
  if (loss_param_ == NULL) {
    loss_param_ = new ::LossParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.loss_param)
  return loss_param_;
}
::LossParam* NodeParam::release_loss_param() {
  // @@protoc_insertion_point(field_release:NodeParam.loss_param)
  
  ::LossParam* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_loss_param(::LossParam* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.loss_param)
}

// .OpAddParam op_add_param = 60;
bool NodeParam::has_op_add_param() const {
  return this != internal_default_instance() && op_add_param_ != NULL;
}
void NodeParam::clear_op_add_param() {
  if (GetArenaNoVirtual() == NULL && op_add_param_ != NULL) delete op_add_param_;
  op_add_param_ = NULL;
}
const ::OpAddParam& NodeParam::op_add_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_add_param)
  return op_add_param_ != NULL ? *op_add_param_
                         : *::OpAddParam::internal_default_instance();
}
::OpAddParam* NodeParam::mutable_op_add_param() {
  
  if (op_add_param_ == NULL) {
    op_add_param_ = new ::OpAddParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_add_param)
  return op_add_param_;
}
::OpAddParam* NodeParam::release_op_add_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_add_param)
  
  ::OpAddParam* temp = op_add_param_;
  op_add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_add_param(::OpAddParam* op_add_param) {
  delete op_add_param_;
  op_add_param_ = op_add_param;
  if (op_add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_add_param)
}

// .OpBiasAddParam op_bias_add_param = 61;
bool NodeParam::has_op_bias_add_param() const {
  return this != internal_default_instance() && op_bias_add_param_ != NULL;
}
void NodeParam::clear_op_bias_add_param() {
  if (GetArenaNoVirtual() == NULL && op_bias_add_param_ != NULL) delete op_bias_add_param_;
  op_bias_add_param_ = NULL;
}
const ::OpBiasAddParam& NodeParam::op_bias_add_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_bias_add_param)
  return op_bias_add_param_ != NULL ? *op_bias_add_param_
                         : *::OpBiasAddParam::internal_default_instance();
}
::OpBiasAddParam* NodeParam::mutable_op_bias_add_param() {
  
  if (op_bias_add_param_ == NULL) {
    op_bias_add_param_ = new ::OpBiasAddParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_bias_add_param)
  return op_bias_add_param_;
}
::OpBiasAddParam* NodeParam::release_op_bias_add_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_bias_add_param)
  
  ::OpBiasAddParam* temp = op_bias_add_param_;
  op_bias_add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_bias_add_param(::OpBiasAddParam* op_bias_add_param) {
  delete op_bias_add_param_;
  op_bias_add_param_ = op_bias_add_param;
  if (op_bias_add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_bias_add_param)
}

// .OpConv2dParam op_conv_2d_param = 62;
bool NodeParam::has_op_conv_2d_param() const {
  return this != internal_default_instance() && op_conv_2d_param_ != NULL;
}
void NodeParam::clear_op_conv_2d_param() {
  if (GetArenaNoVirtual() == NULL && op_conv_2d_param_ != NULL) delete op_conv_2d_param_;
  op_conv_2d_param_ = NULL;
}
const ::OpConv2dParam& NodeParam::op_conv_2d_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_conv_2d_param)
  return op_conv_2d_param_ != NULL ? *op_conv_2d_param_
                         : *::OpConv2dParam::internal_default_instance();
}
::OpConv2dParam* NodeParam::mutable_op_conv_2d_param() {
  
  if (op_conv_2d_param_ == NULL) {
    op_conv_2d_param_ = new ::OpConv2dParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_conv_2d_param)
  return op_conv_2d_param_;
}
::OpConv2dParam* NodeParam::release_op_conv_2d_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_conv_2d_param)
  
  ::OpConv2dParam* temp = op_conv_2d_param_;
  op_conv_2d_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_conv_2d_param(::OpConv2dParam* op_conv_2d_param) {
  delete op_conv_2d_param_;
  op_conv_2d_param_ = op_conv_2d_param;
  if (op_conv_2d_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_conv_2d_param)
}

// .OpDropoutParam op_dropout_param = 63;
bool NodeParam::has_op_dropout_param() const {
  return this != internal_default_instance() && op_dropout_param_ != NULL;
}
void NodeParam::clear_op_dropout_param() {
  if (GetArenaNoVirtual() == NULL && op_dropout_param_ != NULL) delete op_dropout_param_;
  op_dropout_param_ = NULL;
}
const ::OpDropoutParam& NodeParam::op_dropout_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_dropout_param)
  return op_dropout_param_ != NULL ? *op_dropout_param_
                         : *::OpDropoutParam::internal_default_instance();
}
::OpDropoutParam* NodeParam::mutable_op_dropout_param() {
  
  if (op_dropout_param_ == NULL) {
    op_dropout_param_ = new ::OpDropoutParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_dropout_param)
  return op_dropout_param_;
}
::OpDropoutParam* NodeParam::release_op_dropout_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_dropout_param)
  
  ::OpDropoutParam* temp = op_dropout_param_;
  op_dropout_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_dropout_param(::OpDropoutParam* op_dropout_param) {
  delete op_dropout_param_;
  op_dropout_param_ = op_dropout_param;
  if (op_dropout_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_dropout_param)
}

// .OpReluParam op_relu_param = 64;
bool NodeParam::has_op_relu_param() const {
  return this != internal_default_instance() && op_relu_param_ != NULL;
}
void NodeParam::clear_op_relu_param() {
  if (GetArenaNoVirtual() == NULL && op_relu_param_ != NULL) delete op_relu_param_;
  op_relu_param_ = NULL;
}
const ::OpReluParam& NodeParam::op_relu_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_relu_param)
  return op_relu_param_ != NULL ? *op_relu_param_
                         : *::OpReluParam::internal_default_instance();
}
::OpReluParam* NodeParam::mutable_op_relu_param() {
  
  if (op_relu_param_ == NULL) {
    op_relu_param_ = new ::OpReluParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_relu_param)
  return op_relu_param_;
}
::OpReluParam* NodeParam::release_op_relu_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_relu_param)
  
  ::OpReluParam* temp = op_relu_param_;
  op_relu_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_relu_param(::OpReluParam* op_relu_param) {
  delete op_relu_param_;
  op_relu_param_ = op_relu_param;
  if (op_relu_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_relu_param)
}

// .OpSoftmaxParam op_softmax_param = 65;
bool NodeParam::has_op_softmax_param() const {
  return this != internal_default_instance() && op_softmax_param_ != NULL;
}
void NodeParam::clear_op_softmax_param() {
  if (GetArenaNoVirtual() == NULL && op_softmax_param_ != NULL) delete op_softmax_param_;
  op_softmax_param_ = NULL;
}
const ::OpSoftmaxParam& NodeParam::op_softmax_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_softmax_param)
  return op_softmax_param_ != NULL ? *op_softmax_param_
                         : *::OpSoftmaxParam::internal_default_instance();
}
::OpSoftmaxParam* NodeParam::mutable_op_softmax_param() {
  
  if (op_softmax_param_ == NULL) {
    op_softmax_param_ = new ::OpSoftmaxParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_softmax_param)
  return op_softmax_param_;
}
::OpSoftmaxParam* NodeParam::release_op_softmax_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_softmax_param)
  
  ::OpSoftmaxParam* temp = op_softmax_param_;
  op_softmax_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_softmax_param(::OpSoftmaxParam* op_softmax_param) {
  delete op_softmax_param_;
  op_softmax_param_ = op_softmax_param;
  if (op_softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_softmax_param)
}

// .OpSquareParam op_square_param = 66;
bool NodeParam::has_op_square_param() const {
  return this != internal_default_instance() && op_square_param_ != NULL;
}
void NodeParam::clear_op_square_param() {
  if (GetArenaNoVirtual() == NULL && op_square_param_ != NULL) delete op_square_param_;
  op_square_param_ = NULL;
}
const ::OpSquareParam& NodeParam::op_square_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_square_param)
  return op_square_param_ != NULL ? *op_square_param_
                         : *::OpSquareParam::internal_default_instance();
}
::OpSquareParam* NodeParam::mutable_op_square_param() {
  
  if (op_square_param_ == NULL) {
    op_square_param_ = new ::OpSquareParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_square_param)
  return op_square_param_;
}
::OpSquareParam* NodeParam::release_op_square_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_square_param)
  
  ::OpSquareParam* temp = op_square_param_;
  op_square_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_square_param(::OpSquareParam* op_square_param) {
  delete op_square_param_;
  op_square_param_ = op_square_param;
  if (op_square_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_square_param)
}

// .OpMatMulParam op_matmul_param = 67;
bool NodeParam::has_op_matmul_param() const {
  return this != internal_default_instance() && op_matmul_param_ != NULL;
}
void NodeParam::clear_op_matmul_param() {
  if (GetArenaNoVirtual() == NULL && op_matmul_param_ != NULL) delete op_matmul_param_;
  op_matmul_param_ = NULL;
}
const ::OpMatMulParam& NodeParam::op_matmul_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_matmul_param)
  return op_matmul_param_ != NULL ? *op_matmul_param_
                         : *::OpMatMulParam::internal_default_instance();
}
::OpMatMulParam* NodeParam::mutable_op_matmul_param() {
  
  if (op_matmul_param_ == NULL) {
    op_matmul_param_ = new ::OpMatMulParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_matmul_param)
  return op_matmul_param_;
}
::OpMatMulParam* NodeParam::release_op_matmul_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_matmul_param)
  
  ::OpMatMulParam* temp = op_matmul_param_;
  op_matmul_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_matmul_param(::OpMatMulParam* op_matmul_param) {
  delete op_matmul_param_;
  op_matmul_param_ = op_matmul_param;
  if (op_matmul_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_matmul_param)
}

// .OpPoolingParam op_pooling_param = 68;
bool NodeParam::has_op_pooling_param() const {
  return this != internal_default_instance() && op_pooling_param_ != NULL;
}
void NodeParam::clear_op_pooling_param() {
  if (GetArenaNoVirtual() == NULL && op_pooling_param_ != NULL) delete op_pooling_param_;
  op_pooling_param_ = NULL;
}
const ::OpPoolingParam& NodeParam::op_pooling_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_pooling_param)
  return op_pooling_param_ != NULL ? *op_pooling_param_
                         : *::OpPoolingParam::internal_default_instance();
}
::OpPoolingParam* NodeParam::mutable_op_pooling_param() {
  
  if (op_pooling_param_ == NULL) {
    op_pooling_param_ = new ::OpPoolingParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_pooling_param)
  return op_pooling_param_;
}
::OpPoolingParam* NodeParam::release_op_pooling_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_pooling_param)
  
  ::OpPoolingParam* temp = op_pooling_param_;
  op_pooling_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_pooling_param(::OpPoolingParam* op_pooling_param) {
  delete op_pooling_param_;
  op_pooling_param_ = op_pooling_param;
  if (op_pooling_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_pooling_param)
}

// .OpArgmaxParam op_argmax_param = 69;
bool NodeParam::has_op_argmax_param() const {
  return this != internal_default_instance() && op_argmax_param_ != NULL;
}
void NodeParam::clear_op_argmax_param() {
  if (GetArenaNoVirtual() == NULL && op_argmax_param_ != NULL) delete op_argmax_param_;
  op_argmax_param_ = NULL;
}
const ::OpArgmaxParam& NodeParam::op_argmax_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_argmax_param)
  return op_argmax_param_ != NULL ? *op_argmax_param_
                         : *::OpArgmaxParam::internal_default_instance();
}
::OpArgmaxParam* NodeParam::mutable_op_argmax_param() {
  
  if (op_argmax_param_ == NULL) {
    op_argmax_param_ = new ::OpArgmaxParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_argmax_param)
  return op_argmax_param_;
}
::OpArgmaxParam* NodeParam::release_op_argmax_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_argmax_param)
  
  ::OpArgmaxParam* temp = op_argmax_param_;
  op_argmax_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_argmax_param(::OpArgmaxParam* op_argmax_param) {
  delete op_argmax_param_;
  op_argmax_param_ = op_argmax_param;
  if (op_argmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_argmax_param)
}

// .OpReduceParam op_reduce_param = 70;
bool NodeParam::has_op_reduce_param() const {
  return this != internal_default_instance() && op_reduce_param_ != NULL;
}
void NodeParam::clear_op_reduce_param() {
  if (GetArenaNoVirtual() == NULL && op_reduce_param_ != NULL) delete op_reduce_param_;
  op_reduce_param_ = NULL;
}
const ::OpReduceParam& NodeParam::op_reduce_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_reduce_param)
  return op_reduce_param_ != NULL ? *op_reduce_param_
                         : *::OpReduceParam::internal_default_instance();
}
::OpReduceParam* NodeParam::mutable_op_reduce_param() {
  
  if (op_reduce_param_ == NULL) {
    op_reduce_param_ = new ::OpReduceParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_reduce_param)
  return op_reduce_param_;
}
::OpReduceParam* NodeParam::release_op_reduce_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_reduce_param)
  
  ::OpReduceParam* temp = op_reduce_param_;
  op_reduce_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_reduce_param(::OpReduceParam* op_reduce_param) {
  delete op_reduce_param_;
  op_reduce_param_ = op_reduce_param;
  if (op_reduce_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_reduce_param)
}

// .OpEqualParam op_equal_param = 71;
bool NodeParam::has_op_equal_param() const {
  return this != internal_default_instance() && op_equal_param_ != NULL;
}
void NodeParam::clear_op_equal_param() {
  if (GetArenaNoVirtual() == NULL && op_equal_param_ != NULL) delete op_equal_param_;
  op_equal_param_ = NULL;
}
const ::OpEqualParam& NodeParam::op_equal_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.op_equal_param)
  return op_equal_param_ != NULL ? *op_equal_param_
                         : *::OpEqualParam::internal_default_instance();
}
::OpEqualParam* NodeParam::mutable_op_equal_param() {
  
  if (op_equal_param_ == NULL) {
    op_equal_param_ = new ::OpEqualParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.op_equal_param)
  return op_equal_param_;
}
::OpEqualParam* NodeParam::release_op_equal_param() {
  // @@protoc_insertion_point(field_release:NodeParam.op_equal_param)
  
  ::OpEqualParam* temp = op_equal_param_;
  op_equal_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_op_equal_param(::OpEqualParam* op_equal_param) {
  delete op_equal_param_;
  op_equal_param_ = op_equal_param;
  if (op_equal_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.op_equal_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpArgmaxParam::OpArgmaxParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpArgmaxParam)
}
OpArgmaxParam::OpArgmaxParam(const OpArgmaxParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpArgmaxParam)
}

void OpArgmaxParam::SharedCtor() {
  _cached_size_ = 0;
}

OpArgmaxParam::~OpArgmaxParam() {
  // @@protoc_insertion_point(destructor:OpArgmaxParam)
  SharedDtor();
}

void OpArgmaxParam::SharedDtor() {
}

void OpArgmaxParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpArgmaxParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[16].descriptor;
}

const OpArgmaxParam& OpArgmaxParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpArgmaxParam* OpArgmaxParam::New(::google::protobuf::Arena* arena) const {
  OpArgmaxParam* n = new OpArgmaxParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpArgmaxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpArgmaxParam)
}

bool OpArgmaxParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpArgmaxParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:OpArgmaxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpArgmaxParam)
  return false;
#undef DO_
}

void OpArgmaxParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpArgmaxParam)
  // @@protoc_insertion_point(serialize_end:OpArgmaxParam)
}

::google::protobuf::uint8* OpArgmaxParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpArgmaxParam)
  // @@protoc_insertion_point(serialize_to_array_end:OpArgmaxParam)
  return target;
}

size_t OpArgmaxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpArgmaxParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpArgmaxParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpArgmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpArgmaxParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpArgmaxParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpArgmaxParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpArgmaxParam)
    MergeFrom(*source);
  }
}

void OpArgmaxParam::MergeFrom(const OpArgmaxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpArgmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void OpArgmaxParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpArgmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpArgmaxParam::CopyFrom(const OpArgmaxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpArgmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpArgmaxParam::IsInitialized() const {
  return true;
}

void OpArgmaxParam::Swap(OpArgmaxParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpArgmaxParam::InternalSwap(OpArgmaxParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpArgmaxParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpArgmaxParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpSquareParam::OpSquareParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpSquareParam)
}
OpSquareParam::OpSquareParam(const OpSquareParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpSquareParam)
}

void OpSquareParam::SharedCtor() {
  _cached_size_ = 0;
}

OpSquareParam::~OpSquareParam() {
  // @@protoc_insertion_point(destructor:OpSquareParam)
  SharedDtor();
}

void OpSquareParam::SharedDtor() {
}

void OpSquareParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpSquareParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[17].descriptor;
}

const OpSquareParam& OpSquareParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpSquareParam* OpSquareParam::New(::google::protobuf::Arena* arena) const {
  OpSquareParam* n = new OpSquareParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpSquareParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpSquareParam)
}

bool OpSquareParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpSquareParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:OpSquareParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpSquareParam)
  return false;
#undef DO_
}

void OpSquareParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpSquareParam)
  // @@protoc_insertion_point(serialize_end:OpSquareParam)
}

::google::protobuf::uint8* OpSquareParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpSquareParam)
  // @@protoc_insertion_point(serialize_to_array_end:OpSquareParam)
  return target;
}

size_t OpSquareParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpSquareParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpSquareParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpSquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpSquareParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpSquareParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpSquareParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpSquareParam)
    MergeFrom(*source);
  }
}

void OpSquareParam::MergeFrom(const OpSquareParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpSquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void OpSquareParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpSquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpSquareParam::CopyFrom(const OpSquareParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpSquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpSquareParam::IsInitialized() const {
  return true;
}

void OpSquareParam::Swap(OpSquareParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpSquareParam::InternalSwap(OpSquareParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpSquareParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpSquareParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxLossParam::kAlphaFieldNumber;
const int SoftmaxLossParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxLossParam::SoftmaxLossParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SoftmaxLossParam)
}
SoftmaxLossParam::SoftmaxLossParam(const SoftmaxLossParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:SoftmaxLossParam)
}

void SoftmaxLossParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

SoftmaxLossParam::~SoftmaxLossParam() {
  // @@protoc_insertion_point(destructor:SoftmaxLossParam)
  SharedDtor();
}

void SoftmaxLossParam::SharedDtor() {
}

void SoftmaxLossParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxLossParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[18].descriptor;
}

const SoftmaxLossParam& SoftmaxLossParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxLossParam* SoftmaxLossParam::New(::google::protobuf::Arena* arena) const {
  SoftmaxLossParam* n = new SoftmaxLossParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxLossParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftmaxLossParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool SoftmaxLossParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SoftmaxLossParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SoftmaxLossParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SoftmaxLossParam)
  return false;
#undef DO_
}

void SoftmaxLossParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SoftmaxLossParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:SoftmaxLossParam)
}

::google::protobuf::uint8* SoftmaxLossParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SoftmaxLossParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SoftmaxLossParam)
  return target;
}

size_t SoftmaxLossParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftmaxLossParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxLossParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftmaxLossParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxLossParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxLossParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftmaxLossParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftmaxLossParam)
    MergeFrom(*source);
  }
}

void SoftmaxLossParam::MergeFrom(const SoftmaxLossParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftmaxLossParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void SoftmaxLossParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftmaxLossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxLossParam::CopyFrom(const SoftmaxLossParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftmaxLossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxLossParam::IsInitialized() const {
  return true;
}

void SoftmaxLossParam::Swap(SoftmaxLossParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxLossParam::InternalSwap(SoftmaxLossParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxLossParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxLossParam

// float alpha = 1;
void SoftmaxLossParam::clear_alpha() {
  alpha_ = 0;
}
float SoftmaxLossParam::alpha() const {
  // @@protoc_insertion_point(field_get:SoftmaxLossParam.alpha)
  return alpha_;
}
void SoftmaxLossParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxLossParam.alpha)
}

// float beta = 2;
void SoftmaxLossParam::clear_beta() {
  beta_ = 0;
}
float SoftmaxLossParam::beta() const {
  // @@protoc_insertion_point(field_get:SoftmaxLossParam.beta)
  return beta_;
}
void SoftmaxLossParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxLossParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpSoftmaxParam::kAlphaFieldNumber;
const int OpSoftmaxParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpSoftmaxParam::OpSoftmaxParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpSoftmaxParam)
}
OpSoftmaxParam::OpSoftmaxParam(const OpSoftmaxParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:OpSoftmaxParam)
}

void OpSoftmaxParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

OpSoftmaxParam::~OpSoftmaxParam() {
  // @@protoc_insertion_point(destructor:OpSoftmaxParam)
  SharedDtor();
}

void OpSoftmaxParam::SharedDtor() {
}

void OpSoftmaxParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpSoftmaxParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[19].descriptor;
}

const OpSoftmaxParam& OpSoftmaxParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpSoftmaxParam* OpSoftmaxParam::New(::google::protobuf::Arena* arena) const {
  OpSoftmaxParam* n = new OpSoftmaxParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpSoftmaxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:OpSoftmaxParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool OpSoftmaxParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpSoftmaxParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpSoftmaxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpSoftmaxParam)
  return false;
#undef DO_
}

void OpSoftmaxParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpSoftmaxParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:OpSoftmaxParam)
}

::google::protobuf::uint8* OpSoftmaxParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OpSoftmaxParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OpSoftmaxParam)
  return target;
}

size_t OpSoftmaxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpSoftmaxParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpSoftmaxParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpSoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpSoftmaxParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpSoftmaxParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpSoftmaxParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpSoftmaxParam)
    MergeFrom(*source);
  }
}

void OpSoftmaxParam::MergeFrom(const OpSoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpSoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void OpSoftmaxParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpSoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpSoftmaxParam::CopyFrom(const OpSoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpSoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpSoftmaxParam::IsInitialized() const {
  return true;
}

void OpSoftmaxParam::Swap(OpSoftmaxParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpSoftmaxParam::InternalSwap(OpSoftmaxParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpSoftmaxParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpSoftmaxParam

// float alpha = 1;
void OpSoftmaxParam::clear_alpha() {
  alpha_ = 0;
}
float OpSoftmaxParam::alpha() const {
  // @@protoc_insertion_point(field_get:OpSoftmaxParam.alpha)
  return alpha_;
}
void OpSoftmaxParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:OpSoftmaxParam.alpha)
}

// float beta = 2;
void OpSoftmaxParam::clear_beta() {
  beta_ = 0;
}
float OpSoftmaxParam::beta() const {
  // @@protoc_insertion_point(field_get:OpSoftmaxParam.beta)
  return beta_;
}
void OpSoftmaxParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:OpSoftmaxParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitFillParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitFillParam::InitFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitFillParam)
}
InitFillParam::InitFillParam(const InitFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:InitFillParam)
}

void InitFillParam::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

InitFillParam::~InitFillParam() {
  // @@protoc_insertion_point(destructor:InitFillParam)
  SharedDtor();
}

void InitFillParam::SharedDtor() {
}

void InitFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[20].descriptor;
}

const InitFillParam& InitFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitFillParam* InitFillParam::New(::google::protobuf::Arena* arena) const {
  InitFillParam* n = new InitFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitFillParam)
  value_ = 0;
}

bool InitFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitFillParam)
  return false;
#undef DO_
}

void InitFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitFillParam)
  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitFillParam)
}

::google::protobuf::uint8* InitFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitFillParam)
  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitFillParam)
  return target;
}

size_t InitFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitFillParam)
  size_t total_size = 0;

  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitFillParam)
    MergeFrom(*source);
  }
}

void InitFillParam::MergeFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void InitFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitFillParam::CopyFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitFillParam::IsInitialized() const {
  return true;
}

void InitFillParam::Swap(InitFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitFillParam::InternalSwap(InitFillParam* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitFillParam

// float value = 1;
void InitFillParam::clear_value() {
  value_ = 0;
}
float InitFillParam::value() const {
  // @@protoc_insertion_point(field_get:InitFillParam.value)
  return value_;
}
void InitFillParam::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:InitFillParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitIndexFillParam::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitIndexFillParam::InitIndexFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitIndexFillParam)
}
InitIndexFillParam::InitIndexFillParam(const InitIndexFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:InitIndexFillParam)
}

void InitIndexFillParam::SharedCtor() {
  offset_ = 0;
  _cached_size_ = 0;
}

InitIndexFillParam::~InitIndexFillParam() {
  // @@protoc_insertion_point(destructor:InitIndexFillParam)
  SharedDtor();
}

void InitIndexFillParam::SharedDtor() {
}

void InitIndexFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitIndexFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[21].descriptor;
}

const InitIndexFillParam& InitIndexFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitIndexFillParam* InitIndexFillParam::New(::google::protobuf::Arena* arena) const {
  InitIndexFillParam* n = new InitIndexFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitIndexFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitIndexFillParam)
  offset_ = 0;
}

bool InitIndexFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitIndexFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitIndexFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitIndexFillParam)
  return false;
#undef DO_
}

void InitIndexFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitIndexFillParam)
  // float offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitIndexFillParam)
}

::google::protobuf::uint8* InitIndexFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitIndexFillParam)
  // float offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitIndexFillParam)
  return target;
}

size_t InitIndexFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitIndexFillParam)
  size_t total_size = 0;

  // float offset = 1;
  if (this->offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitIndexFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitIndexFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitIndexFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitIndexFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitIndexFillParam)
    MergeFrom(*source);
  }
}

void InitIndexFillParam::MergeFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void InitIndexFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitIndexFillParam::CopyFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitIndexFillParam::IsInitialized() const {
  return true;
}

void InitIndexFillParam::Swap(InitIndexFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitIndexFillParam::InternalSwap(InitIndexFillParam* other) {
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitIndexFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitIndexFillParam

// float offset = 1;
void InitIndexFillParam::clear_offset() {
  offset_ = 0;
}
float InitIndexFillParam::offset() const {
  // @@protoc_insertion_point(field_get:InitIndexFillParam.offset)
  return offset_;
}
void InitIndexFillParam::set_offset(float value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:InitIndexFillParam.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRandomUniformParam::kMinFieldNumber;
const int InitRandomUniformParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRandomUniformParam::InitRandomUniformParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitRandomUniformParam)
}
InitRandomUniformParam::InitRandomUniformParam(const InitRandomUniformParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:InitRandomUniformParam)
}

void InitRandomUniformParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitRandomUniformParam::~InitRandomUniformParam() {
  // @@protoc_insertion_point(destructor:InitRandomUniformParam)
  SharedDtor();
}

void InitRandomUniformParam::SharedDtor() {
}

void InitRandomUniformParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRandomUniformParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[22].descriptor;
}

const InitRandomUniformParam& InitRandomUniformParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRandomUniformParam* InitRandomUniformParam::New(::google::protobuf::Arena* arena) const {
  InitRandomUniformParam* n = new InitRandomUniformParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRandomUniformParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRandomUniformParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitRandomUniformParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitRandomUniformParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitRandomUniformParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitRandomUniformParam)
  return false;
#undef DO_
}

void InitRandomUniformParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitRandomUniformParam)
  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitRandomUniformParam)
}

::google::protobuf::uint8* InitRandomUniformParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitRandomUniformParam)
  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitRandomUniformParam)
  return target;
}

size_t InitRandomUniformParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitRandomUniformParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRandomUniformParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRandomUniformParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRandomUniformParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitRandomUniformParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitRandomUniformParam)
    MergeFrom(*source);
  }
}

void InitRandomUniformParam::MergeFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitRandomUniformParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRandomUniformParam::CopyFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRandomUniformParam::IsInitialized() const {
  return true;
}

void InitRandomUniformParam::Swap(InitRandomUniformParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRandomUniformParam::InternalSwap(InitRandomUniformParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRandomUniformParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRandomUniformParam

// float min = 1;
void InitRandomUniformParam::clear_min() {
  min_ = 0;
}
float InitRandomUniformParam::min() const {
  // @@protoc_insertion_point(field_get:InitRandomUniformParam.min)
  return min_;
}
void InitRandomUniformParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:InitRandomUniformParam.min)
}

// float max = 2;
void InitRandomUniformParam::clear_max() {
  max_ = 0;
}
float InitRandomUniformParam::max() const {
  // @@protoc_insertion_point(field_get:InitRandomUniformParam.max)
  return max_;
}
void InitRandomUniformParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:InitRandomUniformParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitStepParam::kMinFieldNumber;
const int InitStepParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitStepParam::InitStepParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitStepParam)
}
InitStepParam::InitStepParam(const InitStepParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:InitStepParam)
}

void InitStepParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitStepParam::~InitStepParam() {
  // @@protoc_insertion_point(destructor:InitStepParam)
  SharedDtor();
}

void InitStepParam::SharedDtor() {
}

void InitStepParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitStepParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[23].descriptor;
}

const InitStepParam& InitStepParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitStepParam* InitStepParam::New(::google::protobuf::Arena* arena) const {
  InitStepParam* n = new InitStepParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitStepParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitStepParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitStepParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitStepParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitStepParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitStepParam)
  return false;
#undef DO_
}

void InitStepParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitStepParam)
  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitStepParam)
}

::google::protobuf::uint8* InitStepParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitStepParam)
  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitStepParam)
  return target;
}

size_t InitStepParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitStepParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitStepParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitStepParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitStepParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitStepParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitStepParam)
    MergeFrom(*source);
  }
}

void InitStepParam::MergeFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitStepParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitStepParam::CopyFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitStepParam::IsInitialized() const {
  return true;
}

void InitStepParam::Swap(InitStepParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitStepParam::InternalSwap(InitStepParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitStepParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitStepParam

// float min = 1;
void InitStepParam::clear_min() {
  min_ = 0;
}
float InitStepParam::min() const {
  // @@protoc_insertion_point(field_get:InitStepParam.min)
  return min_;
}
void InitStepParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:InitStepParam.min)
}

// float max = 2;
void InitStepParam::clear_max() {
  max_ = 0;
}
float InitStepParam::max() const {
  // @@protoc_insertion_point(field_get:InitStepParam.max)
  return max_;
}
void InitStepParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:InitStepParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitParam::kTensorParamFieldNumber;
const int InitParam::kFillParamFieldNumber;
const int InitParam::kIndexFillParamFieldNumber;
const int InitParam::kRandomUniformParamFieldNumber;
const int InitParam::kStepParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitParam::InitParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitParam)
}
InitParam::InitParam(const InitParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    tensor_param_ = new ::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  if (from.has_fill_param()) {
    fill_param_ = new ::InitFillParam(*from.fill_param_);
  } else {
    fill_param_ = NULL;
  }
  if (from.has_index_fill_param()) {
    index_fill_param_ = new ::InitIndexFillParam(*from.index_fill_param_);
  } else {
    index_fill_param_ = NULL;
  }
  if (from.has_random_uniform_param()) {
    random_uniform_param_ = new ::InitRandomUniformParam(*from.random_uniform_param_);
  } else {
    random_uniform_param_ = NULL;
  }
  if (from.has_step_param()) {
    step_param_ = new ::InitStepParam(*from.step_param_);
  } else {
    step_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:InitParam)
}

void InitParam::SharedCtor() {
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&step_param_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(step_param_));
  _cached_size_ = 0;
}

InitParam::~InitParam() {
  // @@protoc_insertion_point(destructor:InitParam)
  SharedDtor();
}

void InitParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
  if (this != internal_default_instance()) {
    delete fill_param_;
  }
  if (this != internal_default_instance()) {
    delete index_fill_param_;
  }
  if (this != internal_default_instance()) {
    delete random_uniform_param_;
  }
  if (this != internal_default_instance()) {
    delete step_param_;
  }
}

void InitParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[24].descriptor;
}

const InitParam& InitParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitParam* InitParam::New(::google::protobuf::Arena* arena) const {
  InitParam* n = new InitParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitParam)
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) {
    delete fill_param_;
  }
  fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) {
    delete index_fill_param_;
  }
  index_fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) {
    delete random_uniform_param_;
  }
  random_uniform_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) {
    delete step_param_;
  }
  step_param_ = NULL;
}

bool InitParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam tensor_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitFillParam fill_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitIndexFillParam index_fill_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitRandomUniformParam random_uniform_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_uniform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitStepParam step_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitParam)
  return false;
#undef DO_
}

void InitParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_param_, output);
  }

  // .InitFillParam fill_param = 2;
  if (this->has_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fill_param_, output);
  }

  // .InitIndexFillParam index_fill_param = 3;
  if (this->has_index_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->index_fill_param_, output);
  }

  // .InitRandomUniformParam random_uniform_param = 4;
  if (this->has_random_uniform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->random_uniform_param_, output);
  }

  // .InitStepParam step_param = 5;
  if (this->has_step_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->step_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:InitParam)
}

::google::protobuf::uint8* InitParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_param_, false, target);
  }

  // .InitFillParam fill_param = 2;
  if (this->has_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fill_param_, false, target);
  }

  // .InitIndexFillParam index_fill_param = 3;
  if (this->has_index_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->index_fill_param_, false, target);
  }

  // .InitRandomUniformParam random_uniform_param = 4;
  if (this->has_random_uniform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->random_uniform_param_, false, target);
  }

  // .InitStepParam step_param = 5;
  if (this->has_step_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->step_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitParam)
  return target;
}

size_t InitParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitParam)
  size_t total_size = 0;

  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // .InitFillParam fill_param = 2;
  if (this->has_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fill_param_);
  }

  // .InitIndexFillParam index_fill_param = 3;
  if (this->has_index_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_fill_param_);
  }

  // .InitRandomUniformParam random_uniform_param = 4;
  if (this->has_random_uniform_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_uniform_param_);
  }

  // .InitStepParam step_param = 5;
  if (this->has_step_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitParam)
    MergeFrom(*source);
  }
}

void InitParam::MergeFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.has_fill_param()) {
    mutable_fill_param()->::InitFillParam::MergeFrom(from.fill_param());
  }
  if (from.has_index_fill_param()) {
    mutable_index_fill_param()->::InitIndexFillParam::MergeFrom(from.index_fill_param());
  }
  if (from.has_random_uniform_param()) {
    mutable_random_uniform_param()->::InitRandomUniformParam::MergeFrom(from.random_uniform_param());
  }
  if (from.has_step_param()) {
    mutable_step_param()->::InitStepParam::MergeFrom(from.step_param());
  }
}

void InitParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitParam::CopyFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParam::IsInitialized() const {
  return true;
}

void InitParam::Swap(InitParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitParam::InternalSwap(InitParam* other) {
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(fill_param_, other->fill_param_);
  std::swap(index_fill_param_, other->index_fill_param_);
  std::swap(random_uniform_param_, other->random_uniform_param_);
  std::swap(step_param_, other->step_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitParam

// .TensorParam tensor_param = 1;
bool InitParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void InitParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::TensorParam& InitParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:InitParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::TensorParam::internal_default_instance();
}
::TensorParam* InitParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.tensor_param)
  return tensor_param_;
}
::TensorParam* InitParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:InitParam.tensor_param)
  
  ::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_tensor_param(::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.tensor_param)
}

// .InitFillParam fill_param = 2;
bool InitParam::has_fill_param() const {
  return this != internal_default_instance() && fill_param_ != NULL;
}
void InitParam::clear_fill_param() {
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) delete fill_param_;
  fill_param_ = NULL;
}
const ::InitFillParam& InitParam::fill_param() const {
  // @@protoc_insertion_point(field_get:InitParam.fill_param)
  return fill_param_ != NULL ? *fill_param_
                         : *::InitFillParam::internal_default_instance();
}
::InitFillParam* InitParam::mutable_fill_param() {
  
  if (fill_param_ == NULL) {
    fill_param_ = new ::InitFillParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.fill_param)
  return fill_param_;
}
::InitFillParam* InitParam::release_fill_param() {
  // @@protoc_insertion_point(field_release:InitParam.fill_param)
  
  ::InitFillParam* temp = fill_param_;
  fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_fill_param(::InitFillParam* fill_param) {
  delete fill_param_;
  fill_param_ = fill_param;
  if (fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.fill_param)
}

// .InitIndexFillParam index_fill_param = 3;
bool InitParam::has_index_fill_param() const {
  return this != internal_default_instance() && index_fill_param_ != NULL;
}
void InitParam::clear_index_fill_param() {
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) delete index_fill_param_;
  index_fill_param_ = NULL;
}
const ::InitIndexFillParam& InitParam::index_fill_param() const {
  // @@protoc_insertion_point(field_get:InitParam.index_fill_param)
  return index_fill_param_ != NULL ? *index_fill_param_
                         : *::InitIndexFillParam::internal_default_instance();
}
::InitIndexFillParam* InitParam::mutable_index_fill_param() {
  
  if (index_fill_param_ == NULL) {
    index_fill_param_ = new ::InitIndexFillParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.index_fill_param)
  return index_fill_param_;
}
::InitIndexFillParam* InitParam::release_index_fill_param() {
  // @@protoc_insertion_point(field_release:InitParam.index_fill_param)
  
  ::InitIndexFillParam* temp = index_fill_param_;
  index_fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_index_fill_param(::InitIndexFillParam* index_fill_param) {
  delete index_fill_param_;
  index_fill_param_ = index_fill_param;
  if (index_fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.index_fill_param)
}

// .InitRandomUniformParam random_uniform_param = 4;
bool InitParam::has_random_uniform_param() const {
  return this != internal_default_instance() && random_uniform_param_ != NULL;
}
void InitParam::clear_random_uniform_param() {
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) delete random_uniform_param_;
  random_uniform_param_ = NULL;
}
const ::InitRandomUniformParam& InitParam::random_uniform_param() const {
  // @@protoc_insertion_point(field_get:InitParam.random_uniform_param)
  return random_uniform_param_ != NULL ? *random_uniform_param_
                         : *::InitRandomUniformParam::internal_default_instance();
}
::InitRandomUniformParam* InitParam::mutable_random_uniform_param() {
  
  if (random_uniform_param_ == NULL) {
    random_uniform_param_ = new ::InitRandomUniformParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.random_uniform_param)
  return random_uniform_param_;
}
::InitRandomUniformParam* InitParam::release_random_uniform_param() {
  // @@protoc_insertion_point(field_release:InitParam.random_uniform_param)
  
  ::InitRandomUniformParam* temp = random_uniform_param_;
  random_uniform_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_random_uniform_param(::InitRandomUniformParam* random_uniform_param) {
  delete random_uniform_param_;
  random_uniform_param_ = random_uniform_param;
  if (random_uniform_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.random_uniform_param)
}

// .InitStepParam step_param = 5;
bool InitParam::has_step_param() const {
  return this != internal_default_instance() && step_param_ != NULL;
}
void InitParam::clear_step_param() {
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) delete step_param_;
  step_param_ = NULL;
}
const ::InitStepParam& InitParam::step_param() const {
  // @@protoc_insertion_point(field_get:InitParam.step_param)
  return step_param_ != NULL ? *step_param_
                         : *::InitStepParam::internal_default_instance();
}
::InitStepParam* InitParam::mutable_step_param() {
  
  if (step_param_ == NULL) {
    step_param_ = new ::InitStepParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.step_param)
  return step_param_;
}
::InitStepParam* InitParam::release_step_param() {
  // @@protoc_insertion_point(field_release:InitParam.step_param)
  
  ::InitStepParam* temp = step_param_;
  step_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_step_param(::InitStepParam* step_param) {
  delete step_param_;
  step_param_ = step_param;
  if (step_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.step_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SGDSolverParam::kMomentumFieldNumber;
const int SGDSolverParam::kLearningRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SGDSolverParam::SGDSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SGDSolverParam)
}
SGDSolverParam::SGDSolverParam(const SGDSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&momentum_, &from.momentum_,
    reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(learning_rate_));
  // @@protoc_insertion_point(copy_constructor:SGDSolverParam)
}

void SGDSolverParam::SharedCtor() {
  ::memset(&momentum_, 0, reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(learning_rate_));
  _cached_size_ = 0;
}

SGDSolverParam::~SGDSolverParam() {
  // @@protoc_insertion_point(destructor:SGDSolverParam)
  SharedDtor();
}

void SGDSolverParam::SharedDtor() {
}

void SGDSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[25].descriptor;
}

const SGDSolverParam& SGDSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SGDSolverParam* SGDSolverParam::New(::google::protobuf::Arena* arena) const {
  SGDSolverParam* n = new SGDSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SGDSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SGDSolverParam)
  ::memset(&momentum_, 0, reinterpret_cast<char*>(&learning_rate_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(learning_rate_));
}

bool SGDSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SGDSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float momentum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float learning_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SGDSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SGDSolverParam)
  return false;
#undef DO_
}

void SGDSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SGDSolverParam)
  // float momentum = 1;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->momentum(), output);
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:SGDSolverParam)
}

::google::protobuf::uint8* SGDSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SGDSolverParam)
  // float momentum = 1;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->momentum(), target);
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SGDSolverParam)
  return target;
}

size_t SGDSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGDSolverParam)
  size_t total_size = 0;

  // float momentum = 1;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SGDSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SGDSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGDSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGDSolverParam)
    MergeFrom(*source);
  }
}

void SGDSolverParam::MergeFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
}

void SGDSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDSolverParam::CopyFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDSolverParam::IsInitialized() const {
  return true;
}

void SGDSolverParam::Swap(SGDSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SGDSolverParam::InternalSwap(SGDSolverParam* other) {
  std::swap(momentum_, other->momentum_);
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SGDSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SGDSolverParam

// float momentum = 1;
void SGDSolverParam::clear_momentum() {
  momentum_ = 0;
}
float SGDSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:SGDSolverParam.momentum)
  return momentum_;
}
void SGDSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:SGDSolverParam.momentum)
}

// float learning_rate = 2;
void SGDSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float SGDSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:SGDSolverParam.learning_rate)
  return learning_rate_;
}
void SGDSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:SGDSolverParam.learning_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSolverParam::kMomentumFieldNumber;
const int GainSolverParam::kLearningRateFieldNumber;
const int GainSolverParam::kMaxGainFieldNumber;
const int GainSolverParam::kMinGainFieldNumber;
const int GainSolverParam::kGainPlusFieldNumber;
const int GainSolverParam::kGainMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSolverParam::GainSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GainSolverParam)
}
GainSolverParam::GainSolverParam(const GainSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&momentum_, &from.momentum_,
    reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(gain_mult_));
  // @@protoc_insertion_point(copy_constructor:GainSolverParam)
}

void GainSolverParam::SharedCtor() {
  ::memset(&momentum_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(gain_mult_));
  _cached_size_ = 0;
}

GainSolverParam::~GainSolverParam() {
  // @@protoc_insertion_point(destructor:GainSolverParam)
  SharedDtor();
}

void GainSolverParam::SharedDtor() {
}

void GainSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[26].descriptor;
}

const GainSolverParam& GainSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSolverParam* GainSolverParam::New(::google::protobuf::Arena* arena) const {
  GainSolverParam* n = new GainSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GainSolverParam)
  ::memset(&momentum_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&momentum_) + sizeof(gain_mult_));
}

bool GainSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GainSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float momentum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float learning_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_plus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_plus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_mult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GainSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GainSolverParam)
  return false;
#undef DO_
}

void GainSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GainSolverParam)
  // float momentum = 1;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->momentum(), output);
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_gain(), output);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_gain(), output);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gain_plus(), output);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gain_mult(), output);
  }

  // @@protoc_insertion_point(serialize_end:GainSolverParam)
}

::google::protobuf::uint8* GainSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GainSolverParam)
  // float momentum = 1;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->momentum(), target);
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_gain(), target);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_gain(), target);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gain_plus(), target);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gain_mult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GainSolverParam)
  return target;
}

size_t GainSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GainSolverParam)
  size_t total_size = 0;

  // float momentum = 1;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float learning_rate = 2;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    total_size += 1 + 4;
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    total_size += 1 + 4;
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    total_size += 1 + 4;
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GainSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GainSolverParam)
    MergeFrom(*source);
  }
}

void GainSolverParam::MergeFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.max_gain() != 0) {
    set_max_gain(from.max_gain());
  }
  if (from.min_gain() != 0) {
    set_min_gain(from.min_gain());
  }
  if (from.gain_plus() != 0) {
    set_gain_plus(from.gain_plus());
  }
  if (from.gain_mult() != 0) {
    set_gain_mult(from.gain_mult());
  }
}

void GainSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSolverParam::CopyFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSolverParam::IsInitialized() const {
  return true;
}

void GainSolverParam::Swap(GainSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSolverParam::InternalSwap(GainSolverParam* other) {
  std::swap(momentum_, other->momentum_);
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(max_gain_, other->max_gain_);
  std::swap(min_gain_, other->min_gain_);
  std::swap(gain_plus_, other->gain_plus_);
  std::swap(gain_mult_, other->gain_mult_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSolverParam

// float momentum = 1;
void GainSolverParam::clear_momentum() {
  momentum_ = 0;
}
float GainSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.momentum)
  return momentum_;
}
void GainSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.momentum)
}

// float learning_rate = 2;
void GainSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float GainSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.learning_rate)
  return learning_rate_;
}
void GainSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.learning_rate)
}

// float max_gain = 3;
void GainSolverParam::clear_max_gain() {
  max_gain_ = 0;
}
float GainSolverParam::max_gain() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.max_gain)
  return max_gain_;
}
void GainSolverParam::set_max_gain(float value) {
  
  max_gain_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.max_gain)
}

// float min_gain = 4;
void GainSolverParam::clear_min_gain() {
  min_gain_ = 0;
}
float GainSolverParam::min_gain() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.min_gain)
  return min_gain_;
}
void GainSolverParam::set_min_gain(float value) {
  
  min_gain_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.min_gain)
}

// float gain_plus = 5;
void GainSolverParam::clear_gain_plus() {
  gain_plus_ = 0;
}
float GainSolverParam::gain_plus() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.gain_plus)
  return gain_plus_;
}
void GainSolverParam::set_gain_plus(float value) {
  
  gain_plus_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.gain_plus)
}

// float gain_mult = 6;
void GainSolverParam::clear_gain_mult() {
  gain_mult_ = 0;
}
float GainSolverParam::gain_mult() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.gain_mult)
  return gain_mult_;
}
void GainSolverParam::set_gain_mult(float value) {
  
  gain_mult_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.gain_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParam::kMaxIterationFieldNumber;
const int SolverParam::kSgdSolverFieldNumber;
const int SolverParam::kGainSolverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParam::SolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverParam)
}
SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sgd_solver()) {
    sgd_solver_ = new ::SGDSolverParam(*from.sgd_solver_);
  } else {
    sgd_solver_ = NULL;
  }
  if (from.has_gain_solver()) {
    gain_solver_ = new ::GainSolverParam(*from.gain_solver_);
  } else {
    gain_solver_ = NULL;
  }
  max_iteration_ = from.max_iteration_;
  // @@protoc_insertion_point(copy_constructor:SolverParam)
}

void SolverParam::SharedCtor() {
  ::memset(&sgd_solver_, 0, reinterpret_cast<char*>(&max_iteration_) -
    reinterpret_cast<char*>(&sgd_solver_) + sizeof(max_iteration_));
  _cached_size_ = 0;
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:SolverParam)
  SharedDtor();
}

void SolverParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sgd_solver_;
  }
  if (this != internal_default_instance()) {
    delete gain_solver_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[27].descriptor;
}

const SolverParam& SolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParam* SolverParam::New(::google::protobuf::Arena* arena) const {
  SolverParam* n = new SolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SolverParam)
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) {
    delete sgd_solver_;
  }
  sgd_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) {
    delete gain_solver_;
  }
  gain_solver_ = NULL;
  max_iteration_ = 0;
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_iteration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SGDSolverParam sgd_solver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GainSolverParam gain_solver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverParam)
  return false;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverParam)
  // int32 max_iteration = 1;
  if (this->max_iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iteration(), output);
  }

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sgd_solver_, output);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gain_solver_, output);
  }

  // @@protoc_insertion_point(serialize_end:SolverParam)
}

::google::protobuf::uint8* SolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SolverParam)
  // int32 max_iteration = 1;
  if (this->max_iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iteration(), target);
  }

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sgd_solver_, false, target);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->gain_solver_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SolverParam)
  return target;
}

size_t SolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SolverParam)
  size_t total_size = 0;

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sgd_solver_);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gain_solver_);
  }

  // int32 max_iteration = 1;
  if (this->max_iteration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_iteration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SolverParam)
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sgd_solver()) {
    mutable_sgd_solver()->::SGDSolverParam::MergeFrom(from.sgd_solver());
  }
  if (from.has_gain_solver()) {
    mutable_gain_solver()->::GainSolverParam::MergeFrom(from.gain_solver());
  }
  if (from.max_iteration() != 0) {
    set_max_iteration(from.max_iteration());
  }
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParam::InternalSwap(SolverParam* other) {
  std::swap(sgd_solver_, other->sgd_solver_);
  std::swap(gain_solver_, other->gain_solver_);
  std::swap(max_iteration_, other->max_iteration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParam

// int32 max_iteration = 1;
void SolverParam::clear_max_iteration() {
  max_iteration_ = 0;
}
::google::protobuf::int32 SolverParam::max_iteration() const {
  // @@protoc_insertion_point(field_get:SolverParam.max_iteration)
  return max_iteration_;
}
void SolverParam::set_max_iteration(::google::protobuf::int32 value) {
  
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:SolverParam.max_iteration)
}

// .SGDSolverParam sgd_solver = 2;
bool SolverParam::has_sgd_solver() const {
  return this != internal_default_instance() && sgd_solver_ != NULL;
}
void SolverParam::clear_sgd_solver() {
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) delete sgd_solver_;
  sgd_solver_ = NULL;
}
const ::SGDSolverParam& SolverParam::sgd_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.sgd_solver)
  return sgd_solver_ != NULL ? *sgd_solver_
                         : *::SGDSolverParam::internal_default_instance();
}
::SGDSolverParam* SolverParam::mutable_sgd_solver() {
  
  if (sgd_solver_ == NULL) {
    sgd_solver_ = new ::SGDSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.sgd_solver)
  return sgd_solver_;
}
::SGDSolverParam* SolverParam::release_sgd_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.sgd_solver)
  
  ::SGDSolverParam* temp = sgd_solver_;
  sgd_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_sgd_solver(::SGDSolverParam* sgd_solver) {
  delete sgd_solver_;
  sgd_solver_ = sgd_solver;
  if (sgd_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.sgd_solver)
}

// .GainSolverParam gain_solver = 3;
bool SolverParam::has_gain_solver() const {
  return this != internal_default_instance() && gain_solver_ != NULL;
}
void SolverParam::clear_gain_solver() {
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) delete gain_solver_;
  gain_solver_ = NULL;
}
const ::GainSolverParam& SolverParam::gain_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.gain_solver)
  return gain_solver_ != NULL ? *gain_solver_
                         : *::GainSolverParam::internal_default_instance();
}
::GainSolverParam* SolverParam::mutable_gain_solver() {
  
  if (gain_solver_ == NULL) {
    gain_solver_ = new ::GainSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.gain_solver)
  return gain_solver_;
}
::GainSolverParam* SolverParam::release_gain_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.gain_solver)
  
  ::GainSolverParam* temp = gain_solver_;
  gain_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_gain_solver(::GainSolverParam* gain_solver) {
  delete gain_solver_;
  gain_solver_ = gain_solver;
  if (gain_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.gain_solver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
