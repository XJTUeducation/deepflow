// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deepflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TensorDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorData> {
} _TensorData_default_instance_;
class TensorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorParam> {
} _TensorParam_default_instance_;
class PhaseplexerParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhaseplexerParam> {
} _PhaseplexerParam_default_instance_;
class AccumulatorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccumulatorParam> {
} _AccumulatorParam_default_instance_;
class PrintParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrintParam> {
} _PrintParam_default_instance_;
class AddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddParam> {
} _AddParam_default_instance_;
class DisplayParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisplayParam> {
} _DisplayParam_default_instance_;
class EqualParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EqualParam> {
} _EqualParam_default_instance_;
class BiasAddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BiasAddParam> {
} _BiasAddParam_default_instance_;
class PoolingParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoolingParam> {
} _PoolingParam_default_instance_;
class TransposedConv2dParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransposedConv2dParam> {
} _TransposedConv2dParam_default_instance_;
class Conv2dParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Conv2dParam> {
} _Conv2dParam_default_instance_;
class DropoutParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropoutParam> {
} _DropoutParam_default_instance_;
class MatMulParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MatMulParam> {
} _MatMulParam_default_instance_;
class ReluParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReluParam> {
} _ReluParam_default_instance_;
class ReduceParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReduceParam> {
} _ReduceParam_default_instance_;
class SnapshotParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotParam> {
} _SnapshotParam_default_instance_;
class PlaceHolderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaceHolderParam> {
} _PlaceHolderParam_default_instance_;
class VariableParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariableParam> {
} _VariableParam_default_instance_;
class LossParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossParam> {
} _LossParam_default_instance_;
class ReaderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReaderParam> {
} _ReaderParam_default_instance_;
class MnistReaderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MnistReaderParam> {
} _MnistReaderParam_default_instance_;
class CastFloatParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastFloatParam> {
} _CastFloatParam_default_instance_;
class NodeParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeParam> {
} _NodeParam_default_instance_;
class SquareParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SquareParam> {
} _SquareParam_default_instance_;
class SoftmaxLossParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxLossParam> {
} _SoftmaxLossParam_default_instance_;
class SoftmaxParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParam> {
} _SoftmaxParam_default_instance_;
class InitFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitFillParam> {
} _InitFillParam_default_instance_;
class InitIndexFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitIndexFillParam> {
} _InitIndexFillParam_default_instance_;
class InitRandomUniformParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRandomUniformParam> {
} _InitRandomUniformParam_default_instance_;
class InitStepParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitStepParam> {
} _InitStepParam_default_instance_;
class InitParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitParam> {
} _InitParam_default_instance_;
class SGDSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SGDSolverParam> {
} _SGDSolverParam_default_instance_;
class GainSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSolverParam> {
} _GainSolverParam_default_instance_;
class AdaDeltaSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdaDeltaSolverParam> {
} _AdaDeltaSolverParam_default_instance_;
class AdamSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdamSolverParam> {
} _AdamSolverParam_default_instance_;
class SolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverParam> {
} _SolverParam_default_instance_;
class PhaseParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhaseParam> {
} _PhaseParam_default_instance_;
class GraphParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GraphParam> {
} _GraphParam_default_instance_;

namespace protobuf_deepflow_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[39];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorData, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, dims_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseplexerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseplexerParam, phase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulatorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulatorParam, reset_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, num_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, print_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, print_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, delay_msec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasAddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, window_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, window_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, h_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, v_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, h_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, v_stride_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, dilation_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, dilation_w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, dilation_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, dilation_w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParam, dropout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatMulParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatMulParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatMulParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReluParam, negative_slope_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, reduce_op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, reduce_dim_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceHolderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceHolderParam, tensor_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, init_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, solver_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, softmax_loss_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReaderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReaderParam, mnist_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, folder_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistReaderParam, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastFloatParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, reader_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, variable_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, place_holder_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, phaseplexer_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, bias_add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, conv_2d_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, transposed_conv_2d_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, square_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, matmul_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, reduce_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, equal_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, print_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, cast_float_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, accumulator_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, display_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SquareParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxLossParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, init_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, index_fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, random_uniform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, step_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, momentum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, max_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, min_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_plus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_mult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, delta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, beta1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, beta2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, eps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, sgd_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, gain_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, adam_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, adadelta_solver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, behaviour_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphParam, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphParam, solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphParam, phase_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TensorData)},
  { 5, -1, sizeof(TensorParam)},
  { 11, -1, sizeof(PhaseplexerParam)},
  { 16, -1, sizeof(AccumulatorParam)},
  { 21, -1, sizeof(PrintParam)},
  { 29, -1, sizeof(AddParam)},
  { 35, -1, sizeof(DisplayParam)},
  { 40, -1, sizeof(EqualParam)},
  { 44, -1, sizeof(BiasAddParam)},
  { 48, -1, sizeof(PoolingParam)},
  { 58, -1, sizeof(TransposedConv2dParam)},
  { 69, -1, sizeof(Conv2dParam)},
  { 79, -1, sizeof(DropoutParam)},
  { 84, -1, sizeof(MatMulParam)},
  { 90, -1, sizeof(ReluParam)},
  { 95, -1, sizeof(ReduceParam)},
  { 101, -1, sizeof(SnapshotParam)},
  { 109, -1, sizeof(PlaceHolderParam)},
  { 114, -1, sizeof(VariableParam)},
  { 121, -1, sizeof(LossParam)},
  { 126, -1, sizeof(ReaderParam)},
  { 131, -1, sizeof(MnistReaderParam)},
  { 138, -1, sizeof(CastFloatParam)},
  { 142, -1, sizeof(NodeParam)},
  { 171, -1, sizeof(SquareParam)},
  { 175, -1, sizeof(SoftmaxLossParam)},
  { 181, -1, sizeof(SoftmaxParam)},
  { 187, -1, sizeof(InitFillParam)},
  { 192, -1, sizeof(InitIndexFillParam)},
  { 197, -1, sizeof(InitRandomUniformParam)},
  { 203, -1, sizeof(InitStepParam)},
  { 209, -1, sizeof(InitParam)},
  { 219, -1, sizeof(SGDSolverParam)},
  { 225, -1, sizeof(GainSolverParam)},
  { 235, -1, sizeof(AdaDeltaSolverParam)},
  { 242, -1, sizeof(AdamSolverParam)},
  { 250, -1, sizeof(SolverParam)},
  { 259, -1, sizeof(PhaseParam)},
  { 265, -1, sizeof(GraphParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhaseplexerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccumulatorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrintParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DisplayParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EqualParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BiasAddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransposedConv2dParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Conv2dParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropoutParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MatMulParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReluParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReduceParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaceHolderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariableParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReaderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MnistReaderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastFloatParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SquareParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxLossParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitIndexFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRandomUniformParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitStepParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SGDSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdaDeltaSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdamSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhaseParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GraphParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "deepflow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 39);
}

}  // namespace

void TableStruct::Shutdown() {
  _TensorData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TensorParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PhaseplexerParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AccumulatorParam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PrintParam_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AddParam_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DisplayParam_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _EqualParam_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _BiasAddParam_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PoolingParam_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TransposedConv2dParam_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Conv2dParam_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _DropoutParam_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _MatMulParam_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ReluParam_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ReduceParam_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _SnapshotParam_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _PlaceHolderParam_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _VariableParam_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _LossParam_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ReaderParam_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _MnistReaderParam_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CastFloatParam_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _NodeParam_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SquareParam_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SoftmaxLossParam_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SoftmaxParam_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _InitFillParam_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _InitIndexFillParam_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _InitRandomUniformParam_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _InitStepParam_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _InitParam_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SGDSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _GainSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _AdaDeltaSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _AdamSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _SolverParam_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _PhaseParam_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _GraphParam_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TensorData_default_instance_.DefaultConstruct();
  _TensorParam_default_instance_.DefaultConstruct();
  _PhaseplexerParam_default_instance_.DefaultConstruct();
  _AccumulatorParam_default_instance_.DefaultConstruct();
  _PrintParam_default_instance_.DefaultConstruct();
  _AddParam_default_instance_.DefaultConstruct();
  _DisplayParam_default_instance_.DefaultConstruct();
  _EqualParam_default_instance_.DefaultConstruct();
  _BiasAddParam_default_instance_.DefaultConstruct();
  _PoolingParam_default_instance_.DefaultConstruct();
  _TransposedConv2dParam_default_instance_.DefaultConstruct();
  _Conv2dParam_default_instance_.DefaultConstruct();
  _DropoutParam_default_instance_.DefaultConstruct();
  _MatMulParam_default_instance_.DefaultConstruct();
  _ReluParam_default_instance_.DefaultConstruct();
  _ReduceParam_default_instance_.DefaultConstruct();
  _SnapshotParam_default_instance_.DefaultConstruct();
  _PlaceHolderParam_default_instance_.DefaultConstruct();
  _VariableParam_default_instance_.DefaultConstruct();
  _LossParam_default_instance_.DefaultConstruct();
  _ReaderParam_default_instance_.DefaultConstruct();
  _MnistReaderParam_default_instance_.DefaultConstruct();
  _CastFloatParam_default_instance_.DefaultConstruct();
  _NodeParam_default_instance_.DefaultConstruct();
  _SquareParam_default_instance_.DefaultConstruct();
  _SoftmaxLossParam_default_instance_.DefaultConstruct();
  _SoftmaxParam_default_instance_.DefaultConstruct();
  _InitFillParam_default_instance_.DefaultConstruct();
  _InitIndexFillParam_default_instance_.DefaultConstruct();
  _InitRandomUniformParam_default_instance_.DefaultConstruct();
  _InitStepParam_default_instance_.DefaultConstruct();
  _InitParam_default_instance_.DefaultConstruct();
  _SGDSolverParam_default_instance_.DefaultConstruct();
  _GainSolverParam_default_instance_.DefaultConstruct();
  _AdaDeltaSolverParam_default_instance_.DefaultConstruct();
  _AdamSolverParam_default_instance_.DefaultConstruct();
  _SolverParam_default_instance_.DefaultConstruct();
  _PhaseParam_default_instance_.DefaultConstruct();
  _GraphParam_default_instance_.DefaultConstruct();
  _TransposedConv2dParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::TensorParam*>(
      ::TensorParam::internal_default_instance());
  _PlaceHolderParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::TensorParam*>(
      ::TensorParam::internal_default_instance());
  _VariableParam_default_instance_.get_mutable()->init_param_ = const_cast< ::InitParam*>(
      ::InitParam::internal_default_instance());
  _VariableParam_default_instance_.get_mutable()->weights_ = const_cast< ::TensorData*>(
      ::TensorData::internal_default_instance());
  _LossParam_default_instance_.get_mutable()->softmax_loss_param_ = const_cast< ::SoftmaxLossParam*>(
      ::SoftmaxLossParam::internal_default_instance());
  _ReaderParam_default_instance_.get_mutable()->mnist_param_ = const_cast< ::MnistReaderParam*>(
      ::MnistReaderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->loss_param_ = const_cast< ::LossParam*>(
      ::LossParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->reader_param_ = const_cast< ::ReaderParam*>(
      ::ReaderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->variable_param_ = const_cast< ::VariableParam*>(
      ::VariableParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->place_holder_param_ = const_cast< ::PlaceHolderParam*>(
      ::PlaceHolderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->phaseplexer_param_ = const_cast< ::PhaseplexerParam*>(
      ::PhaseplexerParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->add_param_ = const_cast< ::AddParam*>(
      ::AddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->bias_add_param_ = const_cast< ::BiasAddParam*>(
      ::BiasAddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->conv_2d_param_ = const_cast< ::Conv2dParam*>(
      ::Conv2dParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->transposed_conv_2d_param_ = const_cast< ::TransposedConv2dParam*>(
      ::TransposedConv2dParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->dropout_param_ = const_cast< ::DropoutParam*>(
      ::DropoutParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->relu_param_ = const_cast< ::ReluParam*>(
      ::ReluParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->softmax_param_ = const_cast< ::SoftmaxParam*>(
      ::SoftmaxParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->square_param_ = const_cast< ::SquareParam*>(
      ::SquareParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->matmul_param_ = const_cast< ::MatMulParam*>(
      ::MatMulParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->pooling_param_ = const_cast< ::PoolingParam*>(
      ::PoolingParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->reduce_param_ = const_cast< ::ReduceParam*>(
      ::ReduceParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->equal_param_ = const_cast< ::EqualParam*>(
      ::EqualParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->print_param_ = const_cast< ::PrintParam*>(
      ::PrintParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->cast_float_param_ = const_cast< ::CastFloatParam*>(
      ::CastFloatParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->accumulator_param_ = const_cast< ::AccumulatorParam*>(
      ::AccumulatorParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->display_param_ = const_cast< ::DisplayParam*>(
      ::DisplayParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::TensorParam*>(
      ::TensorParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->init_data_ = const_cast< ::TensorData*>(
      ::TensorData::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->fill_param_ = const_cast< ::InitFillParam*>(
      ::InitFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->index_fill_param_ = const_cast< ::InitIndexFillParam*>(
      ::InitIndexFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->random_uniform_param_ = const_cast< ::InitRandomUniformParam*>(
      ::InitRandomUniformParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->step_param_ = const_cast< ::InitStepParam*>(
      ::InitStepParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->sgd_solver_ = const_cast< ::SGDSolverParam*>(
      ::SGDSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->gain_solver_ = const_cast< ::GainSolverParam*>(
      ::GainSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->adam_solver_ = const_cast< ::AdamSolverParam*>(
      ::AdamSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->adadelta_solver_ = const_cast< ::AdaDeltaSolverParam*>(
      ::AdaDeltaSolverParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016deepflow.proto\"\034\n\nTensorData\022\016\n\006weight"
      "\030\001 \003(\002\"\222\001\n\013TensorParam\022%\n\004type\030\001 \001(\0162\027.T"
      "ensorParam.TensorType\022\014\n\004dims\030\002 \003(\005\"N\n\nT"
      "ensorType\022\t\n\005FLOAT\020\000\022\n\n\006DOUBLE\020\001\022\010\n\004HALF"
      "\020\002\022\010\n\004INT8\020\003\022\t\n\005INT32\020\004\022\n\n\006INT8x4\020\005\"!\n\020P"
      "haseplexerParam\022\r\n\005phase\030\001 \003(\t\"m\n\020Accumu"
      "latorParam\022/\n\nreset_time\030\001 \001(\0162\033.Accumul"
      "atorParam.ResetTime\"(\n\tResetTime\022\020\n\014END_"
      "OF_EPOCH\020\000\022\t\n\005NEVER\020\001\"\332\001\n\nPrintParam\022\022\n\n"
      "num_inputs\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022)\n\npri"
      "nt_time\030\003 \001(\0162\025.PrintParam.PrintTime\022)\n\n"
      "print_type\030\004 \001(\0162\025.PrintParam.PrintType\""
      "-\n\tPrintTime\022\016\n\nEVERY_PASS\020\000\022\020\n\014END_OF_E"
      "POCH\020\001\"\"\n\tPrintType\022\n\n\006VALUES\020\000\022\t\n\005DIFFS"
      "\020\001\"\'\n\010AddParam\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 "
      "\001(\002\"\"\n\014DisplayParam\022\022\n\ndelay_msec\030\001 \001(\005\""
      "\014\n\nEqualParam\"\016\n\014BiasAddParam\"t\n\014Pooling"
      "Param\022\020\n\010window_h\030\001 \001(\005\022\020\n\010window_w\030\002 \001("
      "\005\022\r\n\005h_pad\030\003 \001(\005\022\r\n\005v_pad\030\004 \001(\005\022\020\n\010h_str"
      "ide\030\005 \001(\005\022\020\n\010v_stride\030\006 \001(\005\"\227\001\n\025Transpos"
      "edConv2dParam\022\"\n\014tensor_param\030\001 \001(\0132\014.Te"
      "nsorParam\022\r\n\005pad_h\030\002 \001(\005\022\r\n\005pad_w\030\003 \001(\005\022"
      "\t\n\001u\030\004 \001(\005\022\t\n\001v\030\005 \001(\005\022\022\n\ndilation_h\030\006 \001("
      "\005\022\022\n\ndilation_w\030\007 \001(\005\"i\n\013Conv2dParam\022\r\n\005"
      "pad_h\030\001 \001(\005\022\r\n\005pad_w\030\002 \001(\005\022\t\n\001u\030\003 \001(\005\022\t\n"
      "\001v\030\004 \001(\005\022\022\n\ndilation_h\030\005 \001(\005\022\022\n\ndilation"
      "_w\030\006 \001(\005\"\037\n\014DropoutParam\022\017\n\007dropout\030\001 \001("
      "\002\"*\n\013MatMulParam\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030"
      "\002 \001(\002\"#\n\tReluParam\022\026\n\016negative_slope\030\001 \001"
      "(\002\"\244\001\n\013ReduceParam\022(\n\treduce_op\030\001 \001(\0162\025."
      "ReduceParam.ReduceOp\022\022\n\nreduce_dim\030\002 \001(\005"
      "\"W\n\010ReduceOp\022\007\n\003ADD\020\000\022\007\n\003MUL\020\001\022\007\n\003MIN\020\002\022"
      "\007\n\003MAX\020\003\022\010\n\004AMAX\020\004\022\007\n\003AVG\020\005\022\t\n\005NORM1\020\006\022\t"
      "\n\005NORM2\020\007\"v\n\rSnapshotParam\022\031\n\021snapshot_i"
      "nterval\030\001 \001(\005\022\027\n\017snapshot_prefix\030\002 \001(\t\022\030"
      "\n\020per_image_height\030\003 \001(\005\022\027\n\017per_image_wi"
      "dth\030\004 \001(\005\"6\n\020PlaceHolderParam\022\"\n\014tensor_"
      "param\030\001 \001(\0132\014.TensorParam\"b\n\rVariablePar"
      "am\022\036\n\ninit_param\030\001 \001(\0132\n.InitParam\022\023\n\013so"
      "lver_name\030\002 \001(\t\022\034\n\007weights\030\003 \001(\0132\013.Tenso"
      "rData\":\n\tLossParam\022-\n\022softmax_loss_param"
      "\030\001 \001(\0132\021.SoftmaxLossParam\"5\n\013ReaderParam"
      "\022&\n\013mnist_param\030\001 \001(\0132\021.MnistReaderParam"
      "\"\212\001\n\020MnistReaderParam\022\023\n\013folder_path\030\001 \001"
      "(\t\022\022\n\nbatch_size\030\002 \001(\005\022*\n\004type\030\003 \001(\0162\034.M"
      "nistReaderParam.ReaderType\"!\n\nReaderType"
      "\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001\"\020\n\016CastFloatParam\""
      "\365\006\n\tNodeParam\022\014\n\004name\030\001 \001(\t\022\r\n\005input\030\002 \003"
      "(\t\022\016\n\006output\030\003 \003(\t\022\r\n\005phase\030\004 \003(\t\022\036\n\nlos"
      "s_param\0302 \001(\0132\n.LossParam\022\"\n\014reader_para"
      "m\0303 \001(\0132\014.ReaderParam\022&\n\016variable_param\030"
      "d \001(\0132\016.VariableParam\022-\n\022place_holder_pa"
      "ram\030e \001(\0132\021.PlaceHolderParam\022,\n\021phaseple"
      "xer_param\030f \001(\0132\021.PhaseplexerParam\022\034\n\tad"
      "d_param\030g \001(\0132\t.AddParam\022%\n\016bias_add_par"
      "am\030h \001(\0132\r.BiasAddParam\022#\n\rconv_2d_param"
      "\030i \001(\0132\014.Conv2dParam\0228\n\030transposed_conv_"
      "2d_param\030j \001(\0132\026.TransposedConv2dParam\022$"
      "\n\rdropout_param\030k \001(\0132\r.DropoutParam\022\036\n\n"
      "relu_param\030l \001(\0132\n.ReluParam\022$\n\rsoftmax_"
      "param\030m \001(\0132\r.SoftmaxParam\022\"\n\014square_par"
      "am\030n \001(\0132\014.SquareParam\022\"\n\014matmul_param\030o"
      " \001(\0132\014.MatMulParam\022$\n\rpooling_param\030p \001("
      "\0132\r.PoolingParam\022\"\n\014reduce_param\030q \001(\0132\014"
      ".ReduceParam\022 \n\013equal_param\030r \001(\0132\013.Equa"
      "lParam\022 \n\013print_param\030s \001(\0132\013.PrintParam"
      "\022)\n\020cast_float_param\030t \001(\0132\017.CastFloatPa"
      "ram\022,\n\021accumulator_param\030u \001(\0132\021.Accumul"
      "atorParam\022$\n\rdisplay_param\030v \001(\0132\r.Displ"
      "ayParam\"\r\n\013SquareParam\"/\n\020SoftmaxLossPar"
      "am\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"+\n\014Softm"
      "axParam\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"\036\n\r"
      "InitFillParam\022\r\n\005value\030\001 \001(\002\"$\n\022InitInde"
      "xFillParam\022\016\n\006offset\030\001 \001(\002\"2\n\026InitRandom"
      "UniformParam\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\")"
      "\n\rInitStepParam\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001("
      "\002\"\375\001\n\tInitParam\022\"\n\014tensor_param\030\001 \001(\0132\014."
      "TensorParam\022\036\n\tinit_data\030\002 \001(\0132\013.TensorD"
      "ata\022\"\n\nfill_param\030\003 \001(\0132\016.InitFillParam\022"
      "-\n\020index_fill_param\030\004 \001(\0132\023.InitIndexFil"
      "lParam\0225\n\024random_uniform_param\030\005 \001(\0132\027.I"
      "nitRandomUniformParam\022\"\n\nstep_param\030\006 \001("
      "\0132\016.InitStepParam\"9\n\016SGDSolverParam\022\025\n\rl"
      "earning_rate\030\001 \001(\002\022\020\n\010momentum\030\002 \001(\002\"\204\001\n"
      "\017GainSolverParam\022\025\n\rlearning_rate\030\001 \001(\002\022"
      "\020\n\010momentum\030\002 \001(\002\022\020\n\010max_gain\030\003 \001(\002\022\020\n\010m"
      "in_gain\030\004 \001(\002\022\021\n\tgain_plus\030\005 \001(\002\022\021\n\tgain"
      "_mult\030\006 \001(\002\"M\n\023AdaDeltaSolverParam\022\025\n\rle"
      "arning_rate\030\001 \001(\002\022\020\n\010momentum\030\002 \001(\002\022\r\n\005d"
      "elta\030\003 \001(\002\"S\n\017AdamSolverParam\022\025\n\rlearnin"
      "g_rate\030\001 \001(\002\022\r\n\005beta1\030\002 \001(\002\022\r\n\005beta2\030\003 \001"
      "(\002\022\013\n\003eps\030\004 \001(\002\"\275\001\n\013SolverParam\022\014\n\004name\030"
      "\001 \001(\t\022#\n\nsgd_solver\030\002 \001(\0132\017.SGDSolverPar"
      "am\022%\n\013gain_solver\030\003 \001(\0132\020.GainSolverPara"
      "m\022%\n\013adam_solver\030\004 \001(\0132\020.AdamSolverParam"
      "\022-\n\017adadelta_solver\030\005 \001(\0132\024.AdaDeltaSolv"
      "erParam\"\206\001\n\nPhaseParam\022\r\n\005phase\030\001 \001(\t\022-\n"
      "\tbehaviour\030\002 \001(\0162\032.PhaseParam.PhaseBehav"
      "iour\":\n\016PhaseBehaviour\022\t\n\005TRAIN\020\000\022\016\n\nVAL"
      "IDATION\020\001\022\r\n\tINFERENCE\020\002\"`\n\nGraphParam\022\030"
      "\n\004node\030\001 \003(\0132\n.NodeParam\022\034\n\006solver\030\002 \003(\013"
      "2\014.SolverParam\022\032\n\005phase\030\003 \003(\0132\013.PhasePar"
      "amb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deepflow.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_deepflow_2eproto

const ::google::protobuf::EnumDescriptor* TensorParam_TensorType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[0];
}
bool TensorParam_TensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorParam_TensorType TensorParam::FLOAT;
const TensorParam_TensorType TensorParam::DOUBLE;
const TensorParam_TensorType TensorParam::HALF;
const TensorParam_TensorType TensorParam::INT8;
const TensorParam_TensorType TensorParam::INT32;
const TensorParam_TensorType TensorParam::INT8x4;
const TensorParam_TensorType TensorParam::TensorType_MIN;
const TensorParam_TensorType TensorParam::TensorType_MAX;
const int TensorParam::TensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AccumulatorParam_ResetTime_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[1];
}
bool AccumulatorParam_ResetTime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AccumulatorParam_ResetTime AccumulatorParam::END_OF_EPOCH;
const AccumulatorParam_ResetTime AccumulatorParam::NEVER;
const AccumulatorParam_ResetTime AccumulatorParam::ResetTime_MIN;
const AccumulatorParam_ResetTime AccumulatorParam::ResetTime_MAX;
const int AccumulatorParam::ResetTime_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PrintParam_PrintTime_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[2];
}
bool PrintParam_PrintTime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PrintParam_PrintTime PrintParam::EVERY_PASS;
const PrintParam_PrintTime PrintParam::END_OF_EPOCH;
const PrintParam_PrintTime PrintParam::PrintTime_MIN;
const PrintParam_PrintTime PrintParam::PrintTime_MAX;
const int PrintParam::PrintTime_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PrintParam_PrintType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[3];
}
bool PrintParam_PrintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PrintParam_PrintType PrintParam::VALUES;
const PrintParam_PrintType PrintParam::DIFFS;
const PrintParam_PrintType PrintParam::PrintType_MIN;
const PrintParam_PrintType PrintParam::PrintType_MAX;
const int PrintParam::PrintType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReduceParam_ReduceOp_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[4];
}
bool ReduceParam_ReduceOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReduceParam_ReduceOp ReduceParam::ADD;
const ReduceParam_ReduceOp ReduceParam::MUL;
const ReduceParam_ReduceOp ReduceParam::MIN;
const ReduceParam_ReduceOp ReduceParam::MAX;
const ReduceParam_ReduceOp ReduceParam::AMAX;
const ReduceParam_ReduceOp ReduceParam::AVG;
const ReduceParam_ReduceOp ReduceParam::NORM1;
const ReduceParam_ReduceOp ReduceParam::NORM2;
const ReduceParam_ReduceOp ReduceParam::ReduceOp_MIN;
const ReduceParam_ReduceOp ReduceParam::ReduceOp_MAX;
const int ReduceParam::ReduceOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MnistReaderParam_ReaderType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[5];
}
bool MnistReaderParam_ReaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MnistReaderParam_ReaderType MnistReaderParam::TRAIN;
const MnistReaderParam_ReaderType MnistReaderParam::TEST;
const MnistReaderParam_ReaderType MnistReaderParam::ReaderType_MIN;
const MnistReaderParam_ReaderType MnistReaderParam::ReaderType_MAX;
const int MnistReaderParam::ReaderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PhaseParam_PhaseBehaviour_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[6];
}
bool PhaseParam_PhaseBehaviour_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PhaseParam_PhaseBehaviour PhaseParam::TRAIN;
const PhaseParam_PhaseBehaviour PhaseParam::VALIDATION;
const PhaseParam_PhaseBehaviour PhaseParam::INFERENCE;
const PhaseParam_PhaseBehaviour PhaseParam::PhaseBehaviour_MIN;
const PhaseParam_PhaseBehaviour PhaseParam::PhaseBehaviour_MAX;
const int PhaseParam::PhaseBehaviour_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorData::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorData::TensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorData)
}
TensorData::TensorData(const TensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weight_(from.weight_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TensorData)
}

void TensorData::SharedCtor() {
  _cached_size_ = 0;
}

TensorData::~TensorData() {
  // @@protoc_insertion_point(destructor:TensorData)
  SharedDtor();
}

void TensorData::SharedDtor() {
}

void TensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorData::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[0].descriptor;
}

const TensorData& TensorData::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorData* TensorData::New(::google::protobuf::Arena* arena) const {
  TensorData* n = new TensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorData)
  weight_.Clear();
}

bool TensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TensorData)
  return false;
#undef DO_
}

void TensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TensorData)
  // repeated float weight = 1;
  if (this->weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->weight().data(), this->weight_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:TensorData)
}

::google::protobuf::uint8* TensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TensorData)
  // repeated float weight = 1;
  if (this->weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _weight_cached_byte_size_, target);
  }
  for (int i = 0, n = this->weight_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->weight(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TensorData)
  return target;
}

size_t TensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorData)
  size_t total_size = 0;

  // repeated float weight = 1;
  {
    unsigned int count = this->weight_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weight_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TensorData)
    MergeFrom(*source);
  }
}

void TensorData::MergeFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_.MergeFrom(from.weight_);
}

void TensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorData::CopyFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorData::IsInitialized() const {
  return true;
}

void TensorData::Swap(TensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorData::InternalSwap(TensorData* other) {
  weight_.UnsafeArenaSwap(&other->weight_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorData::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorData

// repeated float weight = 1;
int TensorData::weight_size() const {
  return weight_.size();
}
void TensorData::clear_weight() {
  weight_.Clear();
}
float TensorData::weight(int index) const {
  // @@protoc_insertion_point(field_get:TensorData.weight)
  return weight_.Get(index);
}
void TensorData::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorData.weight)
}
void TensorData::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:TensorData.weight)
}
const ::google::protobuf::RepeatedField< float >&
TensorData::weight() const {
  // @@protoc_insertion_point(field_list:TensorData.weight)
  return weight_;
}
::google::protobuf::RepeatedField< float >*
TensorData::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:TensorData.weight)
  return &weight_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorParam::kTypeFieldNumber;
const int TensorParam::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorParam::TensorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorParam)
}
TensorParam::TensorParam(const TensorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dims_(from.dims_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:TensorParam)
}

void TensorParam::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

TensorParam::~TensorParam() {
  // @@protoc_insertion_point(destructor:TensorParam)
  SharedDtor();
}

void TensorParam::SharedDtor() {
}

void TensorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[1].descriptor;
}

const TensorParam& TensorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorParam* TensorParam::New(::google::protobuf::Arena* arena) const {
  TensorParam* n = new TensorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorParam)
  dims_.Clear();
  type_ = 0;
}

bool TensorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TensorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam.TensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TensorParam_TensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dims = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TensorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TensorParam)
  return false;
#undef DO_
}

void TensorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TensorParam)
  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dims(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TensorParam)
}

::google::protobuf::uint8* TensorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TensorParam)
  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dims_cached_byte_size_, target);
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dims(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TensorParam)
  return target;
}

size_t TensorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorParam)
  size_t total_size = 0;

  // repeated int32 dims = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TensorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TensorParam)
    MergeFrom(*source);
  }
}

void TensorParam::MergeFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dims_.MergeFrom(from.dims_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TensorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorParam::CopyFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParam::IsInitialized() const {
  return true;
}

void TensorParam::Swap(TensorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorParam::InternalSwap(TensorParam* other) {
  dims_.UnsafeArenaSwap(&other->dims_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorParam

// .TensorParam.TensorType type = 1;
void TensorParam::clear_type() {
  type_ = 0;
}
::TensorParam_TensorType TensorParam::type() const {
  // @@protoc_insertion_point(field_get:TensorParam.type)
  return static_cast< ::TensorParam_TensorType >(type_);
}
void TensorParam::set_type(::TensorParam_TensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TensorParam.type)
}

// repeated int32 dims = 2;
int TensorParam::dims_size() const {
  return dims_.size();
}
void TensorParam::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int32 TensorParam::dims(int index) const {
  // @@protoc_insertion_point(field_get:TensorParam.dims)
  return dims_.Get(index);
}
void TensorParam::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorParam.dims)
}
void TensorParam::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:TensorParam.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorParam::dims() const {
  // @@protoc_insertion_point(field_list:TensorParam.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorParam::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:TensorParam.dims)
  return &dims_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseplexerParam::kPhaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseplexerParam::PhaseplexerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhaseplexerParam)
}
PhaseplexerParam::PhaseplexerParam(const PhaseplexerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phase_(from.phase_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PhaseplexerParam)
}

void PhaseplexerParam::SharedCtor() {
  _cached_size_ = 0;
}

PhaseplexerParam::~PhaseplexerParam() {
  // @@protoc_insertion_point(destructor:PhaseplexerParam)
  SharedDtor();
}

void PhaseplexerParam::SharedDtor() {
}

void PhaseplexerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhaseplexerParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[2].descriptor;
}

const PhaseplexerParam& PhaseplexerParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhaseplexerParam* PhaseplexerParam::New(::google::protobuf::Arena* arena) const {
  PhaseplexerParam* n = new PhaseplexerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhaseplexerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PhaseplexerParam)
  phase_.Clear();
}

bool PhaseplexerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhaseplexerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase(this->phase_size() - 1).data(),
            this->phase(this->phase_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PhaseplexerParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhaseplexerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhaseplexerParam)
  return false;
#undef DO_
}

void PhaseplexerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhaseplexerParam)
  // repeated string phase = 1;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PhaseplexerParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phase(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PhaseplexerParam)
}

::google::protobuf::uint8* PhaseplexerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhaseplexerParam)
  // repeated string phase = 1;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PhaseplexerParam.phase");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phase(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PhaseplexerParam)
  return target;
}

size_t PhaseplexerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhaseplexerParam)
  size_t total_size = 0;

  // repeated string phase = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phase_size());
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phase(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhaseplexerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhaseplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseplexerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseplexerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhaseplexerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhaseplexerParam)
    MergeFrom(*source);
  }
}

void PhaseplexerParam::MergeFrom(const PhaseplexerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhaseplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_.MergeFrom(from.phase_);
}

void PhaseplexerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhaseplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseplexerParam::CopyFrom(const PhaseplexerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhaseplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseplexerParam::IsInitialized() const {
  return true;
}

void PhaseplexerParam::Swap(PhaseplexerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhaseplexerParam::InternalSwap(PhaseplexerParam* other) {
  phase_.UnsafeArenaSwap(&other->phase_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhaseplexerParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhaseplexerParam

// repeated string phase = 1;
int PhaseplexerParam::phase_size() const {
  return phase_.size();
}
void PhaseplexerParam::clear_phase() {
  phase_.Clear();
}
const ::std::string& PhaseplexerParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:PhaseplexerParam.phase)
  return phase_.Get(index);
}
::std::string* PhaseplexerParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:PhaseplexerParam.phase)
  return phase_.Mutable(index);
}
void PhaseplexerParam::set_phase(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PhaseplexerParam.phase)
  phase_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PhaseplexerParam::set_phase(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PhaseplexerParam.phase)
  phase_.Mutable(index)->assign(std::move(value));
}
#endif
void PhaseplexerParam::set_phase(int index, const char* value) {
  phase_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PhaseplexerParam.phase)
}
void PhaseplexerParam::set_phase(int index, const char* value, size_t size) {
  phase_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PhaseplexerParam.phase)
}
::std::string* PhaseplexerParam::add_phase() {
  // @@protoc_insertion_point(field_add_mutable:PhaseplexerParam.phase)
  return phase_.Add();
}
void PhaseplexerParam::add_phase(const ::std::string& value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PhaseplexerParam.phase)
}
#if LANG_CXX11
void PhaseplexerParam::add_phase(::std::string&& value) {
  phase_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:PhaseplexerParam.phase)
}
#endif
void PhaseplexerParam::add_phase(const char* value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PhaseplexerParam.phase)
}
void PhaseplexerParam::add_phase(const char* value, size_t size) {
  phase_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PhaseplexerParam.phase)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhaseplexerParam::phase() const {
  // @@protoc_insertion_point(field_list:PhaseplexerParam.phase)
  return phase_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PhaseplexerParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:PhaseplexerParam.phase)
  return &phase_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccumulatorParam::kResetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccumulatorParam::AccumulatorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AccumulatorParam)
}
AccumulatorParam::AccumulatorParam(const AccumulatorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reset_time_ = from.reset_time_;
  // @@protoc_insertion_point(copy_constructor:AccumulatorParam)
}

void AccumulatorParam::SharedCtor() {
  reset_time_ = 0;
  _cached_size_ = 0;
}

AccumulatorParam::~AccumulatorParam() {
  // @@protoc_insertion_point(destructor:AccumulatorParam)
  SharedDtor();
}

void AccumulatorParam::SharedDtor() {
}

void AccumulatorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulatorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[3].descriptor;
}

const AccumulatorParam& AccumulatorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccumulatorParam* AccumulatorParam::New(::google::protobuf::Arena* arena) const {
  AccumulatorParam* n = new AccumulatorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccumulatorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:AccumulatorParam)
  reset_time_ = 0;
}

bool AccumulatorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AccumulatorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AccumulatorParam.ResetTime reset_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reset_time(static_cast< ::AccumulatorParam_ResetTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AccumulatorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AccumulatorParam)
  return false;
#undef DO_
}

void AccumulatorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AccumulatorParam)
  // .AccumulatorParam.ResetTime reset_time = 1;
  if (this->reset_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reset_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:AccumulatorParam)
}

::google::protobuf::uint8* AccumulatorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AccumulatorParam)
  // .AccumulatorParam.ResetTime reset_time = 1;
  if (this->reset_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reset_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AccumulatorParam)
  return target;
}

size_t AccumulatorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccumulatorParam)
  size_t total_size = 0;

  // .AccumulatorParam.ResetTime reset_time = 1;
  if (this->reset_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reset_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulatorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AccumulatorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AccumulatorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccumulatorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AccumulatorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AccumulatorParam)
    MergeFrom(*source);
  }
}

void AccumulatorParam::MergeFrom(const AccumulatorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AccumulatorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.reset_time() != 0) {
    set_reset_time(from.reset_time());
  }
}

void AccumulatorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AccumulatorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulatorParam::CopyFrom(const AccumulatorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccumulatorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulatorParam::IsInitialized() const {
  return true;
}

void AccumulatorParam::Swap(AccumulatorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccumulatorParam::InternalSwap(AccumulatorParam* other) {
  std::swap(reset_time_, other->reset_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccumulatorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccumulatorParam

// .AccumulatorParam.ResetTime reset_time = 1;
void AccumulatorParam::clear_reset_time() {
  reset_time_ = 0;
}
::AccumulatorParam_ResetTime AccumulatorParam::reset_time() const {
  // @@protoc_insertion_point(field_get:AccumulatorParam.reset_time)
  return static_cast< ::AccumulatorParam_ResetTime >(reset_time_);
}
void AccumulatorParam::set_reset_time(::AccumulatorParam_ResetTime value) {
  
  reset_time_ = value;
  // @@protoc_insertion_point(field_set:AccumulatorParam.reset_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintParam::kNumInputsFieldNumber;
const int PrintParam::kMessageFieldNumber;
const int PrintParam::kPrintTimeFieldNumber;
const int PrintParam::kPrintTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintParam::PrintParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrintParam)
}
PrintParam::PrintParam(const PrintParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&num_inputs_, &from.num_inputs_,
    reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
  // @@protoc_insertion_point(copy_constructor:PrintParam)
}

void PrintParam::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
  _cached_size_ = 0;
}

PrintParam::~PrintParam() {
  // @@protoc_insertion_point(destructor:PrintParam)
  SharedDtor();
}

void PrintParam::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrintParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[4].descriptor;
}

const PrintParam& PrintParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrintParam* PrintParam::New(::google::protobuf::Arena* arena) const {
  PrintParam* n = new PrintParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrintParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PrintParam)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
}

bool PrintParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrintParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PrintParam.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PrintParam.PrintTime print_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_time(static_cast< ::PrintParam_PrintTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PrintParam.PrintType print_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_type(static_cast< ::PrintParam_PrintType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrintParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrintParam)
  return false;
#undef DO_
}

void PrintParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrintParam)
  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_inputs(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PrintParam.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // .PrintParam.PrintTime print_time = 3;
  if (this->print_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->print_time(), output);
  }

  // .PrintParam.PrintType print_type = 4;
  if (this->print_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->print_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:PrintParam)
}

::google::protobuf::uint8* PrintParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrintParam)
  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_inputs(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PrintParam.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // .PrintParam.PrintTime print_time = 3;
  if (this->print_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->print_time(), target);
  }

  // .PrintParam.PrintType print_type = 4;
  if (this->print_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->print_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PrintParam)
  return target;
}

size_t PrintParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrintParam)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_inputs());
  }

  // .PrintParam.PrintTime print_time = 3;
  if (this->print_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_time());
  }

  // .PrintParam.PrintType print_type = 4;
  if (this->print_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrintParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrintParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrintParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrintParam)
    MergeFrom(*source);
  }
}

void PrintParam::MergeFrom(const PrintParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrintParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.num_inputs() != 0) {
    set_num_inputs(from.num_inputs());
  }
  if (from.print_time() != 0) {
    set_print_time(from.print_time());
  }
  if (from.print_type() != 0) {
    set_print_type(from.print_type());
  }
}

void PrintParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrintParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintParam::CopyFrom(const PrintParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrintParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintParam::IsInitialized() const {
  return true;
}

void PrintParam::Swap(PrintParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintParam::InternalSwap(PrintParam* other) {
  message_.Swap(&other->message_);
  std::swap(num_inputs_, other->num_inputs_);
  std::swap(print_time_, other->print_time_);
  std::swap(print_type_, other->print_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrintParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrintParam

// int32 num_inputs = 1;
void PrintParam::clear_num_inputs() {
  num_inputs_ = 0;
}
::google::protobuf::int32 PrintParam::num_inputs() const {
  // @@protoc_insertion_point(field_get:PrintParam.num_inputs)
  return num_inputs_;
}
void PrintParam::set_num_inputs(::google::protobuf::int32 value) {
  
  num_inputs_ = value;
  // @@protoc_insertion_point(field_set:PrintParam.num_inputs)
}

// string message = 2;
void PrintParam::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrintParam::message() const {
  // @@protoc_insertion_point(field_get:PrintParam.message)
  return message_.GetNoArena();
}
void PrintParam::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrintParam.message)
}
#if LANG_CXX11
void PrintParam::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrintParam.message)
}
#endif
void PrintParam::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrintParam.message)
}
void PrintParam::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrintParam.message)
}
::std::string* PrintParam::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:PrintParam.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrintParam::release_message() {
  // @@protoc_insertion_point(field_release:PrintParam.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrintParam::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:PrintParam.message)
}

// .PrintParam.PrintTime print_time = 3;
void PrintParam::clear_print_time() {
  print_time_ = 0;
}
::PrintParam_PrintTime PrintParam::print_time() const {
  // @@protoc_insertion_point(field_get:PrintParam.print_time)
  return static_cast< ::PrintParam_PrintTime >(print_time_);
}
void PrintParam::set_print_time(::PrintParam_PrintTime value) {
  
  print_time_ = value;
  // @@protoc_insertion_point(field_set:PrintParam.print_time)
}

// .PrintParam.PrintType print_type = 4;
void PrintParam::clear_print_type() {
  print_type_ = 0;
}
::PrintParam_PrintType PrintParam::print_type() const {
  // @@protoc_insertion_point(field_get:PrintParam.print_type)
  return static_cast< ::PrintParam_PrintType >(print_type_);
}
void PrintParam::set_print_type(::PrintParam_PrintType value) {
  
  print_type_ = value;
  // @@protoc_insertion_point(field_set:PrintParam.print_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddParam::kAlphaFieldNumber;
const int AddParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddParam::AddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddParam)
}
AddParam::AddParam(const AddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:AddParam)
}

void AddParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

AddParam::~AddParam() {
  // @@protoc_insertion_point(destructor:AddParam)
  SharedDtor();
}

void AddParam::SharedDtor() {
}

void AddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[5].descriptor;
}

const AddParam& AddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddParam* AddParam::New(::google::protobuf::Arena* arena) const {
  AddParam* n = new AddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:AddParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool AddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddParam)
  return false;
#undef DO_
}

void AddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:AddParam)
}

::google::protobuf::uint8* AddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AddParam)
  return target;
}

size_t AddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddParam)
    MergeFrom(*source);
  }
}

void AddParam::MergeFrom(const AddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void AddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParam::CopyFrom(const AddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParam::IsInitialized() const {
  return true;
}

void AddParam::Swap(AddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddParam::InternalSwap(AddParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddParam

// float alpha = 1;
void AddParam::clear_alpha() {
  alpha_ = 0;
}
float AddParam::alpha() const {
  // @@protoc_insertion_point(field_get:AddParam.alpha)
  return alpha_;
}
void AddParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:AddParam.alpha)
}

// float beta = 2;
void AddParam::clear_beta() {
  beta_ = 0;
}
float AddParam::beta() const {
  // @@protoc_insertion_point(field_get:AddParam.beta)
  return beta_;
}
void AddParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:AddParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplayParam::kDelayMsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisplayParam::DisplayParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DisplayParam)
}
DisplayParam::DisplayParam(const DisplayParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delay_msec_ = from.delay_msec_;
  // @@protoc_insertion_point(copy_constructor:DisplayParam)
}

void DisplayParam::SharedCtor() {
  delay_msec_ = 0;
  _cached_size_ = 0;
}

DisplayParam::~DisplayParam() {
  // @@protoc_insertion_point(destructor:DisplayParam)
  SharedDtor();
}

void DisplayParam::SharedDtor() {
}

void DisplayParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisplayParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[6].descriptor;
}

const DisplayParam& DisplayParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisplayParam* DisplayParam::New(::google::protobuf::Arena* arena) const {
  DisplayParam* n = new DisplayParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisplayParam::Clear() {
// @@protoc_insertion_point(message_clear_start:DisplayParam)
  delay_msec_ = 0;
}

bool DisplayParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DisplayParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 delay_msec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DisplayParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DisplayParam)
  return false;
#undef DO_
}

void DisplayParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DisplayParam)
  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay_msec(), output);
  }

  // @@protoc_insertion_point(serialize_end:DisplayParam)
}

::google::protobuf::uint8* DisplayParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DisplayParam)
  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay_msec(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DisplayParam)
  return target;
}

size_t DisplayParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DisplayParam)
  size_t total_size = 0;

  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay_msec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DisplayParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisplayParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DisplayParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DisplayParam)
    MergeFrom(*source);
  }
}

void DisplayParam::MergeFrom(const DisplayParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DisplayParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.delay_msec() != 0) {
    set_delay_msec(from.delay_msec());
  }
}

void DisplayParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DisplayParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayParam::CopyFrom(const DisplayParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DisplayParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayParam::IsInitialized() const {
  return true;
}

void DisplayParam::Swap(DisplayParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisplayParam::InternalSwap(DisplayParam* other) {
  std::swap(delay_msec_, other->delay_msec_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisplayParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisplayParam

// int32 delay_msec = 1;
void DisplayParam::clear_delay_msec() {
  delay_msec_ = 0;
}
::google::protobuf::int32 DisplayParam::delay_msec() const {
  // @@protoc_insertion_point(field_get:DisplayParam.delay_msec)
  return delay_msec_;
}
void DisplayParam::set_delay_msec(::google::protobuf::int32 value) {
  
  delay_msec_ = value;
  // @@protoc_insertion_point(field_set:DisplayParam.delay_msec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EqualParam::EqualParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EqualParam)
}
EqualParam::EqualParam(const EqualParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EqualParam)
}

void EqualParam::SharedCtor() {
  _cached_size_ = 0;
}

EqualParam::~EqualParam() {
  // @@protoc_insertion_point(destructor:EqualParam)
  SharedDtor();
}

void EqualParam::SharedDtor() {
}

void EqualParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EqualParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[7].descriptor;
}

const EqualParam& EqualParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

EqualParam* EqualParam::New(::google::protobuf::Arena* arena) const {
  EqualParam* n = new EqualParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EqualParam::Clear() {
// @@protoc_insertion_point(message_clear_start:EqualParam)
}

bool EqualParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EqualParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:EqualParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EqualParam)
  return false;
#undef DO_
}

void EqualParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EqualParam)
  // @@protoc_insertion_point(serialize_end:EqualParam)
}

::google::protobuf::uint8* EqualParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EqualParam)
  // @@protoc_insertion_point(serialize_to_array_end:EqualParam)
  return target;
}

size_t EqualParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EqualParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EqualParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EqualParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EqualParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EqualParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EqualParam)
    MergeFrom(*source);
  }
}

void EqualParam::MergeFrom(const EqualParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void EqualParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EqualParam::CopyFrom(const EqualParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualParam::IsInitialized() const {
  return true;
}

void EqualParam::Swap(EqualParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EqualParam::InternalSwap(EqualParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EqualParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EqualParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasAddParam::BiasAddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BiasAddParam)
}
BiasAddParam::BiasAddParam(const BiasAddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BiasAddParam)
}

void BiasAddParam::SharedCtor() {
  _cached_size_ = 0;
}

BiasAddParam::~BiasAddParam() {
  // @@protoc_insertion_point(destructor:BiasAddParam)
  SharedDtor();
}

void BiasAddParam::SharedDtor() {
}

void BiasAddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasAddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[8].descriptor;
}

const BiasAddParam& BiasAddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

BiasAddParam* BiasAddParam::New(::google::protobuf::Arena* arena) const {
  BiasAddParam* n = new BiasAddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasAddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:BiasAddParam)
}

bool BiasAddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BiasAddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:BiasAddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BiasAddParam)
  return false;
#undef DO_
}

void BiasAddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BiasAddParam)
  // @@protoc_insertion_point(serialize_end:BiasAddParam)
}

::google::protobuf::uint8* BiasAddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BiasAddParam)
  // @@protoc_insertion_point(serialize_to_array_end:BiasAddParam)
  return target;
}

size_t BiasAddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BiasAddParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasAddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasAddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasAddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BiasAddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BiasAddParam)
    MergeFrom(*source);
  }
}

void BiasAddParam::MergeFrom(const BiasAddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void BiasAddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasAddParam::CopyFrom(const BiasAddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasAddParam::IsInitialized() const {
  return true;
}

void BiasAddParam::Swap(BiasAddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasAddParam::InternalSwap(BiasAddParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasAddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasAddParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParam::kWindowHFieldNumber;
const int PoolingParam::kWindowWFieldNumber;
const int PoolingParam::kHPadFieldNumber;
const int PoolingParam::kVPadFieldNumber;
const int PoolingParam::kHStrideFieldNumber;
const int PoolingParam::kVStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParam::PoolingParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PoolingParam)
}
PoolingParam::PoolingParam(const PoolingParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&window_h_, &from.window_h_,
    reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  // @@protoc_insertion_point(copy_constructor:PoolingParam)
}

void PoolingParam::SharedCtor() {
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  _cached_size_ = 0;
}

PoolingParam::~PoolingParam() {
  // @@protoc_insertion_point(destructor:PoolingParam)
  SharedDtor();
}

void PoolingParam::SharedDtor() {
}

void PoolingParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[9].descriptor;
}

const PoolingParam& PoolingParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoolingParam* PoolingParam::New(::google::protobuf::Arena* arena) const {
  PoolingParam* n = new PoolingParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PoolingParam)
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
}

bool PoolingParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PoolingParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 window_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 window_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_pad = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_stride = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PoolingParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PoolingParam)
  return false;
#undef DO_
}

void PoolingParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PoolingParam)
  // int32 window_h = 1;
  if (this->window_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_h(), output);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_w(), output);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h_pad(), output);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v_pad(), output);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->h_stride(), output);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->v_stride(), output);
  }

  // @@protoc_insertion_point(serialize_end:PoolingParam)
}

::google::protobuf::uint8* PoolingParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PoolingParam)
  // int32 window_h = 1;
  if (this->window_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_h(), target);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_w(), target);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h_pad(), target);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v_pad(), target);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->h_stride(), target);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->v_stride(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PoolingParam)
  return target;
}

size_t PoolingParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PoolingParam)
  size_t total_size = 0;

  // int32 window_h = 1;
  if (this->window_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_h());
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_w());
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_pad());
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_pad());
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_stride());
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_stride());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PoolingParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PoolingParam)
    MergeFrom(*source);
  }
}

void PoolingParam::MergeFrom(const PoolingParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.window_h() != 0) {
    set_window_h(from.window_h());
  }
  if (from.window_w() != 0) {
    set_window_w(from.window_w());
  }
  if (from.h_pad() != 0) {
    set_h_pad(from.h_pad());
  }
  if (from.v_pad() != 0) {
    set_v_pad(from.v_pad());
  }
  if (from.h_stride() != 0) {
    set_h_stride(from.h_stride());
  }
  if (from.v_stride() != 0) {
    set_v_stride(from.v_stride());
  }
}

void PoolingParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParam::CopyFrom(const PoolingParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParam::IsInitialized() const {
  return true;
}

void PoolingParam::Swap(PoolingParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParam::InternalSwap(PoolingParam* other) {
  std::swap(window_h_, other->window_h_);
  std::swap(window_w_, other->window_w_);
  std::swap(h_pad_, other->h_pad_);
  std::swap(v_pad_, other->v_pad_);
  std::swap(h_stride_, other->h_stride_);
  std::swap(v_stride_, other->v_stride_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParam

// int32 window_h = 1;
void PoolingParam::clear_window_h() {
  window_h_ = 0;
}
::google::protobuf::int32 PoolingParam::window_h() const {
  // @@protoc_insertion_point(field_get:PoolingParam.window_h)
  return window_h_;
}
void PoolingParam::set_window_h(::google::protobuf::int32 value) {
  
  window_h_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.window_h)
}

// int32 window_w = 2;
void PoolingParam::clear_window_w() {
  window_w_ = 0;
}
::google::protobuf::int32 PoolingParam::window_w() const {
  // @@protoc_insertion_point(field_get:PoolingParam.window_w)
  return window_w_;
}
void PoolingParam::set_window_w(::google::protobuf::int32 value) {
  
  window_w_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.window_w)
}

// int32 h_pad = 3;
void PoolingParam::clear_h_pad() {
  h_pad_ = 0;
}
::google::protobuf::int32 PoolingParam::h_pad() const {
  // @@protoc_insertion_point(field_get:PoolingParam.h_pad)
  return h_pad_;
}
void PoolingParam::set_h_pad(::google::protobuf::int32 value) {
  
  h_pad_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.h_pad)
}

// int32 v_pad = 4;
void PoolingParam::clear_v_pad() {
  v_pad_ = 0;
}
::google::protobuf::int32 PoolingParam::v_pad() const {
  // @@protoc_insertion_point(field_get:PoolingParam.v_pad)
  return v_pad_;
}
void PoolingParam::set_v_pad(::google::protobuf::int32 value) {
  
  v_pad_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.v_pad)
}

// int32 h_stride = 5;
void PoolingParam::clear_h_stride() {
  h_stride_ = 0;
}
::google::protobuf::int32 PoolingParam::h_stride() const {
  // @@protoc_insertion_point(field_get:PoolingParam.h_stride)
  return h_stride_;
}
void PoolingParam::set_h_stride(::google::protobuf::int32 value) {
  
  h_stride_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.h_stride)
}

// int32 v_stride = 6;
void PoolingParam::clear_v_stride() {
  v_stride_ = 0;
}
::google::protobuf::int32 PoolingParam::v_stride() const {
  // @@protoc_insertion_point(field_get:PoolingParam.v_stride)
  return v_stride_;
}
void PoolingParam::set_v_stride(::google::protobuf::int32 value) {
  
  v_stride_ = value;
  // @@protoc_insertion_point(field_set:PoolingParam.v_stride)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransposedConv2dParam::kTensorParamFieldNumber;
const int TransposedConv2dParam::kPadHFieldNumber;
const int TransposedConv2dParam::kPadWFieldNumber;
const int TransposedConv2dParam::kUFieldNumber;
const int TransposedConv2dParam::kVFieldNumber;
const int TransposedConv2dParam::kDilationHFieldNumber;
const int TransposedConv2dParam::kDilationWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransposedConv2dParam::TransposedConv2dParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransposedConv2dParam)
}
TransposedConv2dParam::TransposedConv2dParam(const TransposedConv2dParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    tensor_param_ = new ::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  ::memcpy(&pad_h_, &from.pad_h_,
    reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
  // @@protoc_insertion_point(copy_constructor:TransposedConv2dParam)
}

void TransposedConv2dParam::SharedCtor() {
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(dilation_w_));
  _cached_size_ = 0;
}

TransposedConv2dParam::~TransposedConv2dParam() {
  // @@protoc_insertion_point(destructor:TransposedConv2dParam)
  SharedDtor();
}

void TransposedConv2dParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
}

void TransposedConv2dParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransposedConv2dParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[10].descriptor;
}

const TransposedConv2dParam& TransposedConv2dParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransposedConv2dParam* TransposedConv2dParam::New(::google::protobuf::Arena* arena) const {
  TransposedConv2dParam* n = new TransposedConv2dParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransposedConv2dParam::Clear() {
// @@protoc_insertion_point(message_clear_start:TransposedConv2dParam)
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
}

bool TransposedConv2dParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransposedConv2dParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam tensor_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_h = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 u = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_h = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransposedConv2dParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransposedConv2dParam)
  return false;
#undef DO_
}

void TransposedConv2dParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransposedConv2dParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_param_, output);
  }

  // int32 pad_h = 2;
  if (this->pad_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pad_h(), output);
  }

  // int32 pad_w = 3;
  if (this->pad_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pad_w(), output);
  }

  // int32 u = 4;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->u(), output);
  }

  // int32 v = 5;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->v(), output);
  }

  // int32 dilation_h = 6;
  if (this->dilation_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dilation_h(), output);
  }

  // int32 dilation_w = 7;
  if (this->dilation_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dilation_w(), output);
  }

  // @@protoc_insertion_point(serialize_end:TransposedConv2dParam)
}

::google::protobuf::uint8* TransposedConv2dParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransposedConv2dParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_param_, false, target);
  }

  // int32 pad_h = 2;
  if (this->pad_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pad_h(), target);
  }

  // int32 pad_w = 3;
  if (this->pad_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pad_w(), target);
  }

  // int32 u = 4;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->u(), target);
  }

  // int32 v = 5;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->v(), target);
  }

  // int32 dilation_h = 6;
  if (this->dilation_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dilation_h(), target);
  }

  // int32 dilation_w = 7;
  if (this->dilation_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dilation_w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TransposedConv2dParam)
  return target;
}

size_t TransposedConv2dParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransposedConv2dParam)
  size_t total_size = 0;

  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // int32 pad_h = 2;
  if (this->pad_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_h());
  }

  // int32 pad_w = 3;
  if (this->pad_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_w());
  }

  // int32 u = 4;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  // int32 v = 5;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 dilation_h = 6;
  if (this->dilation_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_h());
  }

  // int32 dilation_w = 7;
  if (this->dilation_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_w());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransposedConv2dParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransposedConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TransposedConv2dParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransposedConv2dParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransposedConv2dParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransposedConv2dParam)
    MergeFrom(*source);
  }
}

void TransposedConv2dParam::MergeFrom(const TransposedConv2dParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransposedConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.pad_h() != 0) {
    set_pad_h(from.pad_h());
  }
  if (from.pad_w() != 0) {
    set_pad_w(from.pad_w());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.dilation_h() != 0) {
    set_dilation_h(from.dilation_h());
  }
  if (from.dilation_w() != 0) {
    set_dilation_w(from.dilation_w());
  }
}

void TransposedConv2dParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransposedConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransposedConv2dParam::CopyFrom(const TransposedConv2dParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransposedConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransposedConv2dParam::IsInitialized() const {
  return true;
}

void TransposedConv2dParam::Swap(TransposedConv2dParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransposedConv2dParam::InternalSwap(TransposedConv2dParam* other) {
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(dilation_h_, other->dilation_h_);
  std::swap(dilation_w_, other->dilation_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransposedConv2dParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransposedConv2dParam

// .TensorParam tensor_param = 1;
bool TransposedConv2dParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void TransposedConv2dParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::TensorParam& TransposedConv2dParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::TensorParam::internal_default_instance();
}
::TensorParam* TransposedConv2dParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:TransposedConv2dParam.tensor_param)
  return tensor_param_;
}
::TensorParam* TransposedConv2dParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:TransposedConv2dParam.tensor_param)
  
  ::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void TransposedConv2dParam::set_allocated_tensor_param(::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TransposedConv2dParam.tensor_param)
}

// int32 pad_h = 2;
void TransposedConv2dParam::clear_pad_h() {
  pad_h_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::pad_h() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.pad_h)
  return pad_h_;
}
void TransposedConv2dParam::set_pad_h(::google::protobuf::int32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.pad_h)
}

// int32 pad_w = 3;
void TransposedConv2dParam::clear_pad_w() {
  pad_w_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::pad_w() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.pad_w)
  return pad_w_;
}
void TransposedConv2dParam::set_pad_w(::google::protobuf::int32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.pad_w)
}

// int32 u = 4;
void TransposedConv2dParam::clear_u() {
  u_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::u() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.u)
  return u_;
}
void TransposedConv2dParam::set_u(::google::protobuf::int32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.u)
}

// int32 v = 5;
void TransposedConv2dParam::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::v() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.v)
  return v_;
}
void TransposedConv2dParam::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.v)
}

// int32 dilation_h = 6;
void TransposedConv2dParam::clear_dilation_h() {
  dilation_h_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::dilation_h() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.dilation_h)
  return dilation_h_;
}
void TransposedConv2dParam::set_dilation_h(::google::protobuf::int32 value) {
  
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.dilation_h)
}

// int32 dilation_w = 7;
void TransposedConv2dParam::clear_dilation_w() {
  dilation_w_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::dilation_w() const {
  // @@protoc_insertion_point(field_get:TransposedConv2dParam.dilation_w)
  return dilation_w_;
}
void TransposedConv2dParam::set_dilation_w(::google::protobuf::int32 value) {
  
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:TransposedConv2dParam.dilation_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Conv2dParam::kPadHFieldNumber;
const int Conv2dParam::kPadWFieldNumber;
const int Conv2dParam::kUFieldNumber;
const int Conv2dParam::kVFieldNumber;
const int Conv2dParam::kDilationHFieldNumber;
const int Conv2dParam::kDilationWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Conv2dParam::Conv2dParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Conv2dParam)
}
Conv2dParam::Conv2dParam(const Conv2dParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_h_, &from.pad_h_,
    reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
  // @@protoc_insertion_point(copy_constructor:Conv2dParam)
}

void Conv2dParam::SharedCtor() {
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
  _cached_size_ = 0;
}

Conv2dParam::~Conv2dParam() {
  // @@protoc_insertion_point(destructor:Conv2dParam)
  SharedDtor();
}

void Conv2dParam::SharedDtor() {
}

void Conv2dParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conv2dParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[11].descriptor;
}

const Conv2dParam& Conv2dParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

Conv2dParam* Conv2dParam::New(::google::protobuf::Arena* arena) const {
  Conv2dParam* n = new Conv2dParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Conv2dParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Conv2dParam)
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
}

bool Conv2dParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Conv2dParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pad_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 u = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Conv2dParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Conv2dParam)
  return false;
#undef DO_
}

void Conv2dParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Conv2dParam)
  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pad_h(), output);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pad_w(), output);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->u(), output);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dilation_h(), output);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dilation_w(), output);
  }

  // @@protoc_insertion_point(serialize_end:Conv2dParam)
}

::google::protobuf::uint8* Conv2dParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Conv2dParam)
  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pad_h(), target);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pad_w(), target);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->u(), target);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dilation_h(), target);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dilation_w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Conv2dParam)
  return target;
}

size_t Conv2dParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Conv2dParam)
  size_t total_size = 0;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_h());
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_w());
  }

  // int32 u = 3;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  // int32 v = 4;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_h());
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_w());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conv2dParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Conv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  const Conv2dParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Conv2dParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Conv2dParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Conv2dParam)
    MergeFrom(*source);
  }
}

void Conv2dParam::MergeFrom(const Conv2dParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Conv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pad_h() != 0) {
    set_pad_h(from.pad_h());
  }
  if (from.pad_w() != 0) {
    set_pad_w(from.pad_w());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.dilation_h() != 0) {
    set_dilation_h(from.dilation_h());
  }
  if (from.dilation_w() != 0) {
    set_dilation_w(from.dilation_w());
  }
}

void Conv2dParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Conv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv2dParam::CopyFrom(const Conv2dParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Conv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv2dParam::IsInitialized() const {
  return true;
}

void Conv2dParam::Swap(Conv2dParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conv2dParam::InternalSwap(Conv2dParam* other) {
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(dilation_h_, other->dilation_h_);
  std::swap(dilation_w_, other->dilation_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Conv2dParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Conv2dParam

// int32 pad_h = 1;
void Conv2dParam::clear_pad_h() {
  pad_h_ = 0;
}
::google::protobuf::int32 Conv2dParam::pad_h() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.pad_h)
  return pad_h_;
}
void Conv2dParam::set_pad_h(::google::protobuf::int32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.pad_h)
}

// int32 pad_w = 2;
void Conv2dParam::clear_pad_w() {
  pad_w_ = 0;
}
::google::protobuf::int32 Conv2dParam::pad_w() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.pad_w)
  return pad_w_;
}
void Conv2dParam::set_pad_w(::google::protobuf::int32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.pad_w)
}

// int32 u = 3;
void Conv2dParam::clear_u() {
  u_ = 0;
}
::google::protobuf::int32 Conv2dParam::u() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.u)
  return u_;
}
void Conv2dParam::set_u(::google::protobuf::int32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.u)
}

// int32 v = 4;
void Conv2dParam::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 Conv2dParam::v() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.v)
  return v_;
}
void Conv2dParam::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.v)
}

// int32 dilation_h = 5;
void Conv2dParam::clear_dilation_h() {
  dilation_h_ = 0;
}
::google::protobuf::int32 Conv2dParam::dilation_h() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.dilation_h)
  return dilation_h_;
}
void Conv2dParam::set_dilation_h(::google::protobuf::int32 value) {
  
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.dilation_h)
}

// int32 dilation_w = 6;
void Conv2dParam::clear_dilation_w() {
  dilation_w_ = 0;
}
::google::protobuf::int32 Conv2dParam::dilation_w() const {
  // @@protoc_insertion_point(field_get:Conv2dParam.dilation_w)
  return dilation_w_;
}
void Conv2dParam::set_dilation_w(::google::protobuf::int32 value) {
  
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:Conv2dParam.dilation_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParam::kDropoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParam::DropoutParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DropoutParam)
}
DropoutParam::DropoutParam(const DropoutParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ = from.dropout_;
  // @@protoc_insertion_point(copy_constructor:DropoutParam)
}

void DropoutParam::SharedCtor() {
  dropout_ = 0;
  _cached_size_ = 0;
}

DropoutParam::~DropoutParam() {
  // @@protoc_insertion_point(destructor:DropoutParam)
  SharedDtor();
}

void DropoutParam::SharedDtor() {
}

void DropoutParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[12].descriptor;
}

const DropoutParam& DropoutParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropoutParam* DropoutParam::New(::google::protobuf::Arena* arena) const {
  DropoutParam* n = new DropoutParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:DropoutParam)
  dropout_ = 0;
}

bool DropoutParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DropoutParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dropout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DropoutParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DropoutParam)
  return false;
#undef DO_
}

void DropoutParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DropoutParam)
  // float dropout = 1;
  if (this->dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout(), output);
  }

  // @@protoc_insertion_point(serialize_end:DropoutParam)
}

::google::protobuf::uint8* DropoutParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DropoutParam)
  // float dropout = 1;
  if (this->dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DropoutParam)
  return target;
}

size_t DropoutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DropoutParam)
  size_t total_size = 0;

  // float dropout = 1;
  if (this->dropout() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DropoutParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DropoutParam)
    MergeFrom(*source);
  }
}

void DropoutParam::MergeFrom(const DropoutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dropout() != 0) {
    set_dropout(from.dropout());
  }
}

void DropoutParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParam::CopyFrom(const DropoutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParam::IsInitialized() const {
  return true;
}

void DropoutParam::Swap(DropoutParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParam::InternalSwap(DropoutParam* other) {
  std::swap(dropout_, other->dropout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParam

// float dropout = 1;
void DropoutParam::clear_dropout() {
  dropout_ = 0;
}
float DropoutParam::dropout() const {
  // @@protoc_insertion_point(field_get:DropoutParam.dropout)
  return dropout_;
}
void DropoutParam::set_dropout(float value) {
  
  dropout_ = value;
  // @@protoc_insertion_point(field_set:DropoutParam.dropout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatMulParam::kAlphaFieldNumber;
const int MatMulParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatMulParam::MatMulParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatMulParam)
}
MatMulParam::MatMulParam(const MatMulParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:MatMulParam)
}

void MatMulParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

MatMulParam::~MatMulParam() {
  // @@protoc_insertion_point(destructor:MatMulParam)
  SharedDtor();
}

void MatMulParam::SharedDtor() {
}

void MatMulParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatMulParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[13].descriptor;
}

const MatMulParam& MatMulParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MatMulParam* MatMulParam::New(::google::protobuf::Arena* arena) const {
  MatMulParam* n = new MatMulParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatMulParam::Clear() {
// @@protoc_insertion_point(message_clear_start:MatMulParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool MatMulParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatMulParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatMulParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatMulParam)
  return false;
#undef DO_
}

void MatMulParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatMulParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:MatMulParam)
}

::google::protobuf::uint8* MatMulParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MatMulParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MatMulParam)
  return target;
}

size_t MatMulParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatMulParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatMulParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MatMulParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatMulParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatMulParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatMulParam)
    MergeFrom(*source);
  }
}

void MatMulParam::MergeFrom(const MatMulParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void MatMulParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatMulParam::CopyFrom(const MatMulParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatMulParam::IsInitialized() const {
  return true;
}

void MatMulParam::Swap(MatMulParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatMulParam::InternalSwap(MatMulParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatMulParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatMulParam

// float alpha = 1;
void MatMulParam::clear_alpha() {
  alpha_ = 0;
}
float MatMulParam::alpha() const {
  // @@protoc_insertion_point(field_get:MatMulParam.alpha)
  return alpha_;
}
void MatMulParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:MatMulParam.alpha)
}

// float beta = 2;
void MatMulParam::clear_beta() {
  beta_ = 0;
}
float MatMulParam::beta() const {
  // @@protoc_insertion_point(field_get:MatMulParam.beta)
  return beta_;
}
void MatMulParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:MatMulParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReluParam::kNegativeSlopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReluParam::ReluParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReluParam)
}
ReluParam::ReluParam(const ReluParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_slope_ = from.negative_slope_;
  // @@protoc_insertion_point(copy_constructor:ReluParam)
}

void ReluParam::SharedCtor() {
  negative_slope_ = 0;
  _cached_size_ = 0;
}

ReluParam::~ReluParam() {
  // @@protoc_insertion_point(destructor:ReluParam)
  SharedDtor();
}

void ReluParam::SharedDtor() {
}

void ReluParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReluParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[14].descriptor;
}

const ReluParam& ReluParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReluParam* ReluParam::New(::google::protobuf::Arena* arena) const {
  ReluParam* n = new ReluParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReluParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ReluParam)
  negative_slope_ = 0;
}

bool ReluParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReluParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float negative_slope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReluParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReluParam)
  return false;
#undef DO_
}

void ReluParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReluParam)
  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReluParam)
}

::google::protobuf::uint8* ReluParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReluParam)
  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReluParam)
  return target;
}

size_t ReluParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReluParam)
  size_t total_size = 0;

  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReluParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReluParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReluParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReluParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReluParam)
    MergeFrom(*source);
  }
}

void ReluParam::MergeFrom(const ReluParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.negative_slope() != 0) {
    set_negative_slope(from.negative_slope());
  }
}

void ReluParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReluParam::CopyFrom(const ReluParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReluParam::IsInitialized() const {
  return true;
}

void ReluParam::Swap(ReluParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReluParam::InternalSwap(ReluParam* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReluParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReluParam

// float negative_slope = 1;
void ReluParam::clear_negative_slope() {
  negative_slope_ = 0;
}
float ReluParam::negative_slope() const {
  // @@protoc_insertion_point(field_get:ReluParam.negative_slope)
  return negative_slope_;
}
void ReluParam::set_negative_slope(float value) {
  
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:ReluParam.negative_slope)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReduceParam::kReduceOpFieldNumber;
const int ReduceParam::kReduceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReduceParam::ReduceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReduceParam)
}
ReduceParam::ReduceParam(const ReduceParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reduce_op_, &from.reduce_op_,
    reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
  // @@protoc_insertion_point(copy_constructor:ReduceParam)
}

void ReduceParam::SharedCtor() {
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
  _cached_size_ = 0;
}

ReduceParam::~ReduceParam() {
  // @@protoc_insertion_point(destructor:ReduceParam)
  SharedDtor();
}

void ReduceParam::SharedDtor() {
}

void ReduceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[15].descriptor;
}

const ReduceParam& ReduceParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReduceParam* ReduceParam::New(::google::protobuf::Arena* arena) const {
  ReduceParam* n = new ReduceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReduceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ReduceParam)
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&reduce_dim_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(reduce_dim_));
}

bool ReduceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReduceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ReduceParam.ReduceOp reduce_op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reduce_op(static_cast< ::ReduceParam_ReduceOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reduce_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReduceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReduceParam)
  return false;
#undef DO_
}

void ReduceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReduceParam)
  // .ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reduce_op(), output);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reduce_dim(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReduceParam)
}

::google::protobuf::uint8* ReduceParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReduceParam)
  // .ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reduce_op(), target);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reduce_dim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReduceParam)
  return target;
}

size_t ReduceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReduceParam)
  size_t total_size = 0;

  // .ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reduce_op());
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reduce_dim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReduceParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReduceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReduceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReduceParam)
    MergeFrom(*source);
  }
}

void ReduceParam::MergeFrom(const ReduceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.reduce_op() != 0) {
    set_reduce_op(from.reduce_op());
  }
  if (from.reduce_dim() != 0) {
    set_reduce_dim(from.reduce_dim());
  }
}

void ReduceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceParam::CopyFrom(const ReduceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceParam::IsInitialized() const {
  return true;
}

void ReduceParam::Swap(ReduceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReduceParam::InternalSwap(ReduceParam* other) {
  std::swap(reduce_op_, other->reduce_op_);
  std::swap(reduce_dim_, other->reduce_dim_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReduceParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReduceParam

// .ReduceParam.ReduceOp reduce_op = 1;
void ReduceParam::clear_reduce_op() {
  reduce_op_ = 0;
}
::ReduceParam_ReduceOp ReduceParam::reduce_op() const {
  // @@protoc_insertion_point(field_get:ReduceParam.reduce_op)
  return static_cast< ::ReduceParam_ReduceOp >(reduce_op_);
}
void ReduceParam::set_reduce_op(::ReduceParam_ReduceOp value) {
  
  reduce_op_ = value;
  // @@protoc_insertion_point(field_set:ReduceParam.reduce_op)
}

// int32 reduce_dim = 2;
void ReduceParam::clear_reduce_dim() {
  reduce_dim_ = 0;
}
::google::protobuf::int32 ReduceParam::reduce_dim() const {
  // @@protoc_insertion_point(field_get:ReduceParam.reduce_dim)
  return reduce_dim_;
}
void ReduceParam::set_reduce_dim(::google::protobuf::int32 value) {
  
  reduce_dim_ = value;
  // @@protoc_insertion_point(field_set:ReduceParam.reduce_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotParam::kSnapshotIntervalFieldNumber;
const int SnapshotParam::kSnapshotPrefixFieldNumber;
const int SnapshotParam::kPerImageHeightFieldNumber;
const int SnapshotParam::kPerImageWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotParam::SnapshotParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SnapshotParam)
}
SnapshotParam::SnapshotParam(const SnapshotParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_prefix().size() > 0) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  ::memcpy(&snapshot_interval_, &from.snapshot_interval_,
    reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  // @@protoc_insertion_point(copy_constructor:SnapshotParam)
}

void SnapshotParam::SharedCtor() {
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  _cached_size_ = 0;
}

SnapshotParam::~SnapshotParam() {
  // @@protoc_insertion_point(destructor:SnapshotParam)
  SharedDtor();
}

void SnapshotParam::SharedDtor() {
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[16].descriptor;
}

const SnapshotParam& SnapshotParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotParam* SnapshotParam::New(::google::protobuf::Arena* arena) const {
  SnapshotParam* n = new SnapshotParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SnapshotParam)
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
}

bool SnapshotParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SnapshotParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 snapshot_interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SnapshotParam.snapshot_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SnapshotParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SnapshotParam)
  return false;
#undef DO_
}

void SnapshotParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SnapshotParam)
  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->snapshot_interval(), output);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotParam.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshot_prefix(), output);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->per_image_height(), output);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->per_image_width(), output);
  }

  // @@protoc_insertion_point(serialize_end:SnapshotParam)
}

::google::protobuf::uint8* SnapshotParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SnapshotParam)
  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->snapshot_interval(), target);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SnapshotParam.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshot_prefix(), target);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->per_image_height(), target);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->per_image_width(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SnapshotParam)
  return target;
}

size_t SnapshotParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SnapshotParam)
  size_t total_size = 0;

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_prefix());
  }

  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->snapshot_interval());
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_height());
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SnapshotParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SnapshotParam)
    MergeFrom(*source);
  }
}

void SnapshotParam::MergeFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.snapshot_prefix().size() > 0) {

    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  if (from.snapshot_interval() != 0) {
    set_snapshot_interval(from.snapshot_interval());
  }
  if (from.per_image_height() != 0) {
    set_per_image_height(from.per_image_height());
  }
  if (from.per_image_width() != 0) {
    set_per_image_width(from.per_image_width());
  }
}

void SnapshotParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotParam::CopyFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotParam::IsInitialized() const {
  return true;
}

void SnapshotParam::Swap(SnapshotParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotParam::InternalSwap(SnapshotParam* other) {
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(snapshot_interval_, other->snapshot_interval_);
  std::swap(per_image_height_, other->per_image_height_);
  std::swap(per_image_width_, other->per_image_width_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotParam

// int32 snapshot_interval = 1;
void SnapshotParam::clear_snapshot_interval() {
  snapshot_interval_ = 0;
}
::google::protobuf::int32 SnapshotParam::snapshot_interval() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.snapshot_interval)
  return snapshot_interval_;
}
void SnapshotParam::set_snapshot_interval(::google::protobuf::int32 value) {
  
  snapshot_interval_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.snapshot_interval)
}

// string snapshot_prefix = 2;
void SnapshotParam::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotParam::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SnapshotParam::set_snapshot_prefix(const ::std::string& value) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SnapshotParam.snapshot_prefix)
}
#if LANG_CXX11
void SnapshotParam::set_snapshot_prefix(::std::string&& value) {
  
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SnapshotParam.snapshot_prefix)
}
#endif
void SnapshotParam::set_snapshot_prefix(const char* value) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SnapshotParam.snapshot_prefix)
}
void SnapshotParam::set_snapshot_prefix(const char* value, size_t size) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SnapshotParam.snapshot_prefix)
}
::std::string* SnapshotParam::mutable_snapshot_prefix() {
  
  // @@protoc_insertion_point(field_mutable:SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotParam::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:SnapshotParam.snapshot_prefix)
  
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotParam::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    
  } else {
    
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:SnapshotParam.snapshot_prefix)
}

// int32 per_image_height = 3;
void SnapshotParam::clear_per_image_height() {
  per_image_height_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_height() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.per_image_height)
  return per_image_height_;
}
void SnapshotParam::set_per_image_height(::google::protobuf::int32 value) {
  
  per_image_height_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.per_image_height)
}

// int32 per_image_width = 4;
void SnapshotParam::clear_per_image_width() {
  per_image_width_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_width() const {
  // @@protoc_insertion_point(field_get:SnapshotParam.per_image_width)
  return per_image_width_;
}
void SnapshotParam::set_per_image_width(::google::protobuf::int32 value) {
  
  per_image_width_ = value;
  // @@protoc_insertion_point(field_set:SnapshotParam.per_image_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceHolderParam::kTensorParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceHolderParam::PlaceHolderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaceHolderParam)
}
PlaceHolderParam::PlaceHolderParam(const PlaceHolderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    tensor_param_ = new ::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:PlaceHolderParam)
}

void PlaceHolderParam::SharedCtor() {
  tensor_param_ = NULL;
  _cached_size_ = 0;
}

PlaceHolderParam::~PlaceHolderParam() {
  // @@protoc_insertion_point(destructor:PlaceHolderParam)
  SharedDtor();
}

void PlaceHolderParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
}

void PlaceHolderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceHolderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[17].descriptor;
}

const PlaceHolderParam& PlaceHolderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaceHolderParam* PlaceHolderParam::New(::google::protobuf::Arena* arena) const {
  PlaceHolderParam* n = new PlaceHolderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceHolderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PlaceHolderParam)
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
}

bool PlaceHolderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaceHolderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam tensor_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaceHolderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaceHolderParam)
  return false;
#undef DO_
}

void PlaceHolderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaceHolderParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:PlaceHolderParam)
}

::google::protobuf::uint8* PlaceHolderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlaceHolderParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaceHolderParam)
  return target;
}

size_t PlaceHolderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlaceHolderParam)
  size_t total_size = 0;

  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceHolderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlaceHolderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceHolderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceHolderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlaceHolderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlaceHolderParam)
    MergeFrom(*source);
  }
}

void PlaceHolderParam::MergeFrom(const PlaceHolderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlaceHolderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::TensorParam::MergeFrom(from.tensor_param());
  }
}

void PlaceHolderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlaceHolderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceHolderParam::CopyFrom(const PlaceHolderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlaceHolderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceHolderParam::IsInitialized() const {
  return true;
}

void PlaceHolderParam::Swap(PlaceHolderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceHolderParam::InternalSwap(PlaceHolderParam* other) {
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceHolderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceHolderParam

// .TensorParam tensor_param = 1;
bool PlaceHolderParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void PlaceHolderParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::TensorParam& PlaceHolderParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:PlaceHolderParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::TensorParam::internal_default_instance();
}
::TensorParam* PlaceHolderParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:PlaceHolderParam.tensor_param)
  return tensor_param_;
}
::TensorParam* PlaceHolderParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:PlaceHolderParam.tensor_param)
  
  ::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void PlaceHolderParam::set_allocated_tensor_param(::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlaceHolderParam.tensor_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableParam::kInitParamFieldNumber;
const int VariableParam::kSolverNameFieldNumber;
const int VariableParam::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableParam::VariableParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VariableParam)
}
VariableParam::VariableParam(const VariableParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  solver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.solver_name().size() > 0) {
    solver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_name_);
  }
  if (from.has_init_param()) {
    init_param_ = new ::InitParam(*from.init_param_);
  } else {
    init_param_ = NULL;
  }
  if (from.has_weights()) {
    weights_ = new ::TensorData(*from.weights_);
  } else {
    weights_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:VariableParam)
}

void VariableParam::SharedCtor() {
  solver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&init_param_, 0, reinterpret_cast<char*>(&weights_) -
    reinterpret_cast<char*>(&init_param_) + sizeof(weights_));
  _cached_size_ = 0;
}

VariableParam::~VariableParam() {
  // @@protoc_insertion_point(destructor:VariableParam)
  SharedDtor();
}

void VariableParam::SharedDtor() {
  solver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete init_param_;
  }
  if (this != internal_default_instance()) {
    delete weights_;
  }
}

void VariableParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[18].descriptor;
}

const VariableParam& VariableParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariableParam* VariableParam::New(::google::protobuf::Arena* arena) const {
  VariableParam* n = new VariableParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VariableParam::Clear() {
// @@protoc_insertion_point(message_clear_start:VariableParam)
  solver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && init_param_ != NULL) {
    delete init_param_;
  }
  init_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) {
    delete weights_;
  }
  weights_ = NULL;
}

bool VariableParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VariableParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .InitParam init_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string solver_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->solver_name().data(), this->solver_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VariableParam.solver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TensorData weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VariableParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VariableParam)
  return false;
#undef DO_
}

void VariableParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VariableParam)
  // .InitParam init_param = 1;
  if (this->has_init_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->init_param_, output);
  }

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_name().data(), this->solver_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VariableParam.solver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->solver_name(), output);
  }

  // .TensorData weights = 3;
  if (this->has_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weights_, output);
  }

  // @@protoc_insertion_point(serialize_end:VariableParam)
}

::google::protobuf::uint8* VariableParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VariableParam)
  // .InitParam init_param = 1;
  if (this->has_init_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->init_param_, false, target);
  }

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_name().data(), this->solver_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "VariableParam.solver_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->solver_name(), target);
  }

  // .TensorData weights = 3;
  if (this->has_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weights_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VariableParam)
  return target;
}

size_t VariableParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VariableParam)
  size_t total_size = 0;

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->solver_name());
  }

  // .InitParam init_param = 1;
  if (this->has_init_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_param_);
  }

  // .TensorData weights = 3;
  if (this->has_weights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weights_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VariableParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VariableParam)
    MergeFrom(*source);
  }
}

void VariableParam::MergeFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.solver_name().size() > 0) {

    solver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_name_);
  }
  if (from.has_init_param()) {
    mutable_init_param()->::InitParam::MergeFrom(from.init_param());
  }
  if (from.has_weights()) {
    mutable_weights()->::TensorData::MergeFrom(from.weights());
  }
}

void VariableParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableParam::CopyFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableParam::IsInitialized() const {
  return true;
}

void VariableParam::Swap(VariableParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableParam::InternalSwap(VariableParam* other) {
  solver_name_.Swap(&other->solver_name_);
  std::swap(init_param_, other->init_param_);
  std::swap(weights_, other->weights_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariableParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariableParam

// .InitParam init_param = 1;
bool VariableParam::has_init_param() const {
  return this != internal_default_instance() && init_param_ != NULL;
}
void VariableParam::clear_init_param() {
  if (GetArenaNoVirtual() == NULL && init_param_ != NULL) delete init_param_;
  init_param_ = NULL;
}
const ::InitParam& VariableParam::init_param() const {
  // @@protoc_insertion_point(field_get:VariableParam.init_param)
  return init_param_ != NULL ? *init_param_
                         : *::InitParam::internal_default_instance();
}
::InitParam* VariableParam::mutable_init_param() {
  
  if (init_param_ == NULL) {
    init_param_ = new ::InitParam;
  }
  // @@protoc_insertion_point(field_mutable:VariableParam.init_param)
  return init_param_;
}
::InitParam* VariableParam::release_init_param() {
  // @@protoc_insertion_point(field_release:VariableParam.init_param)
  
  ::InitParam* temp = init_param_;
  init_param_ = NULL;
  return temp;
}
void VariableParam::set_allocated_init_param(::InitParam* init_param) {
  delete init_param_;
  init_param_ = init_param;
  if (init_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VariableParam.init_param)
}

// string solver_name = 2;
void VariableParam::clear_solver_name() {
  solver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VariableParam::solver_name() const {
  // @@protoc_insertion_point(field_get:VariableParam.solver_name)
  return solver_name_.GetNoArena();
}
void VariableParam::set_solver_name(const ::std::string& value) {
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VariableParam.solver_name)
}
#if LANG_CXX11
void VariableParam::set_solver_name(::std::string&& value) {
  
  solver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VariableParam.solver_name)
}
#endif
void VariableParam::set_solver_name(const char* value) {
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VariableParam.solver_name)
}
void VariableParam::set_solver_name(const char* value, size_t size) {
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VariableParam.solver_name)
}
::std::string* VariableParam::mutable_solver_name() {
  
  // @@protoc_insertion_point(field_mutable:VariableParam.solver_name)
  return solver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VariableParam::release_solver_name() {
  // @@protoc_insertion_point(field_release:VariableParam.solver_name)
  
  return solver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariableParam::set_allocated_solver_name(::std::string* solver_name) {
  if (solver_name != NULL) {
    
  } else {
    
  }
  solver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solver_name);
  // @@protoc_insertion_point(field_set_allocated:VariableParam.solver_name)
}

// .TensorData weights = 3;
bool VariableParam::has_weights() const {
  return this != internal_default_instance() && weights_ != NULL;
}
void VariableParam::clear_weights() {
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) delete weights_;
  weights_ = NULL;
}
const ::TensorData& VariableParam::weights() const {
  // @@protoc_insertion_point(field_get:VariableParam.weights)
  return weights_ != NULL ? *weights_
                         : *::TensorData::internal_default_instance();
}
::TensorData* VariableParam::mutable_weights() {
  
  if (weights_ == NULL) {
    weights_ = new ::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:VariableParam.weights)
  return weights_;
}
::TensorData* VariableParam::release_weights() {
  // @@protoc_insertion_point(field_release:VariableParam.weights)
  
  ::TensorData* temp = weights_;
  weights_ = NULL;
  return temp;
}
void VariableParam::set_allocated_weights(::TensorData* weights) {
  delete weights_;
  weights_ = weights;
  if (weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VariableParam.weights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParam::kSoftmaxLossParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParam::LossParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LossParam)
}
LossParam::LossParam(const LossParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_softmax_loss_param()) {
    softmax_loss_param_ = new ::SoftmaxLossParam(*from.softmax_loss_param_);
  } else {
    softmax_loss_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LossParam)
}

void LossParam::SharedCtor() {
  softmax_loss_param_ = NULL;
  _cached_size_ = 0;
}

LossParam::~LossParam() {
  // @@protoc_insertion_point(destructor:LossParam)
  SharedDtor();
}

void LossParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete softmax_loss_param_;
  }
}

void LossParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[19].descriptor;
}

const LossParam& LossParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParam* LossParam::New(::google::protobuf::Arena* arena) const {
  LossParam* n = new LossParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParam::Clear() {
// @@protoc_insertion_point(message_clear_start:LossParam)
  if (GetArenaNoVirtual() == NULL && softmax_loss_param_ != NULL) {
    delete softmax_loss_param_;
  }
  softmax_loss_param_ = NULL;
}

bool LossParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LossParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SoftmaxLossParam softmax_loss_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LossParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LossParam)
  return false;
#undef DO_
}

void LossParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LossParam)
  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->softmax_loss_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:LossParam)
}

::google::protobuf::uint8* LossParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LossParam)
  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->softmax_loss_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LossParam)
  return target;
}

size_t LossParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LossParam)
  size_t total_size = 0;

  // .SoftmaxLossParam softmax_loss_param = 1;
  if (this->has_softmax_loss_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_loss_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LossParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LossParam)
    MergeFrom(*source);
  }
}

void LossParam::MergeFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_softmax_loss_param()) {
    mutable_softmax_loss_param()->::SoftmaxLossParam::MergeFrom(from.softmax_loss_param());
  }
}

void LossParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParam::CopyFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParam::IsInitialized() const {
  return true;
}

void LossParam::Swap(LossParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParam::InternalSwap(LossParam* other) {
  std::swap(softmax_loss_param_, other->softmax_loss_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParam

// .SoftmaxLossParam softmax_loss_param = 1;
bool LossParam::has_softmax_loss_param() const {
  return this != internal_default_instance() && softmax_loss_param_ != NULL;
}
void LossParam::clear_softmax_loss_param() {
  if (GetArenaNoVirtual() == NULL && softmax_loss_param_ != NULL) delete softmax_loss_param_;
  softmax_loss_param_ = NULL;
}
const ::SoftmaxLossParam& LossParam::softmax_loss_param() const {
  // @@protoc_insertion_point(field_get:LossParam.softmax_loss_param)
  return softmax_loss_param_ != NULL ? *softmax_loss_param_
                         : *::SoftmaxLossParam::internal_default_instance();
}
::SoftmaxLossParam* LossParam::mutable_softmax_loss_param() {
  
  if (softmax_loss_param_ == NULL) {
    softmax_loss_param_ = new ::SoftmaxLossParam;
  }
  // @@protoc_insertion_point(field_mutable:LossParam.softmax_loss_param)
  return softmax_loss_param_;
}
::SoftmaxLossParam* LossParam::release_softmax_loss_param() {
  // @@protoc_insertion_point(field_release:LossParam.softmax_loss_param)
  
  ::SoftmaxLossParam* temp = softmax_loss_param_;
  softmax_loss_param_ = NULL;
  return temp;
}
void LossParam::set_allocated_softmax_loss_param(::SoftmaxLossParam* softmax_loss_param) {
  delete softmax_loss_param_;
  softmax_loss_param_ = softmax_loss_param;
  if (softmax_loss_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LossParam.softmax_loss_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReaderParam::kMnistParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReaderParam::ReaderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReaderParam)
}
ReaderParam::ReaderParam(const ReaderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mnist_param()) {
    mnist_param_ = new ::MnistReaderParam(*from.mnist_param_);
  } else {
    mnist_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ReaderParam)
}

void ReaderParam::SharedCtor() {
  mnist_param_ = NULL;
  _cached_size_ = 0;
}

ReaderParam::~ReaderParam() {
  // @@protoc_insertion_point(destructor:ReaderParam)
  SharedDtor();
}

void ReaderParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mnist_param_;
  }
}

void ReaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReaderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[20].descriptor;
}

const ReaderParam& ReaderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReaderParam* ReaderParam::New(::google::protobuf::Arena* arena) const {
  ReaderParam* n = new ReaderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReaderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ReaderParam)
  if (GetArenaNoVirtual() == NULL && mnist_param_ != NULL) {
    delete mnist_param_;
  }
  mnist_param_ = NULL;
}

bool ReaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReaderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MnistReaderParam mnist_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mnist_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReaderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReaderParam)
  return false;
#undef DO_
}

void ReaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReaderParam)
  // .MnistReaderParam mnist_param = 1;
  if (this->has_mnist_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mnist_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:ReaderParam)
}

::google::protobuf::uint8* ReaderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReaderParam)
  // .MnistReaderParam mnist_param = 1;
  if (this->has_mnist_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mnist_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReaderParam)
  return target;
}

size_t ReaderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReaderParam)
  size_t total_size = 0;

  // .MnistReaderParam mnist_param = 1;
  if (this->has_mnist_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mnist_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReaderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReaderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReaderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReaderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReaderParam)
    MergeFrom(*source);
  }
}

void ReaderParam::MergeFrom(const ReaderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mnist_param()) {
    mutable_mnist_param()->::MnistReaderParam::MergeFrom(from.mnist_param());
  }
}

void ReaderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReaderParam::CopyFrom(const ReaderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReaderParam::IsInitialized() const {
  return true;
}

void ReaderParam::Swap(ReaderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReaderParam::InternalSwap(ReaderParam* other) {
  std::swap(mnist_param_, other->mnist_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReaderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReaderParam

// .MnistReaderParam mnist_param = 1;
bool ReaderParam::has_mnist_param() const {
  return this != internal_default_instance() && mnist_param_ != NULL;
}
void ReaderParam::clear_mnist_param() {
  if (GetArenaNoVirtual() == NULL && mnist_param_ != NULL) delete mnist_param_;
  mnist_param_ = NULL;
}
const ::MnistReaderParam& ReaderParam::mnist_param() const {
  // @@protoc_insertion_point(field_get:ReaderParam.mnist_param)
  return mnist_param_ != NULL ? *mnist_param_
                         : *::MnistReaderParam::internal_default_instance();
}
::MnistReaderParam* ReaderParam::mutable_mnist_param() {
  
  if (mnist_param_ == NULL) {
    mnist_param_ = new ::MnistReaderParam;
  }
  // @@protoc_insertion_point(field_mutable:ReaderParam.mnist_param)
  return mnist_param_;
}
::MnistReaderParam* ReaderParam::release_mnist_param() {
  // @@protoc_insertion_point(field_release:ReaderParam.mnist_param)
  
  ::MnistReaderParam* temp = mnist_param_;
  mnist_param_ = NULL;
  return temp;
}
void ReaderParam::set_allocated_mnist_param(::MnistReaderParam* mnist_param) {
  delete mnist_param_;
  mnist_param_ = mnist_param;
  if (mnist_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ReaderParam.mnist_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MnistReaderParam::kFolderPathFieldNumber;
const int MnistReaderParam::kBatchSizeFieldNumber;
const int MnistReaderParam::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MnistReaderParam::MnistReaderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MnistReaderParam)
}
MnistReaderParam::MnistReaderParam(const MnistReaderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_path().size() > 0) {
    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:MnistReaderParam)
}

void MnistReaderParam::SharedCtor() {
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
  _cached_size_ = 0;
}

MnistReaderParam::~MnistReaderParam() {
  // @@protoc_insertion_point(destructor:MnistReaderParam)
  SharedDtor();
}

void MnistReaderParam::SharedDtor() {
  folder_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MnistReaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MnistReaderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[21].descriptor;
}

const MnistReaderParam& MnistReaderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MnistReaderParam* MnistReaderParam::New(::google::protobuf::Arena* arena) const {
  MnistReaderParam* n = new MnistReaderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MnistReaderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:MnistReaderParam)
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(type_));
}

bool MnistReaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MnistReaderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string folder_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_path().data(), this->folder_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MnistReaderParam.folder_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batch_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MnistReaderParam.ReaderType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MnistReaderParam_ReaderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MnistReaderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MnistReaderParam)
  return false;
#undef DO_
}

void MnistReaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MnistReaderParam)
  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MnistReaderParam.folder_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->folder_path(), output);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch_size(), output);
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:MnistReaderParam)
}

::google::protobuf::uint8* MnistReaderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MnistReaderParam)
  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MnistReaderParam.folder_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->folder_path(), target);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch_size(), target);
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MnistReaderParam)
  return target;
}

size_t MnistReaderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MnistReaderParam)
  size_t total_size = 0;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_path());
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  // .MnistReaderParam.ReaderType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MnistReaderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MnistReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MnistReaderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MnistReaderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MnistReaderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MnistReaderParam)
    MergeFrom(*source);
  }
}

void MnistReaderParam::MergeFrom(const MnistReaderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MnistReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.folder_path().size() > 0) {

    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MnistReaderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MnistReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MnistReaderParam::CopyFrom(const MnistReaderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MnistReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MnistReaderParam::IsInitialized() const {
  return true;
}

void MnistReaderParam::Swap(MnistReaderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MnistReaderParam::InternalSwap(MnistReaderParam* other) {
  folder_path_.Swap(&other->folder_path_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MnistReaderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MnistReaderParam

// string folder_path = 1;
void MnistReaderParam::clear_folder_path() {
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MnistReaderParam::folder_path() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.folder_path)
  return folder_path_.GetNoArena();
}
void MnistReaderParam::set_folder_path(const ::std::string& value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MnistReaderParam.folder_path)
}
#if LANG_CXX11
void MnistReaderParam::set_folder_path(::std::string&& value) {
  
  folder_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MnistReaderParam.folder_path)
}
#endif
void MnistReaderParam::set_folder_path(const char* value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MnistReaderParam.folder_path)
}
void MnistReaderParam::set_folder_path(const char* value, size_t size) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MnistReaderParam.folder_path)
}
::std::string* MnistReaderParam::mutable_folder_path() {
  
  // @@protoc_insertion_point(field_mutable:MnistReaderParam.folder_path)
  return folder_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MnistReaderParam::release_folder_path() {
  // @@protoc_insertion_point(field_release:MnistReaderParam.folder_path)
  
  return folder_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MnistReaderParam::set_allocated_folder_path(::std::string* folder_path) {
  if (folder_path != NULL) {
    
  } else {
    
  }
  folder_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_path);
  // @@protoc_insertion_point(field_set_allocated:MnistReaderParam.folder_path)
}

// int32 batch_size = 2;
void MnistReaderParam::clear_batch_size() {
  batch_size_ = 0;
}
::google::protobuf::int32 MnistReaderParam::batch_size() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.batch_size)
  return batch_size_;
}
void MnistReaderParam::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:MnistReaderParam.batch_size)
}

// .MnistReaderParam.ReaderType type = 3;
void MnistReaderParam::clear_type() {
  type_ = 0;
}
::MnistReaderParam_ReaderType MnistReaderParam::type() const {
  // @@protoc_insertion_point(field_get:MnistReaderParam.type)
  return static_cast< ::MnistReaderParam_ReaderType >(type_);
}
void MnistReaderParam::set_type(::MnistReaderParam_ReaderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MnistReaderParam.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastFloatParam::CastFloatParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CastFloatParam)
}
CastFloatParam::CastFloatParam(const CastFloatParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CastFloatParam)
}

void CastFloatParam::SharedCtor() {
  _cached_size_ = 0;
}

CastFloatParam::~CastFloatParam() {
  // @@protoc_insertion_point(destructor:CastFloatParam)
  SharedDtor();
}

void CastFloatParam::SharedDtor() {
}

void CastFloatParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastFloatParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[22].descriptor;
}

const CastFloatParam& CastFloatParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastFloatParam* CastFloatParam::New(::google::protobuf::Arena* arena) const {
  CastFloatParam* n = new CastFloatParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastFloatParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CastFloatParam)
}

bool CastFloatParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CastFloatParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CastFloatParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CastFloatParam)
  return false;
#undef DO_
}

void CastFloatParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CastFloatParam)
  // @@protoc_insertion_point(serialize_end:CastFloatParam)
}

::google::protobuf::uint8* CastFloatParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CastFloatParam)
  // @@protoc_insertion_point(serialize_to_array_end:CastFloatParam)
  return target;
}

size_t CastFloatParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CastFloatParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastFloatParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CastFloatParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CastFloatParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastFloatParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CastFloatParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CastFloatParam)
    MergeFrom(*source);
  }
}

void CastFloatParam::MergeFrom(const CastFloatParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CastFloatParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CastFloatParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CastFloatParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastFloatParam::CopyFrom(const CastFloatParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CastFloatParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastFloatParam::IsInitialized() const {
  return true;
}

void CastFloatParam::Swap(CastFloatParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastFloatParam::InternalSwap(CastFloatParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastFloatParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastFloatParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeParam::kNameFieldNumber;
const int NodeParam::kInputFieldNumber;
const int NodeParam::kOutputFieldNumber;
const int NodeParam::kPhaseFieldNumber;
const int NodeParam::kLossParamFieldNumber;
const int NodeParam::kReaderParamFieldNumber;
const int NodeParam::kVariableParamFieldNumber;
const int NodeParam::kPlaceHolderParamFieldNumber;
const int NodeParam::kPhaseplexerParamFieldNumber;
const int NodeParam::kAddParamFieldNumber;
const int NodeParam::kBiasAddParamFieldNumber;
const int NodeParam::kConv2DParamFieldNumber;
const int NodeParam::kTransposedConv2DParamFieldNumber;
const int NodeParam::kDropoutParamFieldNumber;
const int NodeParam::kReluParamFieldNumber;
const int NodeParam::kSoftmaxParamFieldNumber;
const int NodeParam::kSquareParamFieldNumber;
const int NodeParam::kMatmulParamFieldNumber;
const int NodeParam::kPoolingParamFieldNumber;
const int NodeParam::kReduceParamFieldNumber;
const int NodeParam::kEqualParamFieldNumber;
const int NodeParam::kPrintParamFieldNumber;
const int NodeParam::kCastFloatParamFieldNumber;
const int NodeParam::kAccumulatorParamFieldNumber;
const int NodeParam::kDisplayParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeParam::NodeParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeParam)
}
NodeParam::NodeParam(const NodeParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_(from.input_),
      output_(from.output_),
      phase_(from.phase_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::LossParam(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_reader_param()) {
    reader_param_ = new ::ReaderParam(*from.reader_param_);
  } else {
    reader_param_ = NULL;
  }
  if (from.has_variable_param()) {
    variable_param_ = new ::VariableParam(*from.variable_param_);
  } else {
    variable_param_ = NULL;
  }
  if (from.has_place_holder_param()) {
    place_holder_param_ = new ::PlaceHolderParam(*from.place_holder_param_);
  } else {
    place_holder_param_ = NULL;
  }
  if (from.has_phaseplexer_param()) {
    phaseplexer_param_ = new ::PhaseplexerParam(*from.phaseplexer_param_);
  } else {
    phaseplexer_param_ = NULL;
  }
  if (from.has_add_param()) {
    add_param_ = new ::AddParam(*from.add_param_);
  } else {
    add_param_ = NULL;
  }
  if (from.has_bias_add_param()) {
    bias_add_param_ = new ::BiasAddParam(*from.bias_add_param_);
  } else {
    bias_add_param_ = NULL;
  }
  if (from.has_conv_2d_param()) {
    conv_2d_param_ = new ::Conv2dParam(*from.conv_2d_param_);
  } else {
    conv_2d_param_ = NULL;
  }
  if (from.has_transposed_conv_2d_param()) {
    transposed_conv_2d_param_ = new ::TransposedConv2dParam(*from.transposed_conv_2d_param_);
  } else {
    transposed_conv_2d_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::DropoutParam(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::ReluParam(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::SoftmaxParam(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_square_param()) {
    square_param_ = new ::SquareParam(*from.square_param_);
  } else {
    square_param_ = NULL;
  }
  if (from.has_matmul_param()) {
    matmul_param_ = new ::MatMulParam(*from.matmul_param_);
  } else {
    matmul_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::PoolingParam(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_reduce_param()) {
    reduce_param_ = new ::ReduceParam(*from.reduce_param_);
  } else {
    reduce_param_ = NULL;
  }
  if (from.has_equal_param()) {
    equal_param_ = new ::EqualParam(*from.equal_param_);
  } else {
    equal_param_ = NULL;
  }
  if (from.has_print_param()) {
    print_param_ = new ::PrintParam(*from.print_param_);
  } else {
    print_param_ = NULL;
  }
  if (from.has_cast_float_param()) {
    cast_float_param_ = new ::CastFloatParam(*from.cast_float_param_);
  } else {
    cast_float_param_ = NULL;
  }
  if (from.has_accumulator_param()) {
    accumulator_param_ = new ::AccumulatorParam(*from.accumulator_param_);
  } else {
    accumulator_param_ = NULL;
  }
  if (from.has_display_param()) {
    display_param_ = new ::DisplayParam(*from.display_param_);
  } else {
    display_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NodeParam)
}

void NodeParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&loss_param_, 0, reinterpret_cast<char*>(&display_param_) -
    reinterpret_cast<char*>(&loss_param_) + sizeof(display_param_));
  _cached_size_ = 0;
}

NodeParam::~NodeParam() {
  // @@protoc_insertion_point(destructor:NodeParam)
  SharedDtor();
}

void NodeParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
  if (this != internal_default_instance()) {
    delete reader_param_;
  }
  if (this != internal_default_instance()) {
    delete variable_param_;
  }
  if (this != internal_default_instance()) {
    delete place_holder_param_;
  }
  if (this != internal_default_instance()) {
    delete phaseplexer_param_;
  }
  if (this != internal_default_instance()) {
    delete add_param_;
  }
  if (this != internal_default_instance()) {
    delete bias_add_param_;
  }
  if (this != internal_default_instance()) {
    delete conv_2d_param_;
  }
  if (this != internal_default_instance()) {
    delete transposed_conv_2d_param_;
  }
  if (this != internal_default_instance()) {
    delete dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete relu_param_;
  }
  if (this != internal_default_instance()) {
    delete softmax_param_;
  }
  if (this != internal_default_instance()) {
    delete square_param_;
  }
  if (this != internal_default_instance()) {
    delete matmul_param_;
  }
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete reduce_param_;
  }
  if (this != internal_default_instance()) {
    delete equal_param_;
  }
  if (this != internal_default_instance()) {
    delete print_param_;
  }
  if (this != internal_default_instance()) {
    delete cast_float_param_;
  }
  if (this != internal_default_instance()) {
    delete accumulator_param_;
  }
  if (this != internal_default_instance()) {
    delete display_param_;
  }
}

void NodeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[23].descriptor;
}

const NodeParam& NodeParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeParam* NodeParam::New(::google::protobuf::Arena* arena) const {
  NodeParam* n = new NodeParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeParam)
  input_.Clear();
  output_.Clear();
  phase_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) {
    delete loss_param_;
  }
  loss_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && reader_param_ != NULL) {
    delete reader_param_;
  }
  reader_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) {
    delete variable_param_;
  }
  variable_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && place_holder_param_ != NULL) {
    delete place_holder_param_;
  }
  place_holder_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && phaseplexer_param_ != NULL) {
    delete phaseplexer_param_;
  }
  phaseplexer_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && add_param_ != NULL) {
    delete add_param_;
  }
  add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && bias_add_param_ != NULL) {
    delete bias_add_param_;
  }
  bias_add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && conv_2d_param_ != NULL) {
    delete conv_2d_param_;
  }
  conv_2d_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && transposed_conv_2d_param_ != NULL) {
    delete transposed_conv_2d_param_;
  }
  transposed_conv_2d_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropout_param_ != NULL) {
    delete dropout_param_;
  }
  dropout_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && relu_param_ != NULL) {
    delete relu_param_;
  }
  relu_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) {
    delete softmax_param_;
  }
  softmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && square_param_ != NULL) {
    delete square_param_;
  }
  square_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && matmul_param_ != NULL) {
    delete matmul_param_;
  }
  matmul_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) {
    delete pooling_param_;
  }
  pooling_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && reduce_param_ != NULL) {
    delete reduce_param_;
  }
  reduce_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && equal_param_ != NULL) {
    delete equal_param_;
  }
  equal_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && print_param_ != NULL) {
    delete print_param_;
  }
  print_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && cast_float_param_ != NULL) {
    delete cast_float_param_;
  }
  cast_float_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && accumulator_param_ != NULL) {
    delete accumulator_param_;
  }
  accumulator_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && display_param_ != NULL) {
    delete display_param_;
  }
  display_param_ = NULL;
}

bool NodeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NodeParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NodeParam.input"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NodeParam.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string phase = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase(this->phase_size() - 1).data(),
            this->phase(this->phase_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NodeParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LossParam loss_param = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ReaderParam reader_param = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reader_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VariableParam variable_param = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PlaceHolderParam place_holder_param = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place_holder_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PhaseplexerParam phaseplexer_param = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phaseplexer_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AddParam add_param = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BiasAddParam bias_add_param = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Conv2dParam conv_2d_param = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(842u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransposedConv2dParam transposed_conv_2d_param = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(850u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transposed_conv_2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DropoutParam dropout_param = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(858u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ReluParam relu_param = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(866u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SoftmaxParam softmax_param = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(874u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SquareParam square_param = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(882u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_square_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MatMulParam matmul_param = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(890u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matmul_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PoolingParam pooling_param = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(898u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ReduceParam reduce_param = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(906u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduce_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EqualParam equal_param = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(914u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PrintParam print_param = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(922u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CastFloatParam cast_float_param = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(930u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_float_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AccumulatorParam accumulator_param = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(938u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accumulator_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DisplayParam display_param = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(946u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeParam)
  return false;
#undef DO_
}

void NodeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input = 2;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input(i), output);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->output(i), output);
  }

  // repeated string phase = 4;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phase(i), output);
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->loss_param_, output);
  }

  // .ReaderParam reader_param = 51;
  if (this->has_reader_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->reader_param_, output);
  }

  // .VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->variable_param_, output);
  }

  // .PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->place_holder_param_, output);
  }

  // .PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->phaseplexer_param_, output);
  }

  // .AddParam add_param = 103;
  if (this->has_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->add_param_, output);
  }

  // .BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->bias_add_param_, output);
  }

  // .Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->conv_2d_param_, output);
  }

  // .TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->transposed_conv_2d_param_, output);
  }

  // .DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->dropout_param_, output);
  }

  // .ReluParam relu_param = 108;
  if (this->has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->relu_param_, output);
  }

  // .SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->softmax_param_, output);
  }

  // .SquareParam square_param = 110;
  if (this->has_square_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->square_param_, output);
  }

  // .MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->matmul_param_, output);
  }

  // .PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->pooling_param_, output);
  }

  // .ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->reduce_param_, output);
  }

  // .EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->equal_param_, output);
  }

  // .PrintParam print_param = 115;
  if (this->has_print_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->print_param_, output);
  }

  // .CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->cast_float_param_, output);
  }

  // .AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->accumulator_param_, output);
  }

  // .DisplayParam display_param = 118;
  if (this->has_display_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->display_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:NodeParam)
}

::google::protobuf::uint8* NodeParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NodeParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string input = 2;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->input(i), target);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->output(i), target);
  }

  // repeated string phase = 4;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NodeParam.phase");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->phase(i), target);
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->loss_param_, false, target);
  }

  // .ReaderParam reader_param = 51;
  if (this->has_reader_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->reader_param_, false, target);
  }

  // .VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->variable_param_, false, target);
  }

  // .PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->place_holder_param_, false, target);
  }

  // .PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->phaseplexer_param_, false, target);
  }

  // .AddParam add_param = 103;
  if (this->has_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->add_param_, false, target);
  }

  // .BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->bias_add_param_, false, target);
  }

  // .Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->conv_2d_param_, false, target);
  }

  // .TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->transposed_conv_2d_param_, false, target);
  }

  // .DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->dropout_param_, false, target);
  }

  // .ReluParam relu_param = 108;
  if (this->has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *this->relu_param_, false, target);
  }

  // .SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        109, *this->softmax_param_, false, target);
  }

  // .SquareParam square_param = 110;
  if (this->has_square_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        110, *this->square_param_, false, target);
  }

  // .MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        111, *this->matmul_param_, false, target);
  }

  // .PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->pooling_param_, false, target);
  }

  // .ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->reduce_param_, false, target);
  }

  // .EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        114, *this->equal_param_, false, target);
  }

  // .PrintParam print_param = 115;
  if (this->has_print_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        115, *this->print_param_, false, target);
  }

  // .CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        116, *this->cast_float_param_, false, target);
  }

  // .AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->accumulator_param_, false, target);
  }

  // .DisplayParam display_param = 118;
  if (this->has_display_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->display_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NodeParam)
  return target;
}

size_t NodeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeParam)
  size_t total_size = 0;

  // repeated string input = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0, n = this->output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated string phase = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phase_size());
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phase(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .LossParam loss_param = 50;
  if (this->has_loss_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loss_param_);
  }

  // .ReaderParam reader_param = 51;
  if (this->has_reader_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reader_param_);
  }

  // .VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variable_param_);
  }

  // .PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->place_holder_param_);
  }

  // .PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->phaseplexer_param_);
  }

  // .AddParam add_param = 103;
  if (this->has_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->add_param_);
  }

  // .BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_add_param_);
  }

  // .Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conv_2d_param_);
  }

  // .TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transposed_conv_2d_param_);
  }

  // .DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dropout_param_);
  }

  // .ReluParam relu_param = 108;
  if (this->has_relu_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relu_param_);
  }

  // .SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_param_);
  }

  // .SquareParam square_param = 110;
  if (this->has_square_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->square_param_);
  }

  // .MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matmul_param_);
  }

  // .PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pooling_param_);
  }

  // .ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reduce_param_);
  }

  // .EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equal_param_);
  }

  // .PrintParam print_param = 115;
  if (this->has_print_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->print_param_);
  }

  // .CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cast_float_param_);
  }

  // .AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accumulator_param_);
  }

  // .DisplayParam display_param = 118;
  if (this->has_display_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->display_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeParam)
    MergeFrom(*source);
  }
}

void NodeParam::MergeFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  phase_.MergeFrom(from.phase_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_loss_param()) {
    mutable_loss_param()->::LossParam::MergeFrom(from.loss_param());
  }
  if (from.has_reader_param()) {
    mutable_reader_param()->::ReaderParam::MergeFrom(from.reader_param());
  }
  if (from.has_variable_param()) {
    mutable_variable_param()->::VariableParam::MergeFrom(from.variable_param());
  }
  if (from.has_place_holder_param()) {
    mutable_place_holder_param()->::PlaceHolderParam::MergeFrom(from.place_holder_param());
  }
  if (from.has_phaseplexer_param()) {
    mutable_phaseplexer_param()->::PhaseplexerParam::MergeFrom(from.phaseplexer_param());
  }
  if (from.has_add_param()) {
    mutable_add_param()->::AddParam::MergeFrom(from.add_param());
  }
  if (from.has_bias_add_param()) {
    mutable_bias_add_param()->::BiasAddParam::MergeFrom(from.bias_add_param());
  }
  if (from.has_conv_2d_param()) {
    mutable_conv_2d_param()->::Conv2dParam::MergeFrom(from.conv_2d_param());
  }
  if (from.has_transposed_conv_2d_param()) {
    mutable_transposed_conv_2d_param()->::TransposedConv2dParam::MergeFrom(from.transposed_conv_2d_param());
  }
  if (from.has_dropout_param()) {
    mutable_dropout_param()->::DropoutParam::MergeFrom(from.dropout_param());
  }
  if (from.has_relu_param()) {
    mutable_relu_param()->::ReluParam::MergeFrom(from.relu_param());
  }
  if (from.has_softmax_param()) {
    mutable_softmax_param()->::SoftmaxParam::MergeFrom(from.softmax_param());
  }
  if (from.has_square_param()) {
    mutable_square_param()->::SquareParam::MergeFrom(from.square_param());
  }
  if (from.has_matmul_param()) {
    mutable_matmul_param()->::MatMulParam::MergeFrom(from.matmul_param());
  }
  if (from.has_pooling_param()) {
    mutable_pooling_param()->::PoolingParam::MergeFrom(from.pooling_param());
  }
  if (from.has_reduce_param()) {
    mutable_reduce_param()->::ReduceParam::MergeFrom(from.reduce_param());
  }
  if (from.has_equal_param()) {
    mutable_equal_param()->::EqualParam::MergeFrom(from.equal_param());
  }
  if (from.has_print_param()) {
    mutable_print_param()->::PrintParam::MergeFrom(from.print_param());
  }
  if (from.has_cast_float_param()) {
    mutable_cast_float_param()->::CastFloatParam::MergeFrom(from.cast_float_param());
  }
  if (from.has_accumulator_param()) {
    mutable_accumulator_param()->::AccumulatorParam::MergeFrom(from.accumulator_param());
  }
  if (from.has_display_param()) {
    mutable_display_param()->::DisplayParam::MergeFrom(from.display_param());
  }
}

void NodeParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeParam::CopyFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeParam::IsInitialized() const {
  return true;
}

void NodeParam::Swap(NodeParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeParam::InternalSwap(NodeParam* other) {
  input_.UnsafeArenaSwap(&other->input_);
  output_.UnsafeArenaSwap(&other->output_);
  phase_.UnsafeArenaSwap(&other->phase_);
  name_.Swap(&other->name_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(reader_param_, other->reader_param_);
  std::swap(variable_param_, other->variable_param_);
  std::swap(place_holder_param_, other->place_holder_param_);
  std::swap(phaseplexer_param_, other->phaseplexer_param_);
  std::swap(add_param_, other->add_param_);
  std::swap(bias_add_param_, other->bias_add_param_);
  std::swap(conv_2d_param_, other->conv_2d_param_);
  std::swap(transposed_conv_2d_param_, other->transposed_conv_2d_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(relu_param_, other->relu_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(square_param_, other->square_param_);
  std::swap(matmul_param_, other->matmul_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(reduce_param_, other->reduce_param_);
  std::swap(equal_param_, other->equal_param_);
  std::swap(print_param_, other->print_param_);
  std::swap(cast_float_param_, other->cast_float_param_);
  std::swap(accumulator_param_, other->accumulator_param_);
  std::swap(display_param_, other->display_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeParam

// string name = 1;
void NodeParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeParam::name() const {
  // @@protoc_insertion_point(field_get:NodeParam.name)
  return name_.GetNoArena();
}
void NodeParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeParam.name)
}
#if LANG_CXX11
void NodeParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeParam.name)
}
#endif
void NodeParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeParam.name)
}
void NodeParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeParam.name)
}
::std::string* NodeParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NodeParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeParam::release_name() {
  // @@protoc_insertion_point(field_release:NodeParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NodeParam.name)
}

// repeated string input = 2;
int NodeParam::input_size() const {
  return input_.size();
}
void NodeParam::clear_input() {
  input_.Clear();
}
const ::std::string& NodeParam::input(int index) const {
  // @@protoc_insertion_point(field_get:NodeParam.input)
  return input_.Get(index);
}
::std::string* NodeParam::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:NodeParam.input)
  return input_.Mutable(index);
}
void NodeParam::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NodeParam.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NodeParam.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeParam.input)
}
void NodeParam::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeParam.input)
}
::std::string* NodeParam::add_input() {
  // @@protoc_insertion_point(field_add_mutable:NodeParam.input)
  return input_.Add();
}
void NodeParam::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeParam.input)
}
#if LANG_CXX11
void NodeParam::add_input(::std::string&& value) {
  input_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:NodeParam.input)
}
#endif
void NodeParam::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeParam.input)
}
void NodeParam::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeParam.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::input() const {
  // @@protoc_insertion_point(field_list:NodeParam.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:NodeParam.input)
  return &input_;
}

// repeated string output = 3;
int NodeParam::output_size() const {
  return output_.size();
}
void NodeParam::clear_output() {
  output_.Clear();
}
const ::std::string& NodeParam::output(int index) const {
  // @@protoc_insertion_point(field_get:NodeParam.output)
  return output_.Get(index);
}
::std::string* NodeParam::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:NodeParam.output)
  return output_.Mutable(index);
}
void NodeParam::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NodeParam.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NodeParam.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_output(int index, const char* value) {
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeParam.output)
}
void NodeParam::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeParam.output)
}
::std::string* NodeParam::add_output() {
  // @@protoc_insertion_point(field_add_mutable:NodeParam.output)
  return output_.Add();
}
void NodeParam::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeParam.output)
}
#if LANG_CXX11
void NodeParam::add_output(::std::string&& value) {
  output_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:NodeParam.output)
}
#endif
void NodeParam::add_output(const char* value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeParam.output)
}
void NodeParam::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeParam.output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::output() const {
  // @@protoc_insertion_point(field_list:NodeParam.output)
  return output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:NodeParam.output)
  return &output_;
}

// repeated string phase = 4;
int NodeParam::phase_size() const {
  return phase_.size();
}
void NodeParam::clear_phase() {
  phase_.Clear();
}
const ::std::string& NodeParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:NodeParam.phase)
  return phase_.Get(index);
}
::std::string* NodeParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:NodeParam.phase)
  return phase_.Mutable(index);
}
void NodeParam::set_phase(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NodeParam.phase)
  phase_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_phase(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NodeParam.phase)
  phase_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_phase(int index, const char* value) {
  phase_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeParam.phase)
}
void NodeParam::set_phase(int index, const char* value, size_t size) {
  phase_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeParam.phase)
}
::std::string* NodeParam::add_phase() {
  // @@protoc_insertion_point(field_add_mutable:NodeParam.phase)
  return phase_.Add();
}
void NodeParam::add_phase(const ::std::string& value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeParam.phase)
}
#if LANG_CXX11
void NodeParam::add_phase(::std::string&& value) {
  phase_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:NodeParam.phase)
}
#endif
void NodeParam::add_phase(const char* value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeParam.phase)
}
void NodeParam::add_phase(const char* value, size_t size) {
  phase_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeParam.phase)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::phase() const {
  // @@protoc_insertion_point(field_list:NodeParam.phase)
  return phase_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:NodeParam.phase)
  return &phase_;
}

// .LossParam loss_param = 50;
bool NodeParam::has_loss_param() const {
  return this != internal_default_instance() && loss_param_ != NULL;
}
void NodeParam::clear_loss_param() {
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) delete loss_param_;
  loss_param_ = NULL;
}
const ::LossParam& NodeParam::loss_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::LossParam::internal_default_instance();
}
::LossParam* NodeParam::mutable_loss_param() {
  
  if (loss_param_ == NULL) {
    loss_param_ = new ::LossParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.loss_param)
  return loss_param_;
}
::LossParam* NodeParam::release_loss_param() {
  // @@protoc_insertion_point(field_release:NodeParam.loss_param)
  
  ::LossParam* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_loss_param(::LossParam* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.loss_param)
}

// .ReaderParam reader_param = 51;
bool NodeParam::has_reader_param() const {
  return this != internal_default_instance() && reader_param_ != NULL;
}
void NodeParam::clear_reader_param() {
  if (GetArenaNoVirtual() == NULL && reader_param_ != NULL) delete reader_param_;
  reader_param_ = NULL;
}
const ::ReaderParam& NodeParam::reader_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.reader_param)
  return reader_param_ != NULL ? *reader_param_
                         : *::ReaderParam::internal_default_instance();
}
::ReaderParam* NodeParam::mutable_reader_param() {
  
  if (reader_param_ == NULL) {
    reader_param_ = new ::ReaderParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.reader_param)
  return reader_param_;
}
::ReaderParam* NodeParam::release_reader_param() {
  // @@protoc_insertion_point(field_release:NodeParam.reader_param)
  
  ::ReaderParam* temp = reader_param_;
  reader_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_reader_param(::ReaderParam* reader_param) {
  delete reader_param_;
  reader_param_ = reader_param;
  if (reader_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.reader_param)
}

// .VariableParam variable_param = 100;
bool NodeParam::has_variable_param() const {
  return this != internal_default_instance() && variable_param_ != NULL;
}
void NodeParam::clear_variable_param() {
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) delete variable_param_;
  variable_param_ = NULL;
}
const ::VariableParam& NodeParam::variable_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.variable_param)
  return variable_param_ != NULL ? *variable_param_
                         : *::VariableParam::internal_default_instance();
}
::VariableParam* NodeParam::mutable_variable_param() {
  
  if (variable_param_ == NULL) {
    variable_param_ = new ::VariableParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.variable_param)
  return variable_param_;
}
::VariableParam* NodeParam::release_variable_param() {
  // @@protoc_insertion_point(field_release:NodeParam.variable_param)
  
  ::VariableParam* temp = variable_param_;
  variable_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_variable_param(::VariableParam* variable_param) {
  delete variable_param_;
  variable_param_ = variable_param;
  if (variable_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.variable_param)
}

// .PlaceHolderParam place_holder_param = 101;
bool NodeParam::has_place_holder_param() const {
  return this != internal_default_instance() && place_holder_param_ != NULL;
}
void NodeParam::clear_place_holder_param() {
  if (GetArenaNoVirtual() == NULL && place_holder_param_ != NULL) delete place_holder_param_;
  place_holder_param_ = NULL;
}
const ::PlaceHolderParam& NodeParam::place_holder_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.place_holder_param)
  return place_holder_param_ != NULL ? *place_holder_param_
                         : *::PlaceHolderParam::internal_default_instance();
}
::PlaceHolderParam* NodeParam::mutable_place_holder_param() {
  
  if (place_holder_param_ == NULL) {
    place_holder_param_ = new ::PlaceHolderParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.place_holder_param)
  return place_holder_param_;
}
::PlaceHolderParam* NodeParam::release_place_holder_param() {
  // @@protoc_insertion_point(field_release:NodeParam.place_holder_param)
  
  ::PlaceHolderParam* temp = place_holder_param_;
  place_holder_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_place_holder_param(::PlaceHolderParam* place_holder_param) {
  delete place_holder_param_;
  place_holder_param_ = place_holder_param;
  if (place_holder_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.place_holder_param)
}

// .PhaseplexerParam phaseplexer_param = 102;
bool NodeParam::has_phaseplexer_param() const {
  return this != internal_default_instance() && phaseplexer_param_ != NULL;
}
void NodeParam::clear_phaseplexer_param() {
  if (GetArenaNoVirtual() == NULL && phaseplexer_param_ != NULL) delete phaseplexer_param_;
  phaseplexer_param_ = NULL;
}
const ::PhaseplexerParam& NodeParam::phaseplexer_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.phaseplexer_param)
  return phaseplexer_param_ != NULL ? *phaseplexer_param_
                         : *::PhaseplexerParam::internal_default_instance();
}
::PhaseplexerParam* NodeParam::mutable_phaseplexer_param() {
  
  if (phaseplexer_param_ == NULL) {
    phaseplexer_param_ = new ::PhaseplexerParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.phaseplexer_param)
  return phaseplexer_param_;
}
::PhaseplexerParam* NodeParam::release_phaseplexer_param() {
  // @@protoc_insertion_point(field_release:NodeParam.phaseplexer_param)
  
  ::PhaseplexerParam* temp = phaseplexer_param_;
  phaseplexer_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_phaseplexer_param(::PhaseplexerParam* phaseplexer_param) {
  delete phaseplexer_param_;
  phaseplexer_param_ = phaseplexer_param;
  if (phaseplexer_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.phaseplexer_param)
}

// .AddParam add_param = 103;
bool NodeParam::has_add_param() const {
  return this != internal_default_instance() && add_param_ != NULL;
}
void NodeParam::clear_add_param() {
  if (GetArenaNoVirtual() == NULL && add_param_ != NULL) delete add_param_;
  add_param_ = NULL;
}
const ::AddParam& NodeParam::add_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.add_param)
  return add_param_ != NULL ? *add_param_
                         : *::AddParam::internal_default_instance();
}
::AddParam* NodeParam::mutable_add_param() {
  
  if (add_param_ == NULL) {
    add_param_ = new ::AddParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.add_param)
  return add_param_;
}
::AddParam* NodeParam::release_add_param() {
  // @@protoc_insertion_point(field_release:NodeParam.add_param)
  
  ::AddParam* temp = add_param_;
  add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_add_param(::AddParam* add_param) {
  delete add_param_;
  add_param_ = add_param;
  if (add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.add_param)
}

// .BiasAddParam bias_add_param = 104;
bool NodeParam::has_bias_add_param() const {
  return this != internal_default_instance() && bias_add_param_ != NULL;
}
void NodeParam::clear_bias_add_param() {
  if (GetArenaNoVirtual() == NULL && bias_add_param_ != NULL) delete bias_add_param_;
  bias_add_param_ = NULL;
}
const ::BiasAddParam& NodeParam::bias_add_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.bias_add_param)
  return bias_add_param_ != NULL ? *bias_add_param_
                         : *::BiasAddParam::internal_default_instance();
}
::BiasAddParam* NodeParam::mutable_bias_add_param() {
  
  if (bias_add_param_ == NULL) {
    bias_add_param_ = new ::BiasAddParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.bias_add_param)
  return bias_add_param_;
}
::BiasAddParam* NodeParam::release_bias_add_param() {
  // @@protoc_insertion_point(field_release:NodeParam.bias_add_param)
  
  ::BiasAddParam* temp = bias_add_param_;
  bias_add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_bias_add_param(::BiasAddParam* bias_add_param) {
  delete bias_add_param_;
  bias_add_param_ = bias_add_param;
  if (bias_add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.bias_add_param)
}

// .Conv2dParam conv_2d_param = 105;
bool NodeParam::has_conv_2d_param() const {
  return this != internal_default_instance() && conv_2d_param_ != NULL;
}
void NodeParam::clear_conv_2d_param() {
  if (GetArenaNoVirtual() == NULL && conv_2d_param_ != NULL) delete conv_2d_param_;
  conv_2d_param_ = NULL;
}
const ::Conv2dParam& NodeParam::conv_2d_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.conv_2d_param)
  return conv_2d_param_ != NULL ? *conv_2d_param_
                         : *::Conv2dParam::internal_default_instance();
}
::Conv2dParam* NodeParam::mutable_conv_2d_param() {
  
  if (conv_2d_param_ == NULL) {
    conv_2d_param_ = new ::Conv2dParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.conv_2d_param)
  return conv_2d_param_;
}
::Conv2dParam* NodeParam::release_conv_2d_param() {
  // @@protoc_insertion_point(field_release:NodeParam.conv_2d_param)
  
  ::Conv2dParam* temp = conv_2d_param_;
  conv_2d_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_conv_2d_param(::Conv2dParam* conv_2d_param) {
  delete conv_2d_param_;
  conv_2d_param_ = conv_2d_param;
  if (conv_2d_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.conv_2d_param)
}

// .TransposedConv2dParam transposed_conv_2d_param = 106;
bool NodeParam::has_transposed_conv_2d_param() const {
  return this != internal_default_instance() && transposed_conv_2d_param_ != NULL;
}
void NodeParam::clear_transposed_conv_2d_param() {
  if (GetArenaNoVirtual() == NULL && transposed_conv_2d_param_ != NULL) delete transposed_conv_2d_param_;
  transposed_conv_2d_param_ = NULL;
}
const ::TransposedConv2dParam& NodeParam::transposed_conv_2d_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.transposed_conv_2d_param)
  return transposed_conv_2d_param_ != NULL ? *transposed_conv_2d_param_
                         : *::TransposedConv2dParam::internal_default_instance();
}
::TransposedConv2dParam* NodeParam::mutable_transposed_conv_2d_param() {
  
  if (transposed_conv_2d_param_ == NULL) {
    transposed_conv_2d_param_ = new ::TransposedConv2dParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.transposed_conv_2d_param)
  return transposed_conv_2d_param_;
}
::TransposedConv2dParam* NodeParam::release_transposed_conv_2d_param() {
  // @@protoc_insertion_point(field_release:NodeParam.transposed_conv_2d_param)
  
  ::TransposedConv2dParam* temp = transposed_conv_2d_param_;
  transposed_conv_2d_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_transposed_conv_2d_param(::TransposedConv2dParam* transposed_conv_2d_param) {
  delete transposed_conv_2d_param_;
  transposed_conv_2d_param_ = transposed_conv_2d_param;
  if (transposed_conv_2d_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.transposed_conv_2d_param)
}

// .DropoutParam dropout_param = 107;
bool NodeParam::has_dropout_param() const {
  return this != internal_default_instance() && dropout_param_ != NULL;
}
void NodeParam::clear_dropout_param() {
  if (GetArenaNoVirtual() == NULL && dropout_param_ != NULL) delete dropout_param_;
  dropout_param_ = NULL;
}
const ::DropoutParam& NodeParam::dropout_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::DropoutParam::internal_default_instance();
}
::DropoutParam* NodeParam::mutable_dropout_param() {
  
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::DropoutParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.dropout_param)
  return dropout_param_;
}
::DropoutParam* NodeParam::release_dropout_param() {
  // @@protoc_insertion_point(field_release:NodeParam.dropout_param)
  
  ::DropoutParam* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_dropout_param(::DropoutParam* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.dropout_param)
}

// .ReluParam relu_param = 108;
bool NodeParam::has_relu_param() const {
  return this != internal_default_instance() && relu_param_ != NULL;
}
void NodeParam::clear_relu_param() {
  if (GetArenaNoVirtual() == NULL && relu_param_ != NULL) delete relu_param_;
  relu_param_ = NULL;
}
const ::ReluParam& NodeParam::relu_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.relu_param)
  return relu_param_ != NULL ? *relu_param_
                         : *::ReluParam::internal_default_instance();
}
::ReluParam* NodeParam::mutable_relu_param() {
  
  if (relu_param_ == NULL) {
    relu_param_ = new ::ReluParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.relu_param)
  return relu_param_;
}
::ReluParam* NodeParam::release_relu_param() {
  // @@protoc_insertion_point(field_release:NodeParam.relu_param)
  
  ::ReluParam* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_relu_param(::ReluParam* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.relu_param)
}

// .SoftmaxParam softmax_param = 109;
bool NodeParam::has_softmax_param() const {
  return this != internal_default_instance() && softmax_param_ != NULL;
}
void NodeParam::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
const ::SoftmaxParam& NodeParam::softmax_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::SoftmaxParam::internal_default_instance();
}
::SoftmaxParam* NodeParam::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::SoftmaxParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.softmax_param)
  return softmax_param_;
}
::SoftmaxParam* NodeParam::release_softmax_param() {
  // @@protoc_insertion_point(field_release:NodeParam.softmax_param)
  
  ::SoftmaxParam* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_softmax_param(::SoftmaxParam* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.softmax_param)
}

// .SquareParam square_param = 110;
bool NodeParam::has_square_param() const {
  return this != internal_default_instance() && square_param_ != NULL;
}
void NodeParam::clear_square_param() {
  if (GetArenaNoVirtual() == NULL && square_param_ != NULL) delete square_param_;
  square_param_ = NULL;
}
const ::SquareParam& NodeParam::square_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.square_param)
  return square_param_ != NULL ? *square_param_
                         : *::SquareParam::internal_default_instance();
}
::SquareParam* NodeParam::mutable_square_param() {
  
  if (square_param_ == NULL) {
    square_param_ = new ::SquareParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.square_param)
  return square_param_;
}
::SquareParam* NodeParam::release_square_param() {
  // @@protoc_insertion_point(field_release:NodeParam.square_param)
  
  ::SquareParam* temp = square_param_;
  square_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_square_param(::SquareParam* square_param) {
  delete square_param_;
  square_param_ = square_param;
  if (square_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.square_param)
}

// .MatMulParam matmul_param = 111;
bool NodeParam::has_matmul_param() const {
  return this != internal_default_instance() && matmul_param_ != NULL;
}
void NodeParam::clear_matmul_param() {
  if (GetArenaNoVirtual() == NULL && matmul_param_ != NULL) delete matmul_param_;
  matmul_param_ = NULL;
}
const ::MatMulParam& NodeParam::matmul_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.matmul_param)
  return matmul_param_ != NULL ? *matmul_param_
                         : *::MatMulParam::internal_default_instance();
}
::MatMulParam* NodeParam::mutable_matmul_param() {
  
  if (matmul_param_ == NULL) {
    matmul_param_ = new ::MatMulParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.matmul_param)
  return matmul_param_;
}
::MatMulParam* NodeParam::release_matmul_param() {
  // @@protoc_insertion_point(field_release:NodeParam.matmul_param)
  
  ::MatMulParam* temp = matmul_param_;
  matmul_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_matmul_param(::MatMulParam* matmul_param) {
  delete matmul_param_;
  matmul_param_ = matmul_param;
  if (matmul_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.matmul_param)
}

// .PoolingParam pooling_param = 112;
bool NodeParam::has_pooling_param() const {
  return this != internal_default_instance() && pooling_param_ != NULL;
}
void NodeParam::clear_pooling_param() {
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) delete pooling_param_;
  pooling_param_ = NULL;
}
const ::PoolingParam& NodeParam::pooling_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::PoolingParam::internal_default_instance();
}
::PoolingParam* NodeParam::mutable_pooling_param() {
  
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::PoolingParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.pooling_param)
  return pooling_param_;
}
::PoolingParam* NodeParam::release_pooling_param() {
  // @@protoc_insertion_point(field_release:NodeParam.pooling_param)
  
  ::PoolingParam* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_pooling_param(::PoolingParam* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.pooling_param)
}

// .ReduceParam reduce_param = 113;
bool NodeParam::has_reduce_param() const {
  return this != internal_default_instance() && reduce_param_ != NULL;
}
void NodeParam::clear_reduce_param() {
  if (GetArenaNoVirtual() == NULL && reduce_param_ != NULL) delete reduce_param_;
  reduce_param_ = NULL;
}
const ::ReduceParam& NodeParam::reduce_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.reduce_param)
  return reduce_param_ != NULL ? *reduce_param_
                         : *::ReduceParam::internal_default_instance();
}
::ReduceParam* NodeParam::mutable_reduce_param() {
  
  if (reduce_param_ == NULL) {
    reduce_param_ = new ::ReduceParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.reduce_param)
  return reduce_param_;
}
::ReduceParam* NodeParam::release_reduce_param() {
  // @@protoc_insertion_point(field_release:NodeParam.reduce_param)
  
  ::ReduceParam* temp = reduce_param_;
  reduce_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_reduce_param(::ReduceParam* reduce_param) {
  delete reduce_param_;
  reduce_param_ = reduce_param;
  if (reduce_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.reduce_param)
}

// .EqualParam equal_param = 114;
bool NodeParam::has_equal_param() const {
  return this != internal_default_instance() && equal_param_ != NULL;
}
void NodeParam::clear_equal_param() {
  if (GetArenaNoVirtual() == NULL && equal_param_ != NULL) delete equal_param_;
  equal_param_ = NULL;
}
const ::EqualParam& NodeParam::equal_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.equal_param)
  return equal_param_ != NULL ? *equal_param_
                         : *::EqualParam::internal_default_instance();
}
::EqualParam* NodeParam::mutable_equal_param() {
  
  if (equal_param_ == NULL) {
    equal_param_ = new ::EqualParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.equal_param)
  return equal_param_;
}
::EqualParam* NodeParam::release_equal_param() {
  // @@protoc_insertion_point(field_release:NodeParam.equal_param)
  
  ::EqualParam* temp = equal_param_;
  equal_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_equal_param(::EqualParam* equal_param) {
  delete equal_param_;
  equal_param_ = equal_param;
  if (equal_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.equal_param)
}

// .PrintParam print_param = 115;
bool NodeParam::has_print_param() const {
  return this != internal_default_instance() && print_param_ != NULL;
}
void NodeParam::clear_print_param() {
  if (GetArenaNoVirtual() == NULL && print_param_ != NULL) delete print_param_;
  print_param_ = NULL;
}
const ::PrintParam& NodeParam::print_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.print_param)
  return print_param_ != NULL ? *print_param_
                         : *::PrintParam::internal_default_instance();
}
::PrintParam* NodeParam::mutable_print_param() {
  
  if (print_param_ == NULL) {
    print_param_ = new ::PrintParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.print_param)
  return print_param_;
}
::PrintParam* NodeParam::release_print_param() {
  // @@protoc_insertion_point(field_release:NodeParam.print_param)
  
  ::PrintParam* temp = print_param_;
  print_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_print_param(::PrintParam* print_param) {
  delete print_param_;
  print_param_ = print_param;
  if (print_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.print_param)
}

// .CastFloatParam cast_float_param = 116;
bool NodeParam::has_cast_float_param() const {
  return this != internal_default_instance() && cast_float_param_ != NULL;
}
void NodeParam::clear_cast_float_param() {
  if (GetArenaNoVirtual() == NULL && cast_float_param_ != NULL) delete cast_float_param_;
  cast_float_param_ = NULL;
}
const ::CastFloatParam& NodeParam::cast_float_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.cast_float_param)
  return cast_float_param_ != NULL ? *cast_float_param_
                         : *::CastFloatParam::internal_default_instance();
}
::CastFloatParam* NodeParam::mutable_cast_float_param() {
  
  if (cast_float_param_ == NULL) {
    cast_float_param_ = new ::CastFloatParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.cast_float_param)
  return cast_float_param_;
}
::CastFloatParam* NodeParam::release_cast_float_param() {
  // @@protoc_insertion_point(field_release:NodeParam.cast_float_param)
  
  ::CastFloatParam* temp = cast_float_param_;
  cast_float_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_cast_float_param(::CastFloatParam* cast_float_param) {
  delete cast_float_param_;
  cast_float_param_ = cast_float_param;
  if (cast_float_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.cast_float_param)
}

// .AccumulatorParam accumulator_param = 117;
bool NodeParam::has_accumulator_param() const {
  return this != internal_default_instance() && accumulator_param_ != NULL;
}
void NodeParam::clear_accumulator_param() {
  if (GetArenaNoVirtual() == NULL && accumulator_param_ != NULL) delete accumulator_param_;
  accumulator_param_ = NULL;
}
const ::AccumulatorParam& NodeParam::accumulator_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.accumulator_param)
  return accumulator_param_ != NULL ? *accumulator_param_
                         : *::AccumulatorParam::internal_default_instance();
}
::AccumulatorParam* NodeParam::mutable_accumulator_param() {
  
  if (accumulator_param_ == NULL) {
    accumulator_param_ = new ::AccumulatorParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.accumulator_param)
  return accumulator_param_;
}
::AccumulatorParam* NodeParam::release_accumulator_param() {
  // @@protoc_insertion_point(field_release:NodeParam.accumulator_param)
  
  ::AccumulatorParam* temp = accumulator_param_;
  accumulator_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_accumulator_param(::AccumulatorParam* accumulator_param) {
  delete accumulator_param_;
  accumulator_param_ = accumulator_param;
  if (accumulator_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.accumulator_param)
}

// .DisplayParam display_param = 118;
bool NodeParam::has_display_param() const {
  return this != internal_default_instance() && display_param_ != NULL;
}
void NodeParam::clear_display_param() {
  if (GetArenaNoVirtual() == NULL && display_param_ != NULL) delete display_param_;
  display_param_ = NULL;
}
const ::DisplayParam& NodeParam::display_param() const {
  // @@protoc_insertion_point(field_get:NodeParam.display_param)
  return display_param_ != NULL ? *display_param_
                         : *::DisplayParam::internal_default_instance();
}
::DisplayParam* NodeParam::mutable_display_param() {
  
  if (display_param_ == NULL) {
    display_param_ = new ::DisplayParam;
  }
  // @@protoc_insertion_point(field_mutable:NodeParam.display_param)
  return display_param_;
}
::DisplayParam* NodeParam::release_display_param() {
  // @@protoc_insertion_point(field_release:NodeParam.display_param)
  
  ::DisplayParam* temp = display_param_;
  display_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_display_param(::DisplayParam* display_param) {
  delete display_param_;
  display_param_ = display_param;
  if (display_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:NodeParam.display_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SquareParam::SquareParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SquareParam)
}
SquareParam::SquareParam(const SquareParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SquareParam)
}

void SquareParam::SharedCtor() {
  _cached_size_ = 0;
}

SquareParam::~SquareParam() {
  // @@protoc_insertion_point(destructor:SquareParam)
  SharedDtor();
}

void SquareParam::SharedDtor() {
}

void SquareParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SquareParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[24].descriptor;
}

const SquareParam& SquareParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SquareParam* SquareParam::New(::google::protobuf::Arena* arena) const {
  SquareParam* n = new SquareParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SquareParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SquareParam)
}

bool SquareParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SquareParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:SquareParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SquareParam)
  return false;
#undef DO_
}

void SquareParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SquareParam)
  // @@protoc_insertion_point(serialize_end:SquareParam)
}

::google::protobuf::uint8* SquareParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SquareParam)
  // @@protoc_insertion_point(serialize_to_array_end:SquareParam)
  return target;
}

size_t SquareParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SquareParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SquareParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SquareParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SquareParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SquareParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SquareParam)
    MergeFrom(*source);
  }
}

void SquareParam::MergeFrom(const SquareParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SquareParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SquareParam::CopyFrom(const SquareParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SquareParam::IsInitialized() const {
  return true;
}

void SquareParam::Swap(SquareParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SquareParam::InternalSwap(SquareParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SquareParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SquareParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxLossParam::kAlphaFieldNumber;
const int SoftmaxLossParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxLossParam::SoftmaxLossParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SoftmaxLossParam)
}
SoftmaxLossParam::SoftmaxLossParam(const SoftmaxLossParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:SoftmaxLossParam)
}

void SoftmaxLossParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

SoftmaxLossParam::~SoftmaxLossParam() {
  // @@protoc_insertion_point(destructor:SoftmaxLossParam)
  SharedDtor();
}

void SoftmaxLossParam::SharedDtor() {
}

void SoftmaxLossParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxLossParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[25].descriptor;
}

const SoftmaxLossParam& SoftmaxLossParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxLossParam* SoftmaxLossParam::New(::google::protobuf::Arena* arena) const {
  SoftmaxLossParam* n = new SoftmaxLossParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxLossParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftmaxLossParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool SoftmaxLossParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SoftmaxLossParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SoftmaxLossParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SoftmaxLossParam)
  return false;
#undef DO_
}

void SoftmaxLossParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SoftmaxLossParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:SoftmaxLossParam)
}

::google::protobuf::uint8* SoftmaxLossParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SoftmaxLossParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SoftmaxLossParam)
  return target;
}

size_t SoftmaxLossParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftmaxLossParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxLossParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftmaxLossParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxLossParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxLossParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftmaxLossParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftmaxLossParam)
    MergeFrom(*source);
  }
}

void SoftmaxLossParam::MergeFrom(const SoftmaxLossParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftmaxLossParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void SoftmaxLossParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftmaxLossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxLossParam::CopyFrom(const SoftmaxLossParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftmaxLossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxLossParam::IsInitialized() const {
  return true;
}

void SoftmaxLossParam::Swap(SoftmaxLossParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxLossParam::InternalSwap(SoftmaxLossParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxLossParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxLossParam

// float alpha = 1;
void SoftmaxLossParam::clear_alpha() {
  alpha_ = 0;
}
float SoftmaxLossParam::alpha() const {
  // @@protoc_insertion_point(field_get:SoftmaxLossParam.alpha)
  return alpha_;
}
void SoftmaxLossParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxLossParam.alpha)
}

// float beta = 2;
void SoftmaxLossParam::clear_beta() {
  beta_ = 0;
}
float SoftmaxLossParam::beta() const {
  // @@protoc_insertion_point(field_get:SoftmaxLossParam.beta)
  return beta_;
}
void SoftmaxLossParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxLossParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParam::kAlphaFieldNumber;
const int SoftmaxParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParam::SoftmaxParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SoftmaxParam)
}
SoftmaxParam::SoftmaxParam(const SoftmaxParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:SoftmaxParam)
}

void SoftmaxParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

SoftmaxParam::~SoftmaxParam() {
  // @@protoc_insertion_point(destructor:SoftmaxParam)
  SharedDtor();
}

void SoftmaxParam::SharedDtor() {
}

void SoftmaxParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[26].descriptor;
}

const SoftmaxParam& SoftmaxParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxParam* SoftmaxParam::New(::google::protobuf::Arena* arena) const {
  SoftmaxParam* n = new SoftmaxParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftmaxParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool SoftmaxParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SoftmaxParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SoftmaxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SoftmaxParam)
  return false;
#undef DO_
}

void SoftmaxParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SoftmaxParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:SoftmaxParam)
}

::google::protobuf::uint8* SoftmaxParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SoftmaxParam)
  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SoftmaxParam)
  return target;
}

size_t SoftmaxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftmaxParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftmaxParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftmaxParam)
    MergeFrom(*source);
  }
}

void SoftmaxParam::MergeFrom(const SoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void SoftmaxParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParam::CopyFrom(const SoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParam::IsInitialized() const {
  return true;
}

void SoftmaxParam::Swap(SoftmaxParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParam::InternalSwap(SoftmaxParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParam

// float alpha = 1;
void SoftmaxParam::clear_alpha() {
  alpha_ = 0;
}
float SoftmaxParam::alpha() const {
  // @@protoc_insertion_point(field_get:SoftmaxParam.alpha)
  return alpha_;
}
void SoftmaxParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxParam.alpha)
}

// float beta = 2;
void SoftmaxParam::clear_beta() {
  beta_ = 0;
}
float SoftmaxParam::beta() const {
  // @@protoc_insertion_point(field_get:SoftmaxParam.beta)
  return beta_;
}
void SoftmaxParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:SoftmaxParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitFillParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitFillParam::InitFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitFillParam)
}
InitFillParam::InitFillParam(const InitFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:InitFillParam)
}

void InitFillParam::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

InitFillParam::~InitFillParam() {
  // @@protoc_insertion_point(destructor:InitFillParam)
  SharedDtor();
}

void InitFillParam::SharedDtor() {
}

void InitFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[27].descriptor;
}

const InitFillParam& InitFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitFillParam* InitFillParam::New(::google::protobuf::Arena* arena) const {
  InitFillParam* n = new InitFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitFillParam)
  value_ = 0;
}

bool InitFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitFillParam)
  return false;
#undef DO_
}

void InitFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitFillParam)
  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitFillParam)
}

::google::protobuf::uint8* InitFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitFillParam)
  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitFillParam)
  return target;
}

size_t InitFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitFillParam)
  size_t total_size = 0;

  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitFillParam)
    MergeFrom(*source);
  }
}

void InitFillParam::MergeFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void InitFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitFillParam::CopyFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitFillParam::IsInitialized() const {
  return true;
}

void InitFillParam::Swap(InitFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitFillParam::InternalSwap(InitFillParam* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitFillParam

// float value = 1;
void InitFillParam::clear_value() {
  value_ = 0;
}
float InitFillParam::value() const {
  // @@protoc_insertion_point(field_get:InitFillParam.value)
  return value_;
}
void InitFillParam::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:InitFillParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitIndexFillParam::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitIndexFillParam::InitIndexFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitIndexFillParam)
}
InitIndexFillParam::InitIndexFillParam(const InitIndexFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:InitIndexFillParam)
}

void InitIndexFillParam::SharedCtor() {
  offset_ = 0;
  _cached_size_ = 0;
}

InitIndexFillParam::~InitIndexFillParam() {
  // @@protoc_insertion_point(destructor:InitIndexFillParam)
  SharedDtor();
}

void InitIndexFillParam::SharedDtor() {
}

void InitIndexFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitIndexFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[28].descriptor;
}

const InitIndexFillParam& InitIndexFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitIndexFillParam* InitIndexFillParam::New(::google::protobuf::Arena* arena) const {
  InitIndexFillParam* n = new InitIndexFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitIndexFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitIndexFillParam)
  offset_ = 0;
}

bool InitIndexFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitIndexFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitIndexFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitIndexFillParam)
  return false;
#undef DO_
}

void InitIndexFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitIndexFillParam)
  // float offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitIndexFillParam)
}

::google::protobuf::uint8* InitIndexFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitIndexFillParam)
  // float offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitIndexFillParam)
  return target;
}

size_t InitIndexFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitIndexFillParam)
  size_t total_size = 0;

  // float offset = 1;
  if (this->offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitIndexFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitIndexFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitIndexFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitIndexFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitIndexFillParam)
    MergeFrom(*source);
  }
}

void InitIndexFillParam::MergeFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void InitIndexFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitIndexFillParam::CopyFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitIndexFillParam::IsInitialized() const {
  return true;
}

void InitIndexFillParam::Swap(InitIndexFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitIndexFillParam::InternalSwap(InitIndexFillParam* other) {
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitIndexFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitIndexFillParam

// float offset = 1;
void InitIndexFillParam::clear_offset() {
  offset_ = 0;
}
float InitIndexFillParam::offset() const {
  // @@protoc_insertion_point(field_get:InitIndexFillParam.offset)
  return offset_;
}
void InitIndexFillParam::set_offset(float value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:InitIndexFillParam.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRandomUniformParam::kMinFieldNumber;
const int InitRandomUniformParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRandomUniformParam::InitRandomUniformParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitRandomUniformParam)
}
InitRandomUniformParam::InitRandomUniformParam(const InitRandomUniformParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:InitRandomUniformParam)
}

void InitRandomUniformParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitRandomUniformParam::~InitRandomUniformParam() {
  // @@protoc_insertion_point(destructor:InitRandomUniformParam)
  SharedDtor();
}

void InitRandomUniformParam::SharedDtor() {
}

void InitRandomUniformParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRandomUniformParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[29].descriptor;
}

const InitRandomUniformParam& InitRandomUniformParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRandomUniformParam* InitRandomUniformParam::New(::google::protobuf::Arena* arena) const {
  InitRandomUniformParam* n = new InitRandomUniformParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRandomUniformParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRandomUniformParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitRandomUniformParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitRandomUniformParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitRandomUniformParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitRandomUniformParam)
  return false;
#undef DO_
}

void InitRandomUniformParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitRandomUniformParam)
  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitRandomUniformParam)
}

::google::protobuf::uint8* InitRandomUniformParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitRandomUniformParam)
  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitRandomUniformParam)
  return target;
}

size_t InitRandomUniformParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitRandomUniformParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRandomUniformParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRandomUniformParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRandomUniformParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitRandomUniformParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitRandomUniformParam)
    MergeFrom(*source);
  }
}

void InitRandomUniformParam::MergeFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitRandomUniformParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRandomUniformParam::CopyFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRandomUniformParam::IsInitialized() const {
  return true;
}

void InitRandomUniformParam::Swap(InitRandomUniformParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRandomUniformParam::InternalSwap(InitRandomUniformParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRandomUniformParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRandomUniformParam

// float min = 1;
void InitRandomUniformParam::clear_min() {
  min_ = 0;
}
float InitRandomUniformParam::min() const {
  // @@protoc_insertion_point(field_get:InitRandomUniformParam.min)
  return min_;
}
void InitRandomUniformParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:InitRandomUniformParam.min)
}

// float max = 2;
void InitRandomUniformParam::clear_max() {
  max_ = 0;
}
float InitRandomUniformParam::max() const {
  // @@protoc_insertion_point(field_get:InitRandomUniformParam.max)
  return max_;
}
void InitRandomUniformParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:InitRandomUniformParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitStepParam::kMinFieldNumber;
const int InitStepParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitStepParam::InitStepParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitStepParam)
}
InitStepParam::InitStepParam(const InitStepParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:InitStepParam)
}

void InitStepParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitStepParam::~InitStepParam() {
  // @@protoc_insertion_point(destructor:InitStepParam)
  SharedDtor();
}

void InitStepParam::SharedDtor() {
}

void InitStepParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitStepParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[30].descriptor;
}

const InitStepParam& InitStepParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitStepParam* InitStepParam::New(::google::protobuf::Arena* arena) const {
  InitStepParam* n = new InitStepParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitStepParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitStepParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitStepParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitStepParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitStepParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitStepParam)
  return false;
#undef DO_
}

void InitStepParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitStepParam)
  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitStepParam)
}

::google::protobuf::uint8* InitStepParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitStepParam)
  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitStepParam)
  return target;
}

size_t InitStepParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitStepParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitStepParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitStepParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitStepParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitStepParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitStepParam)
    MergeFrom(*source);
  }
}

void InitStepParam::MergeFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitStepParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitStepParam::CopyFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitStepParam::IsInitialized() const {
  return true;
}

void InitStepParam::Swap(InitStepParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitStepParam::InternalSwap(InitStepParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitStepParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitStepParam

// float min = 1;
void InitStepParam::clear_min() {
  min_ = 0;
}
float InitStepParam::min() const {
  // @@protoc_insertion_point(field_get:InitStepParam.min)
  return min_;
}
void InitStepParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:InitStepParam.min)
}

// float max = 2;
void InitStepParam::clear_max() {
  max_ = 0;
}
float InitStepParam::max() const {
  // @@protoc_insertion_point(field_get:InitStepParam.max)
  return max_;
}
void InitStepParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:InitStepParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitParam::kTensorParamFieldNumber;
const int InitParam::kInitDataFieldNumber;
const int InitParam::kFillParamFieldNumber;
const int InitParam::kIndexFillParamFieldNumber;
const int InitParam::kRandomUniformParamFieldNumber;
const int InitParam::kStepParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitParam::InitParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitParam)
}
InitParam::InitParam(const InitParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    tensor_param_ = new ::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  if (from.has_init_data()) {
    init_data_ = new ::TensorData(*from.init_data_);
  } else {
    init_data_ = NULL;
  }
  if (from.has_fill_param()) {
    fill_param_ = new ::InitFillParam(*from.fill_param_);
  } else {
    fill_param_ = NULL;
  }
  if (from.has_index_fill_param()) {
    index_fill_param_ = new ::InitIndexFillParam(*from.index_fill_param_);
  } else {
    index_fill_param_ = NULL;
  }
  if (from.has_random_uniform_param()) {
    random_uniform_param_ = new ::InitRandomUniformParam(*from.random_uniform_param_);
  } else {
    random_uniform_param_ = NULL;
  }
  if (from.has_step_param()) {
    step_param_ = new ::InitStepParam(*from.step_param_);
  } else {
    step_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:InitParam)
}

void InitParam::SharedCtor() {
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&step_param_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(step_param_));
  _cached_size_ = 0;
}

InitParam::~InitParam() {
  // @@protoc_insertion_point(destructor:InitParam)
  SharedDtor();
}

void InitParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
  if (this != internal_default_instance()) {
    delete init_data_;
  }
  if (this != internal_default_instance()) {
    delete fill_param_;
  }
  if (this != internal_default_instance()) {
    delete index_fill_param_;
  }
  if (this != internal_default_instance()) {
    delete random_uniform_param_;
  }
  if (this != internal_default_instance()) {
    delete step_param_;
  }
}

void InitParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[31].descriptor;
}

const InitParam& InitParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitParam* InitParam::New(::google::protobuf::Arena* arena) const {
  InitParam* n = new InitParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitParam::Clear() {
// @@protoc_insertion_point(message_clear_start:InitParam)
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_data_ != NULL) {
    delete init_data_;
  }
  init_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) {
    delete fill_param_;
  }
  fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) {
    delete index_fill_param_;
  }
  index_fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) {
    delete random_uniform_param_;
  }
  random_uniform_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) {
    delete step_param_;
  }
  step_param_ = NULL;
}

bool InitParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TensorParam tensor_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TensorData init_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitFillParam fill_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitIndexFillParam index_fill_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitRandomUniformParam random_uniform_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_uniform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitStepParam step_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitParam)
  return false;
#undef DO_
}

void InitParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_param_, output);
  }

  // .TensorData init_data = 2;
  if (this->has_init_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->init_data_, output);
  }

  // .InitFillParam fill_param = 3;
  if (this->has_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fill_param_, output);
  }

  // .InitIndexFillParam index_fill_param = 4;
  if (this->has_index_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->index_fill_param_, output);
  }

  // .InitRandomUniformParam random_uniform_param = 5;
  if (this->has_random_uniform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->random_uniform_param_, output);
  }

  // .InitStepParam step_param = 6;
  if (this->has_step_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->step_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:InitParam)
}

::google::protobuf::uint8* InitParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitParam)
  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_param_, false, target);
  }

  // .TensorData init_data = 2;
  if (this->has_init_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->init_data_, false, target);
  }

  // .InitFillParam fill_param = 3;
  if (this->has_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fill_param_, false, target);
  }

  // .InitIndexFillParam index_fill_param = 4;
  if (this->has_index_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->index_fill_param_, false, target);
  }

  // .InitRandomUniformParam random_uniform_param = 5;
  if (this->has_random_uniform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->random_uniform_param_, false, target);
  }

  // .InitStepParam step_param = 6;
  if (this->has_step_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->step_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitParam)
  return target;
}

size_t InitParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitParam)
  size_t total_size = 0;

  // .TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // .TensorData init_data = 2;
  if (this->has_init_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_data_);
  }

  // .InitFillParam fill_param = 3;
  if (this->has_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fill_param_);
  }

  // .InitIndexFillParam index_fill_param = 4;
  if (this->has_index_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_fill_param_);
  }

  // .InitRandomUniformParam random_uniform_param = 5;
  if (this->has_random_uniform_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_uniform_param_);
  }

  // .InitStepParam step_param = 6;
  if (this->has_step_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitParam)
    MergeFrom(*source);
  }
}

void InitParam::MergeFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.has_init_data()) {
    mutable_init_data()->::TensorData::MergeFrom(from.init_data());
  }
  if (from.has_fill_param()) {
    mutable_fill_param()->::InitFillParam::MergeFrom(from.fill_param());
  }
  if (from.has_index_fill_param()) {
    mutable_index_fill_param()->::InitIndexFillParam::MergeFrom(from.index_fill_param());
  }
  if (from.has_random_uniform_param()) {
    mutable_random_uniform_param()->::InitRandomUniformParam::MergeFrom(from.random_uniform_param());
  }
  if (from.has_step_param()) {
    mutable_step_param()->::InitStepParam::MergeFrom(from.step_param());
  }
}

void InitParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitParam::CopyFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParam::IsInitialized() const {
  return true;
}

void InitParam::Swap(InitParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitParam::InternalSwap(InitParam* other) {
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(init_data_, other->init_data_);
  std::swap(fill_param_, other->fill_param_);
  std::swap(index_fill_param_, other->index_fill_param_);
  std::swap(random_uniform_param_, other->random_uniform_param_);
  std::swap(step_param_, other->step_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitParam

// .TensorParam tensor_param = 1;
bool InitParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void InitParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::TensorParam& InitParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:InitParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::TensorParam::internal_default_instance();
}
::TensorParam* InitParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.tensor_param)
  return tensor_param_;
}
::TensorParam* InitParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:InitParam.tensor_param)
  
  ::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_tensor_param(::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.tensor_param)
}

// .TensorData init_data = 2;
bool InitParam::has_init_data() const {
  return this != internal_default_instance() && init_data_ != NULL;
}
void InitParam::clear_init_data() {
  if (GetArenaNoVirtual() == NULL && init_data_ != NULL) delete init_data_;
  init_data_ = NULL;
}
const ::TensorData& InitParam::init_data() const {
  // @@protoc_insertion_point(field_get:InitParam.init_data)
  return init_data_ != NULL ? *init_data_
                         : *::TensorData::internal_default_instance();
}
::TensorData* InitParam::mutable_init_data() {
  
  if (init_data_ == NULL) {
    init_data_ = new ::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.init_data)
  return init_data_;
}
::TensorData* InitParam::release_init_data() {
  // @@protoc_insertion_point(field_release:InitParam.init_data)
  
  ::TensorData* temp = init_data_;
  init_data_ = NULL;
  return temp;
}
void InitParam::set_allocated_init_data(::TensorData* init_data) {
  delete init_data_;
  init_data_ = init_data;
  if (init_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.init_data)
}

// .InitFillParam fill_param = 3;
bool InitParam::has_fill_param() const {
  return this != internal_default_instance() && fill_param_ != NULL;
}
void InitParam::clear_fill_param() {
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) delete fill_param_;
  fill_param_ = NULL;
}
const ::InitFillParam& InitParam::fill_param() const {
  // @@protoc_insertion_point(field_get:InitParam.fill_param)
  return fill_param_ != NULL ? *fill_param_
                         : *::InitFillParam::internal_default_instance();
}
::InitFillParam* InitParam::mutable_fill_param() {
  
  if (fill_param_ == NULL) {
    fill_param_ = new ::InitFillParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.fill_param)
  return fill_param_;
}
::InitFillParam* InitParam::release_fill_param() {
  // @@protoc_insertion_point(field_release:InitParam.fill_param)
  
  ::InitFillParam* temp = fill_param_;
  fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_fill_param(::InitFillParam* fill_param) {
  delete fill_param_;
  fill_param_ = fill_param;
  if (fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.fill_param)
}

// .InitIndexFillParam index_fill_param = 4;
bool InitParam::has_index_fill_param() const {
  return this != internal_default_instance() && index_fill_param_ != NULL;
}
void InitParam::clear_index_fill_param() {
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) delete index_fill_param_;
  index_fill_param_ = NULL;
}
const ::InitIndexFillParam& InitParam::index_fill_param() const {
  // @@protoc_insertion_point(field_get:InitParam.index_fill_param)
  return index_fill_param_ != NULL ? *index_fill_param_
                         : *::InitIndexFillParam::internal_default_instance();
}
::InitIndexFillParam* InitParam::mutable_index_fill_param() {
  
  if (index_fill_param_ == NULL) {
    index_fill_param_ = new ::InitIndexFillParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.index_fill_param)
  return index_fill_param_;
}
::InitIndexFillParam* InitParam::release_index_fill_param() {
  // @@protoc_insertion_point(field_release:InitParam.index_fill_param)
  
  ::InitIndexFillParam* temp = index_fill_param_;
  index_fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_index_fill_param(::InitIndexFillParam* index_fill_param) {
  delete index_fill_param_;
  index_fill_param_ = index_fill_param;
  if (index_fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.index_fill_param)
}

// .InitRandomUniformParam random_uniform_param = 5;
bool InitParam::has_random_uniform_param() const {
  return this != internal_default_instance() && random_uniform_param_ != NULL;
}
void InitParam::clear_random_uniform_param() {
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) delete random_uniform_param_;
  random_uniform_param_ = NULL;
}
const ::InitRandomUniformParam& InitParam::random_uniform_param() const {
  // @@protoc_insertion_point(field_get:InitParam.random_uniform_param)
  return random_uniform_param_ != NULL ? *random_uniform_param_
                         : *::InitRandomUniformParam::internal_default_instance();
}
::InitRandomUniformParam* InitParam::mutable_random_uniform_param() {
  
  if (random_uniform_param_ == NULL) {
    random_uniform_param_ = new ::InitRandomUniformParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.random_uniform_param)
  return random_uniform_param_;
}
::InitRandomUniformParam* InitParam::release_random_uniform_param() {
  // @@protoc_insertion_point(field_release:InitParam.random_uniform_param)
  
  ::InitRandomUniformParam* temp = random_uniform_param_;
  random_uniform_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_random_uniform_param(::InitRandomUniformParam* random_uniform_param) {
  delete random_uniform_param_;
  random_uniform_param_ = random_uniform_param;
  if (random_uniform_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.random_uniform_param)
}

// .InitStepParam step_param = 6;
bool InitParam::has_step_param() const {
  return this != internal_default_instance() && step_param_ != NULL;
}
void InitParam::clear_step_param() {
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) delete step_param_;
  step_param_ = NULL;
}
const ::InitStepParam& InitParam::step_param() const {
  // @@protoc_insertion_point(field_get:InitParam.step_param)
  return step_param_ != NULL ? *step_param_
                         : *::InitStepParam::internal_default_instance();
}
::InitStepParam* InitParam::mutable_step_param() {
  
  if (step_param_ == NULL) {
    step_param_ = new ::InitStepParam;
  }
  // @@protoc_insertion_point(field_mutable:InitParam.step_param)
  return step_param_;
}
::InitStepParam* InitParam::release_step_param() {
  // @@protoc_insertion_point(field_release:InitParam.step_param)
  
  ::InitStepParam* temp = step_param_;
  step_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_step_param(::InitStepParam* step_param) {
  delete step_param_;
  step_param_ = step_param;
  if (step_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitParam.step_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SGDSolverParam::kLearningRateFieldNumber;
const int SGDSolverParam::kMomentumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SGDSolverParam::SGDSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SGDSolverParam)
}
SGDSolverParam::SGDSolverParam(const SGDSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
  // @@protoc_insertion_point(copy_constructor:SGDSolverParam)
}

void SGDSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
  _cached_size_ = 0;
}

SGDSolverParam::~SGDSolverParam() {
  // @@protoc_insertion_point(destructor:SGDSolverParam)
  SharedDtor();
}

void SGDSolverParam::SharedDtor() {
}

void SGDSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[32].descriptor;
}

const SGDSolverParam& SGDSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SGDSolverParam* SGDSolverParam::New(::google::protobuf::Arena* arena) const {
  SGDSolverParam* n = new SGDSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SGDSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SGDSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
}

bool SGDSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SGDSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SGDSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SGDSolverParam)
  return false;
#undef DO_
}

void SGDSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SGDSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // @@protoc_insertion_point(serialize_end:SGDSolverParam)
}

::google::protobuf::uint8* SGDSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SGDSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SGDSolverParam)
  return target;
}

size_t SGDSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SGDSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SGDSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SGDSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SGDSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SGDSolverParam)
    MergeFrom(*source);
  }
}

void SGDSolverParam::MergeFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
}

void SGDSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDSolverParam::CopyFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDSolverParam::IsInitialized() const {
  return true;
}

void SGDSolverParam::Swap(SGDSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SGDSolverParam::InternalSwap(SGDSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SGDSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SGDSolverParam

// float learning_rate = 1;
void SGDSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float SGDSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:SGDSolverParam.learning_rate)
  return learning_rate_;
}
void SGDSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:SGDSolverParam.learning_rate)
}

// float momentum = 2;
void SGDSolverParam::clear_momentum() {
  momentum_ = 0;
}
float SGDSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:SGDSolverParam.momentum)
  return momentum_;
}
void SGDSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:SGDSolverParam.momentum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSolverParam::kLearningRateFieldNumber;
const int GainSolverParam::kMomentumFieldNumber;
const int GainSolverParam::kMaxGainFieldNumber;
const int GainSolverParam::kMinGainFieldNumber;
const int GainSolverParam::kGainPlusFieldNumber;
const int GainSolverParam::kGainMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSolverParam::GainSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GainSolverParam)
}
GainSolverParam::GainSolverParam(const GainSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
  // @@protoc_insertion_point(copy_constructor:GainSolverParam)
}

void GainSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
  _cached_size_ = 0;
}

GainSolverParam::~GainSolverParam() {
  // @@protoc_insertion_point(destructor:GainSolverParam)
  SharedDtor();
}

void GainSolverParam::SharedDtor() {
}

void GainSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[33].descriptor;
}

const GainSolverParam& GainSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSolverParam* GainSolverParam::New(::google::protobuf::Arena* arena) const {
  GainSolverParam* n = new GainSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GainSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
}

bool GainSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GainSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_plus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_plus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_mult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GainSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GainSolverParam)
  return false;
#undef DO_
}

void GainSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GainSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_gain(), output);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_gain(), output);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gain_plus(), output);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gain_mult(), output);
  }

  // @@protoc_insertion_point(serialize_end:GainSolverParam)
}

::google::protobuf::uint8* GainSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GainSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_gain(), target);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_gain(), target);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gain_plus(), target);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gain_mult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GainSolverParam)
  return target;
}

size_t GainSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GainSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    total_size += 1 + 4;
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    total_size += 1 + 4;
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    total_size += 1 + 4;
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GainSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GainSolverParam)
    MergeFrom(*source);
  }
}

void GainSolverParam::MergeFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.max_gain() != 0) {
    set_max_gain(from.max_gain());
  }
  if (from.min_gain() != 0) {
    set_min_gain(from.min_gain());
  }
  if (from.gain_plus() != 0) {
    set_gain_plus(from.gain_plus());
  }
  if (from.gain_mult() != 0) {
    set_gain_mult(from.gain_mult());
  }
}

void GainSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSolverParam::CopyFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSolverParam::IsInitialized() const {
  return true;
}

void GainSolverParam::Swap(GainSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSolverParam::InternalSwap(GainSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(max_gain_, other->max_gain_);
  std::swap(min_gain_, other->min_gain_);
  std::swap(gain_plus_, other->gain_plus_);
  std::swap(gain_mult_, other->gain_mult_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSolverParam

// float learning_rate = 1;
void GainSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float GainSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.learning_rate)
  return learning_rate_;
}
void GainSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.learning_rate)
}

// float momentum = 2;
void GainSolverParam::clear_momentum() {
  momentum_ = 0;
}
float GainSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.momentum)
  return momentum_;
}
void GainSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.momentum)
}

// float max_gain = 3;
void GainSolverParam::clear_max_gain() {
  max_gain_ = 0;
}
float GainSolverParam::max_gain() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.max_gain)
  return max_gain_;
}
void GainSolverParam::set_max_gain(float value) {
  
  max_gain_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.max_gain)
}

// float min_gain = 4;
void GainSolverParam::clear_min_gain() {
  min_gain_ = 0;
}
float GainSolverParam::min_gain() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.min_gain)
  return min_gain_;
}
void GainSolverParam::set_min_gain(float value) {
  
  min_gain_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.min_gain)
}

// float gain_plus = 5;
void GainSolverParam::clear_gain_plus() {
  gain_plus_ = 0;
}
float GainSolverParam::gain_plus() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.gain_plus)
  return gain_plus_;
}
void GainSolverParam::set_gain_plus(float value) {
  
  gain_plus_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.gain_plus)
}

// float gain_mult = 6;
void GainSolverParam::clear_gain_mult() {
  gain_mult_ = 0;
}
float GainSolverParam::gain_mult() const {
  // @@protoc_insertion_point(field_get:GainSolverParam.gain_mult)
  return gain_mult_;
}
void GainSolverParam::set_gain_mult(float value) {
  
  gain_mult_ = value;
  // @@protoc_insertion_point(field_set:GainSolverParam.gain_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaDeltaSolverParam::kLearningRateFieldNumber;
const int AdaDeltaSolverParam::kMomentumFieldNumber;
const int AdaDeltaSolverParam::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaDeltaSolverParam::AdaDeltaSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdaDeltaSolverParam)
}
AdaDeltaSolverParam::AdaDeltaSolverParam(const AdaDeltaSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:AdaDeltaSolverParam)
}

void AdaDeltaSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
  _cached_size_ = 0;
}

AdaDeltaSolverParam::~AdaDeltaSolverParam() {
  // @@protoc_insertion_point(destructor:AdaDeltaSolverParam)
  SharedDtor();
}

void AdaDeltaSolverParam::SharedDtor() {
}

void AdaDeltaSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaDeltaSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[34].descriptor;
}

const AdaDeltaSolverParam& AdaDeltaSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdaDeltaSolverParam* AdaDeltaSolverParam::New(::google::protobuf::Arena* arena) const {
  AdaDeltaSolverParam* n = new AdaDeltaSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaDeltaSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:AdaDeltaSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
}

bool AdaDeltaSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AdaDeltaSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdaDeltaSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdaDeltaSolverParam)
  return false;
#undef DO_
}

void AdaDeltaSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdaDeltaSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // float delta = 3;
  if (this->delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delta(), output);
  }

  // @@protoc_insertion_point(serialize_end:AdaDeltaSolverParam)
}

::google::protobuf::uint8* AdaDeltaSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AdaDeltaSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // float delta = 3;
  if (this->delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->delta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AdaDeltaSolverParam)
  return target;
}

size_t AdaDeltaSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdaDeltaSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float delta = 3;
  if (this->delta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaDeltaSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AdaDeltaSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaDeltaSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaDeltaSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AdaDeltaSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AdaDeltaSolverParam)
    MergeFrom(*source);
  }
}

void AdaDeltaSolverParam::MergeFrom(const AdaDeltaSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdaDeltaSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
}

void AdaDeltaSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AdaDeltaSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaDeltaSolverParam::CopyFrom(const AdaDeltaSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdaDeltaSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaDeltaSolverParam::IsInitialized() const {
  return true;
}

void AdaDeltaSolverParam::Swap(AdaDeltaSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaDeltaSolverParam::InternalSwap(AdaDeltaSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(delta_, other->delta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaDeltaSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaDeltaSolverParam

// float learning_rate = 1;
void AdaDeltaSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float AdaDeltaSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:AdaDeltaSolverParam.learning_rate)
  return learning_rate_;
}
void AdaDeltaSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:AdaDeltaSolverParam.learning_rate)
}

// float momentum = 2;
void AdaDeltaSolverParam::clear_momentum() {
  momentum_ = 0;
}
float AdaDeltaSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:AdaDeltaSolverParam.momentum)
  return momentum_;
}
void AdaDeltaSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:AdaDeltaSolverParam.momentum)
}

// float delta = 3;
void AdaDeltaSolverParam::clear_delta() {
  delta_ = 0;
}
float AdaDeltaSolverParam::delta() const {
  // @@protoc_insertion_point(field_get:AdaDeltaSolverParam.delta)
  return delta_;
}
void AdaDeltaSolverParam::set_delta(float value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:AdaDeltaSolverParam.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdamSolverParam::kLearningRateFieldNumber;
const int AdamSolverParam::kBeta1FieldNumber;
const int AdamSolverParam::kBeta2FieldNumber;
const int AdamSolverParam::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdamSolverParam::AdamSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdamSolverParam)
}
AdamSolverParam::AdamSolverParam(const AdamSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:AdamSolverParam)
}

void AdamSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
  _cached_size_ = 0;
}

AdamSolverParam::~AdamSolverParam() {
  // @@protoc_insertion_point(destructor:AdamSolverParam)
  SharedDtor();
}

void AdamSolverParam::SharedDtor() {
}

void AdamSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdamSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[35].descriptor;
}

const AdamSolverParam& AdamSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdamSolverParam* AdamSolverParam::New(::google::protobuf::Arena* arena) const {
  AdamSolverParam* n = new AdamSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdamSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:AdamSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
}

bool AdamSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AdamSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdamSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdamSolverParam)
  return false;
#undef DO_
}

void AdamSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdamSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta1(), output);
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta2(), output);
  }

  // float eps = 4;
  if (this->eps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->eps(), output);
  }

  // @@protoc_insertion_point(serialize_end:AdamSolverParam)
}

::google::protobuf::uint8* AdamSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AdamSolverParam)
  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta1(), target);
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta2(), target);
  }

  // float eps = 4;
  if (this->eps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->eps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AdamSolverParam)
  return target;
}

size_t AdamSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdamSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    total_size += 1 + 4;
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    total_size += 1 + 4;
  }

  // float eps = 4;
  if (this->eps() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdamSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AdamSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdamSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdamSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AdamSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AdamSolverParam)
    MergeFrom(*source);
  }
}

void AdamSolverParam::MergeFrom(const AdamSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdamSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.beta1() != 0) {
    set_beta1(from.beta1());
  }
  if (from.beta2() != 0) {
    set_beta2(from.beta2());
  }
  if (from.eps() != 0) {
    set_eps(from.eps());
  }
}

void AdamSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AdamSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdamSolverParam::CopyFrom(const AdamSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdamSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdamSolverParam::IsInitialized() const {
  return true;
}

void AdamSolverParam::Swap(AdamSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdamSolverParam::InternalSwap(AdamSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(beta1_, other->beta1_);
  std::swap(beta2_, other->beta2_);
  std::swap(eps_, other->eps_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdamSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdamSolverParam

// float learning_rate = 1;
void AdamSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float AdamSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:AdamSolverParam.learning_rate)
  return learning_rate_;
}
void AdamSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:AdamSolverParam.learning_rate)
}

// float beta1 = 2;
void AdamSolverParam::clear_beta1() {
  beta1_ = 0;
}
float AdamSolverParam::beta1() const {
  // @@protoc_insertion_point(field_get:AdamSolverParam.beta1)
  return beta1_;
}
void AdamSolverParam::set_beta1(float value) {
  
  beta1_ = value;
  // @@protoc_insertion_point(field_set:AdamSolverParam.beta1)
}

// float beta2 = 3;
void AdamSolverParam::clear_beta2() {
  beta2_ = 0;
}
float AdamSolverParam::beta2() const {
  // @@protoc_insertion_point(field_get:AdamSolverParam.beta2)
  return beta2_;
}
void AdamSolverParam::set_beta2(float value) {
  
  beta2_ = value;
  // @@protoc_insertion_point(field_set:AdamSolverParam.beta2)
}

// float eps = 4;
void AdamSolverParam::clear_eps() {
  eps_ = 0;
}
float AdamSolverParam::eps() const {
  // @@protoc_insertion_point(field_get:AdamSolverParam.eps)
  return eps_;
}
void AdamSolverParam::set_eps(float value) {
  
  eps_ = value;
  // @@protoc_insertion_point(field_set:AdamSolverParam.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParam::kNameFieldNumber;
const int SolverParam::kSgdSolverFieldNumber;
const int SolverParam::kGainSolverFieldNumber;
const int SolverParam::kAdamSolverFieldNumber;
const int SolverParam::kAdadeltaSolverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParam::SolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SolverParam)
}
SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sgd_solver()) {
    sgd_solver_ = new ::SGDSolverParam(*from.sgd_solver_);
  } else {
    sgd_solver_ = NULL;
  }
  if (from.has_gain_solver()) {
    gain_solver_ = new ::GainSolverParam(*from.gain_solver_);
  } else {
    gain_solver_ = NULL;
  }
  if (from.has_adam_solver()) {
    adam_solver_ = new ::AdamSolverParam(*from.adam_solver_);
  } else {
    adam_solver_ = NULL;
  }
  if (from.has_adadelta_solver()) {
    adadelta_solver_ = new ::AdaDeltaSolverParam(*from.adadelta_solver_);
  } else {
    adadelta_solver_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SolverParam)
}

void SolverParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sgd_solver_, 0, reinterpret_cast<char*>(&adadelta_solver_) -
    reinterpret_cast<char*>(&sgd_solver_) + sizeof(adadelta_solver_));
  _cached_size_ = 0;
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:SolverParam)
  SharedDtor();
}

void SolverParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sgd_solver_;
  }
  if (this != internal_default_instance()) {
    delete gain_solver_;
  }
  if (this != internal_default_instance()) {
    delete adam_solver_;
  }
  if (this != internal_default_instance()) {
    delete adadelta_solver_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[36].descriptor;
}

const SolverParam& SolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParam* SolverParam::New(::google::protobuf::Arena* arena) const {
  SolverParam* n = new SolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:SolverParam)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) {
    delete sgd_solver_;
  }
  sgd_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) {
    delete gain_solver_;
  }
  gain_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && adam_solver_ != NULL) {
    delete adam_solver_;
  }
  adam_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && adadelta_solver_ != NULL) {
    delete adadelta_solver_;
  }
  adadelta_solver_ = NULL;
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SolverParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SGDSolverParam sgd_solver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GainSolverParam gain_solver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AdamSolverParam adam_solver = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adam_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AdaDeltaSolverParam adadelta_solver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adadelta_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SolverParam)
  return false;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SolverParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SolverParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sgd_solver_, output);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gain_solver_, output);
  }

  // .AdamSolverParam adam_solver = 4;
  if (this->has_adam_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->adam_solver_, output);
  }

  // .AdaDeltaSolverParam adadelta_solver = 5;
  if (this->has_adadelta_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->adadelta_solver_, output);
  }

  // @@protoc_insertion_point(serialize_end:SolverParam)
}

::google::protobuf::uint8* SolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SolverParam)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SolverParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sgd_solver_, false, target);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->gain_solver_, false, target);
  }

  // .AdamSolverParam adam_solver = 4;
  if (this->has_adam_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->adam_solver_, false, target);
  }

  // .AdaDeltaSolverParam adadelta_solver = 5;
  if (this->has_adadelta_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->adadelta_solver_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SolverParam)
  return target;
}

size_t SolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SolverParam)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .SGDSolverParam sgd_solver = 2;
  if (this->has_sgd_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sgd_solver_);
  }

  // .GainSolverParam gain_solver = 3;
  if (this->has_gain_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gain_solver_);
  }

  // .AdamSolverParam adam_solver = 4;
  if (this->has_adam_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adam_solver_);
  }

  // .AdaDeltaSolverParam adadelta_solver = 5;
  if (this->has_adadelta_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adadelta_solver_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SolverParam)
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sgd_solver()) {
    mutable_sgd_solver()->::SGDSolverParam::MergeFrom(from.sgd_solver());
  }
  if (from.has_gain_solver()) {
    mutable_gain_solver()->::GainSolverParam::MergeFrom(from.gain_solver());
  }
  if (from.has_adam_solver()) {
    mutable_adam_solver()->::AdamSolverParam::MergeFrom(from.adam_solver());
  }
  if (from.has_adadelta_solver()) {
    mutable_adadelta_solver()->::AdaDeltaSolverParam::MergeFrom(from.adadelta_solver());
  }
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParam::InternalSwap(SolverParam* other) {
  name_.Swap(&other->name_);
  std::swap(sgd_solver_, other->sgd_solver_);
  std::swap(gain_solver_, other->gain_solver_);
  std::swap(adam_solver_, other->adam_solver_);
  std::swap(adadelta_solver_, other->adadelta_solver_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParam

// string name = 1;
void SolverParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SolverParam::name() const {
  // @@protoc_insertion_point(field_get:SolverParam.name)
  return name_.GetNoArena();
}
void SolverParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SolverParam.name)
}
#if LANG_CXX11
void SolverParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SolverParam.name)
}
#endif
void SolverParam::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SolverParam.name)
}
void SolverParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SolverParam.name)
}
::std::string* SolverParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SolverParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParam::release_name() {
  // @@protoc_insertion_point(field_release:SolverParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SolverParam.name)
}

// .SGDSolverParam sgd_solver = 2;
bool SolverParam::has_sgd_solver() const {
  return this != internal_default_instance() && sgd_solver_ != NULL;
}
void SolverParam::clear_sgd_solver() {
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) delete sgd_solver_;
  sgd_solver_ = NULL;
}
const ::SGDSolverParam& SolverParam::sgd_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.sgd_solver)
  return sgd_solver_ != NULL ? *sgd_solver_
                         : *::SGDSolverParam::internal_default_instance();
}
::SGDSolverParam* SolverParam::mutable_sgd_solver() {
  
  if (sgd_solver_ == NULL) {
    sgd_solver_ = new ::SGDSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.sgd_solver)
  return sgd_solver_;
}
::SGDSolverParam* SolverParam::release_sgd_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.sgd_solver)
  
  ::SGDSolverParam* temp = sgd_solver_;
  sgd_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_sgd_solver(::SGDSolverParam* sgd_solver) {
  delete sgd_solver_;
  sgd_solver_ = sgd_solver;
  if (sgd_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.sgd_solver)
}

// .GainSolverParam gain_solver = 3;
bool SolverParam::has_gain_solver() const {
  return this != internal_default_instance() && gain_solver_ != NULL;
}
void SolverParam::clear_gain_solver() {
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) delete gain_solver_;
  gain_solver_ = NULL;
}
const ::GainSolverParam& SolverParam::gain_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.gain_solver)
  return gain_solver_ != NULL ? *gain_solver_
                         : *::GainSolverParam::internal_default_instance();
}
::GainSolverParam* SolverParam::mutable_gain_solver() {
  
  if (gain_solver_ == NULL) {
    gain_solver_ = new ::GainSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.gain_solver)
  return gain_solver_;
}
::GainSolverParam* SolverParam::release_gain_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.gain_solver)
  
  ::GainSolverParam* temp = gain_solver_;
  gain_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_gain_solver(::GainSolverParam* gain_solver) {
  delete gain_solver_;
  gain_solver_ = gain_solver;
  if (gain_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.gain_solver)
}

// .AdamSolverParam adam_solver = 4;
bool SolverParam::has_adam_solver() const {
  return this != internal_default_instance() && adam_solver_ != NULL;
}
void SolverParam::clear_adam_solver() {
  if (GetArenaNoVirtual() == NULL && adam_solver_ != NULL) delete adam_solver_;
  adam_solver_ = NULL;
}
const ::AdamSolverParam& SolverParam::adam_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.adam_solver)
  return adam_solver_ != NULL ? *adam_solver_
                         : *::AdamSolverParam::internal_default_instance();
}
::AdamSolverParam* SolverParam::mutable_adam_solver() {
  
  if (adam_solver_ == NULL) {
    adam_solver_ = new ::AdamSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.adam_solver)
  return adam_solver_;
}
::AdamSolverParam* SolverParam::release_adam_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.adam_solver)
  
  ::AdamSolverParam* temp = adam_solver_;
  adam_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_adam_solver(::AdamSolverParam* adam_solver) {
  delete adam_solver_;
  adam_solver_ = adam_solver;
  if (adam_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.adam_solver)
}

// .AdaDeltaSolverParam adadelta_solver = 5;
bool SolverParam::has_adadelta_solver() const {
  return this != internal_default_instance() && adadelta_solver_ != NULL;
}
void SolverParam::clear_adadelta_solver() {
  if (GetArenaNoVirtual() == NULL && adadelta_solver_ != NULL) delete adadelta_solver_;
  adadelta_solver_ = NULL;
}
const ::AdaDeltaSolverParam& SolverParam::adadelta_solver() const {
  // @@protoc_insertion_point(field_get:SolverParam.adadelta_solver)
  return adadelta_solver_ != NULL ? *adadelta_solver_
                         : *::AdaDeltaSolverParam::internal_default_instance();
}
::AdaDeltaSolverParam* SolverParam::mutable_adadelta_solver() {
  
  if (adadelta_solver_ == NULL) {
    adadelta_solver_ = new ::AdaDeltaSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:SolverParam.adadelta_solver)
  return adadelta_solver_;
}
::AdaDeltaSolverParam* SolverParam::release_adadelta_solver() {
  // @@protoc_insertion_point(field_release:SolverParam.adadelta_solver)
  
  ::AdaDeltaSolverParam* temp = adadelta_solver_;
  adadelta_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_adadelta_solver(::AdaDeltaSolverParam* adadelta_solver) {
  delete adadelta_solver_;
  adadelta_solver_ = adadelta_solver;
  if (adadelta_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SolverParam.adadelta_solver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseParam::kPhaseFieldNumber;
const int PhaseParam::kBehaviourFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseParam::PhaseParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PhaseParam)
}
PhaseParam::PhaseParam(const PhaseParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phase().size() > 0) {
    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  behaviour_ = from.behaviour_;
  // @@protoc_insertion_point(copy_constructor:PhaseParam)
}

void PhaseParam::SharedCtor() {
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  behaviour_ = 0;
  _cached_size_ = 0;
}

PhaseParam::~PhaseParam() {
  // @@protoc_insertion_point(destructor:PhaseParam)
  SharedDtor();
}

void PhaseParam::SharedDtor() {
  phase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhaseParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhaseParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[37].descriptor;
}

const PhaseParam& PhaseParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhaseParam* PhaseParam::New(::google::protobuf::Arena* arena) const {
  PhaseParam* n = new PhaseParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhaseParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PhaseParam)
  phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  behaviour_ = 0;
}

bool PhaseParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PhaseParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase().data(), this->phase().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PhaseParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PhaseParam.PhaseBehaviour behaviour = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behaviour(static_cast< ::PhaseParam_PhaseBehaviour >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PhaseParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PhaseParam)
  return false;
#undef DO_
}

void PhaseParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PhaseParam)
  // string phase = 1;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), this->phase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PhaseParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phase(), output);
  }

  // .PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->behaviour(), output);
  }

  // @@protoc_insertion_point(serialize_end:PhaseParam)
}

::google::protobuf::uint8* PhaseParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PhaseParam)
  // string phase = 1;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), this->phase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PhaseParam.phase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phase(), target);
  }

  // .PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->behaviour(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PhaseParam)
  return target;
}

size_t PhaseParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PhaseParam)
  size_t total_size = 0;

  // string phase = 1;
  if (this->phase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phase());
  }

  // .PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behaviour());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhaseParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PhaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PhaseParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PhaseParam)
    MergeFrom(*source);
  }
}

void PhaseParam::MergeFrom(const PhaseParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PhaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.phase().size() > 0) {

    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  if (from.behaviour() != 0) {
    set_behaviour(from.behaviour());
  }
}

void PhaseParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PhaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseParam::CopyFrom(const PhaseParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PhaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseParam::IsInitialized() const {
  return true;
}

void PhaseParam::Swap(PhaseParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhaseParam::InternalSwap(PhaseParam* other) {
  phase_.Swap(&other->phase_);
  std::swap(behaviour_, other->behaviour_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhaseParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhaseParam

// string phase = 1;
void PhaseParam::clear_phase() {
  phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhaseParam::phase() const {
  // @@protoc_insertion_point(field_get:PhaseParam.phase)
  return phase_.GetNoArena();
}
void PhaseParam::set_phase(const ::std::string& value) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PhaseParam.phase)
}
#if LANG_CXX11
void PhaseParam::set_phase(::std::string&& value) {
  
  phase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PhaseParam.phase)
}
#endif
void PhaseParam::set_phase(const char* value) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PhaseParam.phase)
}
void PhaseParam::set_phase(const char* value, size_t size) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PhaseParam.phase)
}
::std::string* PhaseParam::mutable_phase() {
  
  // @@protoc_insertion_point(field_mutable:PhaseParam.phase)
  return phase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhaseParam::release_phase() {
  // @@protoc_insertion_point(field_release:PhaseParam.phase)
  
  return phase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhaseParam::set_allocated_phase(::std::string* phase) {
  if (phase != NULL) {
    
  } else {
    
  }
  phase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phase);
  // @@protoc_insertion_point(field_set_allocated:PhaseParam.phase)
}

// .PhaseParam.PhaseBehaviour behaviour = 2;
void PhaseParam::clear_behaviour() {
  behaviour_ = 0;
}
::PhaseParam_PhaseBehaviour PhaseParam::behaviour() const {
  // @@protoc_insertion_point(field_get:PhaseParam.behaviour)
  return static_cast< ::PhaseParam_PhaseBehaviour >(behaviour_);
}
void PhaseParam::set_behaviour(::PhaseParam_PhaseBehaviour value) {
  
  behaviour_ = value;
  // @@protoc_insertion_point(field_set:PhaseParam.behaviour)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphParam::kNodeFieldNumber;
const int GraphParam::kSolverFieldNumber;
const int GraphParam::kPhaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphParam::GraphParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GraphParam)
}
GraphParam::GraphParam(const GraphParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_(from.node_),
      solver_(from.solver_),
      phase_(from.phase_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GraphParam)
}

void GraphParam::SharedCtor() {
  _cached_size_ = 0;
}

GraphParam::~GraphParam() {
  // @@protoc_insertion_point(destructor:GraphParam)
  SharedDtor();
}

void GraphParam::SharedDtor() {
}

void GraphParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[38].descriptor;
}

const GraphParam& GraphParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

GraphParam* GraphParam::New(::google::protobuf::Arena* arena) const {
  GraphParam* n = new GraphParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GraphParam)
  node_.Clear();
  solver_.Clear();
  phase_.Clear();
}

bool GraphParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GraphParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeParam node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SolverParam solver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_solver()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .PhaseParam phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_phase()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GraphParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GraphParam)
  return false;
#undef DO_
}

void GraphParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GraphParam)
  // repeated .NodeParam node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .SolverParam solver = 2;
  for (unsigned int i = 0, n = this->solver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->solver(i), output);
  }

  // repeated .PhaseParam phase = 3;
  for (unsigned int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phase(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GraphParam)
}

::google::protobuf::uint8* GraphParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GraphParam)
  // repeated .NodeParam node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), false, target);
  }

  // repeated .SolverParam solver = 2;
  for (unsigned int i = 0, n = this->solver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->solver(i), false, target);
  }

  // repeated .PhaseParam phase = 3;
  for (unsigned int i = 0, n = this->phase_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->phase(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GraphParam)
  return target;
}

size_t GraphParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GraphParam)
  size_t total_size = 0;

  // repeated .NodeParam node = 1;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .SolverParam solver = 2;
  {
    unsigned int count = this->solver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solver(i));
    }
  }

  // repeated .PhaseParam phase = 3;
  {
    unsigned int count = this->phase_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phase(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GraphParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GraphParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GraphParam)
    MergeFrom(*source);
  }
}

void GraphParam::MergeFrom(const GraphParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GraphParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_.MergeFrom(from.node_);
  solver_.MergeFrom(from.solver_);
  phase_.MergeFrom(from.phase_);
}

void GraphParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GraphParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphParam::CopyFrom(const GraphParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GraphParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphParam::IsInitialized() const {
  return true;
}

void GraphParam::Swap(GraphParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphParam::InternalSwap(GraphParam* other) {
  node_.UnsafeArenaSwap(&other->node_);
  solver_.UnsafeArenaSwap(&other->solver_);
  phase_.UnsafeArenaSwap(&other->phase_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphParam

// repeated .NodeParam node = 1;
int GraphParam::node_size() const {
  return node_.size();
}
void GraphParam::clear_node() {
  node_.Clear();
}
const ::NodeParam& GraphParam::node(int index) const {
  // @@protoc_insertion_point(field_get:GraphParam.node)
  return node_.Get(index);
}
::NodeParam* GraphParam::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:GraphParam.node)
  return node_.Mutable(index);
}
::NodeParam* GraphParam::add_node() {
  // @@protoc_insertion_point(field_add:GraphParam.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::NodeParam >*
GraphParam::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:GraphParam.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::NodeParam >&
GraphParam::node() const {
  // @@protoc_insertion_point(field_list:GraphParam.node)
  return node_;
}

// repeated .SolverParam solver = 2;
int GraphParam::solver_size() const {
  return solver_.size();
}
void GraphParam::clear_solver() {
  solver_.Clear();
}
const ::SolverParam& GraphParam::solver(int index) const {
  // @@protoc_insertion_point(field_get:GraphParam.solver)
  return solver_.Get(index);
}
::SolverParam* GraphParam::mutable_solver(int index) {
  // @@protoc_insertion_point(field_mutable:GraphParam.solver)
  return solver_.Mutable(index);
}
::SolverParam* GraphParam::add_solver() {
  // @@protoc_insertion_point(field_add:GraphParam.solver)
  return solver_.Add();
}
::google::protobuf::RepeatedPtrField< ::SolverParam >*
GraphParam::mutable_solver() {
  // @@protoc_insertion_point(field_mutable_list:GraphParam.solver)
  return &solver_;
}
const ::google::protobuf::RepeatedPtrField< ::SolverParam >&
GraphParam::solver() const {
  // @@protoc_insertion_point(field_list:GraphParam.solver)
  return solver_;
}

// repeated .PhaseParam phase = 3;
int GraphParam::phase_size() const {
  return phase_.size();
}
void GraphParam::clear_phase() {
  phase_.Clear();
}
const ::PhaseParam& GraphParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:GraphParam.phase)
  return phase_.Get(index);
}
::PhaseParam* GraphParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:GraphParam.phase)
  return phase_.Mutable(index);
}
::PhaseParam* GraphParam::add_phase() {
  // @@protoc_insertion_point(field_add:GraphParam.phase)
  return phase_.Add();
}
::google::protobuf::RepeatedPtrField< ::PhaseParam >*
GraphParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:GraphParam.phase)
  return &phase_;
}
const ::google::protobuf::RepeatedPtrField< ::PhaseParam >&
GraphParam::phase() const {
  // @@protoc_insertion_point(field_list:GraphParam.phase)
  return phase_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
