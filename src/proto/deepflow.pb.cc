// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deepflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace deepflow {
class TensorDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorData> {
} _TensorData_default_instance_;
class TensorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TensorParam> {
} _TensorParam_default_instance_;
class MultiplexerParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiplexerParam> {
} _MultiplexerParam_default_instance_;
class PhaseplexerParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhaseplexerParam> {
} _PhaseplexerParam_default_instance_;
class RandomSelectorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RandomSelectorParam> {
} _RandomSelectorParam_default_instance_;
class AccumulatorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccumulatorParam> {
} _AccumulatorParam_default_instance_;
class PsnrParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PsnrParam> {
} _PsnrParam_default_instance_;
class LoggerParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoggerParam> {
} _LoggerParam_default_instance_;
class PrintParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrintParam> {
} _PrintParam_default_instance_;
class SIOOutputParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SIOOutputParam> {
} _SIOOutputParam_default_instance_;
class DotParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DotParam> {
} _DotParam_default_instance_;
class AddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddParam> {
} _AddParam_default_instance_;
class NegateParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NegateParam> {
} _NegateParam_default_instance_;
class DisplayParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisplayParam> {
} _DisplayParam_default_instance_;
class LogParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogParam> {
} _LogParam_default_instance_;
class LossParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LossParam> {
} _LossParam_default_instance_;
class EqualParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EqualParam> {
} _EqualParam_default_instance_;
class BiasAddParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BiasAddParam> {
} _BiasAddParam_default_instance_;
class PoolingParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PoolingParam> {
} _PoolingParam_default_instance_;
class TransposedConv2dParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransposedConv2dParam> {
} _TransposedConv2dParam_default_instance_;
class Conv2dParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Conv2dParam> {
} _Conv2dParam_default_instance_;
class DropoutParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropoutParam> {
} _DropoutParam_default_instance_;
class MatMulParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MatMulParam> {
} _MatMulParam_default_instance_;
class LeakyReluParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeakyReluParam> {
} _LeakyReluParam_default_instance_;
class ReduceParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReduceParam> {
} _ReduceParam_default_instance_;
class SnapshotParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnapshotParam> {
} _SnapshotParam_default_instance_;
class PlaceHolderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlaceHolderParam> {
} _PlaceHolderParam_default_instance_;
class RestructureParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestructureParam> {
} _RestructureParam_default_instance_;
class VariableParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VariableParam> {
} _VariableParam_default_instance_;
class DataGeneratorParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataGeneratorParam> {
} _DataGeneratorParam_default_instance_;
class ActivationParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActivationParam> {
} _ActivationParam_default_instance_;
class ImageBatchReaderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageBatchReaderParam> {
} _ImageBatchReaderParam_default_instance_;
class ImageReaderParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageReaderParam> {
} _ImageReaderParam_default_instance_;
class MnistParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MnistParam> {
} _MnistParam_default_instance_;
class CastFloatParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastFloatParam> {
} _CastFloatParam_default_instance_;
class BatchNormalizationParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchNormalizationParam> {
} _BatchNormalizationParam_default_instance_;
class ReplayMemoryParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplayMemoryParam> {
} _ReplayMemoryParam_default_instance_;
class NodeParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeParam> {
} _NodeParam_default_instance_;
class SquareParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SquareParam> {
} _SquareParam_default_instance_;
class EuclideanDistanceParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EuclideanDistanceParam> {
} _EuclideanDistanceParam_default_instance_;
class SoftmaxParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParam> {
} _SoftmaxParam_default_instance_;
class InitFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitFillParam> {
} _InitFillParam_default_instance_;
class InitIndexFillParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitIndexFillParam> {
} _InitIndexFillParam_default_instance_;
class InitRandomUniformParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRandomUniformParam> {
} _InitRandomUniformParam_default_instance_;
class InitRandomNormalParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRandomNormalParam> {
} _InitRandomNormalParam_default_instance_;
class InitStepParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitStepParam> {
} _InitStepParam_default_instance_;
class InitThreeStateParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitThreeStateParam> {
} _InitThreeStateParam_default_instance_;
class InitParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitParam> {
} _InitParam_default_instance_;
class SGDSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SGDSolverParam> {
} _SGDSolverParam_default_instance_;
class GainSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GainSolverParam> {
} _GainSolverParam_default_instance_;
class AdaDeltaSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdaDeltaSolverParam> {
} _AdaDeltaSolverParam_default_instance_;
class AdamSolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdamSolverParam> {
} _AdamSolverParam_default_instance_;
class SolverParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SolverParam> {
} _SolverParam_default_instance_;
class PhaseParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhaseParam> {
} _PhaseParam_default_instance_;
class BlockParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockParam> {
} _BlockParam_default_instance_;

namespace protobuf_deepflow_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[55];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorData, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorParam, dims_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerParam, num_inputs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseplexerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseplexerParam, phase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelectorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelectorParam, probability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulatorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulatorParam, reset_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PsnrParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PsnrParam, print_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, num_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, logging_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggerParam, logging_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, num_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, print_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintParam, print_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIOOutputParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIOOutputParam, num_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIOOutputParam, print_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIOOutputParam, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIOOutputParam, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, beta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegateParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegateParam, negate_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, delay_msec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, display_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayParam, epoch_frequency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParam, coef_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParam, reduce_op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasAddParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, window_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, window_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, h_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, v_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, h_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParam, v_stride_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, dilation_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransposedConv2dParam, dilation_w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, dilation_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, dilation_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conv2dParam, negative_slope_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParam, dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParam, train_only_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatMulParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeakyReluParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeakyReluParam, negative_slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeakyReluParam, randomize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, reduce_op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, reduce_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReduceParam, output_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotParam, per_image_width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceHolderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceHolderParam, tensor_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestructureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestructureParam, first_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestructureParam, second_dim_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, init_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, solver_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableParam, weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorParam, num_samples_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivationParam, coef_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBatchReaderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBatchReaderParam, folder_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBatchReaderParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageBatchReaderParam, randomize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReaderParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReaderParam, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReaderParam, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistParam, folder_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistParam, reader_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistParam, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MnistParam, batch_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastFloatParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, exp_avg_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, alpha_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, beta_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, alpha_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, beta_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormalizationParam, var_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayMemoryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayMemoryParam, capacity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, block_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, variable_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, place_holder_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, phaseplexer_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, bias_add_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, conv_2d_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, transposed_conv_2d_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, leaky_relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, square_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, matmul_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, reduce_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, equal_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, print_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, cast_float_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, accumulator_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, display_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, activation_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, psnr_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, random_selector_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, logger_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, restructure_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, image_reader_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, multiplexer_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, negate_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, batch_normalization_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, mnist_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, data_generator_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, image_batch_reader_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, dot_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, replay_memory_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, euclidean_distance_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, sio_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, log_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeParam, loss_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SquareParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EuclideanDistanceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitFillParam, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitIndexFillParam, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomUniformParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomNormalParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomNormalParam, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRandomNormalParam, stddev_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitStepParam, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitThreeStateParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, tensor_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, init_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, index_fill_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, random_uniform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, step_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, random_normal_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitParam, three_state_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDSolverParam, momentum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, max_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, min_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_plus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainSolverParam, gain_mult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaDeltaSolverParam, delta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, learning_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, beta1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, beta2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdamSolverParam, eps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, enable_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, sgd_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, gain_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, adam_solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, adadelta_solver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhaseParam, behaviour_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, solver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockParam, initializer_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TensorData)},
  { 6, -1, sizeof(TensorParam)},
  { 13, -1, sizeof(MultiplexerParam)},
  { 19, -1, sizeof(PhaseplexerParam)},
  { 25, -1, sizeof(RandomSelectorParam)},
  { 31, -1, sizeof(AccumulatorParam)},
  { 37, -1, sizeof(PsnrParam)},
  { 43, -1, sizeof(LoggerParam)},
  { 53, -1, sizeof(PrintParam)},
  { 62, -1, sizeof(SIOOutputParam)},
  { 71, -1, sizeof(DotParam)},
  { 76, -1, sizeof(AddParam)},
  { 83, -1, sizeof(NegateParam)},
  { 89, -1, sizeof(DisplayParam)},
  { 98, -1, sizeof(LogParam)},
  { 104, -1, sizeof(LossParam)},
  { 110, -1, sizeof(EqualParam)},
  { 115, -1, sizeof(BiasAddParam)},
  { 120, -1, sizeof(PoolingParam)},
  { 131, -1, sizeof(TransposedConv2dParam)},
  { 142, -1, sizeof(Conv2dParam)},
  { 154, -1, sizeof(DropoutParam)},
  { 161, -1, sizeof(MatMulParam)},
  { 166, -1, sizeof(LeakyReluParam)},
  { 173, -1, sizeof(ReduceParam)},
  { 181, -1, sizeof(SnapshotParam)},
  { 190, -1, sizeof(PlaceHolderParam)},
  { 196, -1, sizeof(RestructureParam)},
  { 203, -1, sizeof(VariableParam)},
  { 211, -1, sizeof(DataGeneratorParam)},
  { 217, -1, sizeof(ActivationParam)},
  { 224, -1, sizeof(ImageBatchReaderParam)},
  { 232, -1, sizeof(ImageReaderParam)},
  { 239, -1, sizeof(MnistParam)},
  { 248, -1, sizeof(CastFloatParam)},
  { 253, -1, sizeof(BatchNormalizationParam)},
  { 268, -1, sizeof(ReplayMemoryParam)},
  { 274, -1, sizeof(NodeParam)},
  { 321, -1, sizeof(SquareParam)},
  { 326, -1, sizeof(EuclideanDistanceParam)},
  { 331, -1, sizeof(SoftmaxParam)},
  { 336, -1, sizeof(InitFillParam)},
  { 342, -1, sizeof(InitIndexFillParam)},
  { 348, -1, sizeof(InitRandomUniformParam)},
  { 355, -1, sizeof(InitRandomNormalParam)},
  { 362, -1, sizeof(InitStepParam)},
  { 369, -1, sizeof(InitThreeStateParam)},
  { 374, -1, sizeof(InitParam)},
  { 388, -1, sizeof(SGDSolverParam)},
  { 395, -1, sizeof(GainSolverParam)},
  { 406, -1, sizeof(AdaDeltaSolverParam)},
  { 414, -1, sizeof(AdamSolverParam)},
  { 423, -1, sizeof(SolverParam)},
  { 434, -1, sizeof(PhaseParam)},
  { 441, -1, sizeof(BlockParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TensorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiplexerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhaseplexerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomSelectorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccumulatorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PsnrParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoggerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrintParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SIOOutputParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DotParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NegateParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DisplayParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EqualParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BiasAddParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransposedConv2dParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Conv2dParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropoutParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MatMulParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeakyReluParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReduceParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnapshotParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlaceHolderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestructureParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VariableParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataGeneratorParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivationParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageBatchReaderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageReaderParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MnistParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastFloatParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNormalizationParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplayMemoryParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SquareParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EuclideanDistanceParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitIndexFillParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRandomUniformParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRandomNormalParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitStepParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitThreeStateParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SGDSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GainSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdaDeltaSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdamSolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhaseParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "deepflow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 55);
}

}  // namespace

void TableStruct::Shutdown() {
  _TensorData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TensorParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MultiplexerParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PhaseplexerParam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RandomSelectorParam_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AccumulatorParam_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PsnrParam_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LoggerParam_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _PrintParam_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SIOOutputParam_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DotParam_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _AddParam_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _NegateParam_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _DisplayParam_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _LogParam_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _LossParam_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _EqualParam_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BiasAddParam_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _PoolingParam_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _TransposedConv2dParam_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Conv2dParam_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _DropoutParam_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _MatMulParam_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _LeakyReluParam_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ReduceParam_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SnapshotParam_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _PlaceHolderParam_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _RestructureParam_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _VariableParam_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _DataGeneratorParam_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ActivationParam_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ImageBatchReaderParam_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ImageReaderParam_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _MnistParam_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CastFloatParam_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _BatchNormalizationParam_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ReplayMemoryParam_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _NodeParam_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _SquareParam_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _EuclideanDistanceParam_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _SoftmaxParam_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _InitFillParam_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _InitIndexFillParam_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _InitRandomUniformParam_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _InitRandomNormalParam_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _InitStepParam_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _InitThreeStateParam_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _InitParam_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _SGDSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _GainSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _AdaDeltaSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _AdamSolverParam_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _SolverParam_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _PhaseParam_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _BlockParam_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TensorData_default_instance_.DefaultConstruct();
  _TensorParam_default_instance_.DefaultConstruct();
  _MultiplexerParam_default_instance_.DefaultConstruct();
  _PhaseplexerParam_default_instance_.DefaultConstruct();
  _RandomSelectorParam_default_instance_.DefaultConstruct();
  _AccumulatorParam_default_instance_.DefaultConstruct();
  _PsnrParam_default_instance_.DefaultConstruct();
  _LoggerParam_default_instance_.DefaultConstruct();
  _PrintParam_default_instance_.DefaultConstruct();
  _SIOOutputParam_default_instance_.DefaultConstruct();
  _DotParam_default_instance_.DefaultConstruct();
  _AddParam_default_instance_.DefaultConstruct();
  _NegateParam_default_instance_.DefaultConstruct();
  _DisplayParam_default_instance_.DefaultConstruct();
  _LogParam_default_instance_.DefaultConstruct();
  _LossParam_default_instance_.DefaultConstruct();
  _EqualParam_default_instance_.DefaultConstruct();
  _BiasAddParam_default_instance_.DefaultConstruct();
  _PoolingParam_default_instance_.DefaultConstruct();
  _TransposedConv2dParam_default_instance_.DefaultConstruct();
  _Conv2dParam_default_instance_.DefaultConstruct();
  _DropoutParam_default_instance_.DefaultConstruct();
  _MatMulParam_default_instance_.DefaultConstruct();
  _LeakyReluParam_default_instance_.DefaultConstruct();
  _ReduceParam_default_instance_.DefaultConstruct();
  _SnapshotParam_default_instance_.DefaultConstruct();
  _PlaceHolderParam_default_instance_.DefaultConstruct();
  _RestructureParam_default_instance_.DefaultConstruct();
  _VariableParam_default_instance_.DefaultConstruct();
  _DataGeneratorParam_default_instance_.DefaultConstruct();
  _ActivationParam_default_instance_.DefaultConstruct();
  _ImageBatchReaderParam_default_instance_.DefaultConstruct();
  _ImageReaderParam_default_instance_.DefaultConstruct();
  _MnistParam_default_instance_.DefaultConstruct();
  _CastFloatParam_default_instance_.DefaultConstruct();
  _BatchNormalizationParam_default_instance_.DefaultConstruct();
  _ReplayMemoryParam_default_instance_.DefaultConstruct();
  _NodeParam_default_instance_.DefaultConstruct();
  _SquareParam_default_instance_.DefaultConstruct();
  _EuclideanDistanceParam_default_instance_.DefaultConstruct();
  _SoftmaxParam_default_instance_.DefaultConstruct();
  _InitFillParam_default_instance_.DefaultConstruct();
  _InitIndexFillParam_default_instance_.DefaultConstruct();
  _InitRandomUniformParam_default_instance_.DefaultConstruct();
  _InitRandomNormalParam_default_instance_.DefaultConstruct();
  _InitStepParam_default_instance_.DefaultConstruct();
  _InitThreeStateParam_default_instance_.DefaultConstruct();
  _InitParam_default_instance_.DefaultConstruct();
  _SGDSolverParam_default_instance_.DefaultConstruct();
  _GainSolverParam_default_instance_.DefaultConstruct();
  _AdaDeltaSolverParam_default_instance_.DefaultConstruct();
  _AdamSolverParam_default_instance_.DefaultConstruct();
  _SolverParam_default_instance_.DefaultConstruct();
  _PhaseParam_default_instance_.DefaultConstruct();
  _BlockParam_default_instance_.DefaultConstruct();
  _PlaceHolderParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::deepflow::TensorParam*>(
      ::deepflow::TensorParam::internal_default_instance());
  _VariableParam_default_instance_.get_mutable()->init_param_ = const_cast< ::deepflow::InitParam*>(
      ::deepflow::InitParam::internal_default_instance());
  _VariableParam_default_instance_.get_mutable()->weights_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _ImageBatchReaderParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::deepflow::TensorParam*>(
      ::deepflow::TensorParam::internal_default_instance());
  _BatchNormalizationParam_default_instance_.get_mutable()->scale_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _BatchNormalizationParam_default_instance_.get_mutable()->bias_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _BatchNormalizationParam_default_instance_.get_mutable()->mean_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _BatchNormalizationParam_default_instance_.get_mutable()->var_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->block_param_ = const_cast< ::deepflow::BlockParam*>(
      ::deepflow::BlockParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->variable_param_ = const_cast< ::deepflow::VariableParam*>(
      ::deepflow::VariableParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->place_holder_param_ = const_cast< ::deepflow::PlaceHolderParam*>(
      ::deepflow::PlaceHolderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->phaseplexer_param_ = const_cast< ::deepflow::PhaseplexerParam*>(
      ::deepflow::PhaseplexerParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->add_param_ = const_cast< ::deepflow::AddParam*>(
      ::deepflow::AddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->bias_add_param_ = const_cast< ::deepflow::BiasAddParam*>(
      ::deepflow::BiasAddParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->conv_2d_param_ = const_cast< ::deepflow::Conv2dParam*>(
      ::deepflow::Conv2dParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->transposed_conv_2d_param_ = const_cast< ::deepflow::TransposedConv2dParam*>(
      ::deepflow::TransposedConv2dParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->dropout_param_ = const_cast< ::deepflow::DropoutParam*>(
      ::deepflow::DropoutParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->leaky_relu_param_ = const_cast< ::deepflow::LeakyReluParam*>(
      ::deepflow::LeakyReluParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->softmax_param_ = const_cast< ::deepflow::SoftmaxParam*>(
      ::deepflow::SoftmaxParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->square_param_ = const_cast< ::deepflow::SquareParam*>(
      ::deepflow::SquareParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->matmul_param_ = const_cast< ::deepflow::MatMulParam*>(
      ::deepflow::MatMulParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->pooling_param_ = const_cast< ::deepflow::PoolingParam*>(
      ::deepflow::PoolingParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->reduce_param_ = const_cast< ::deepflow::ReduceParam*>(
      ::deepflow::ReduceParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->equal_param_ = const_cast< ::deepflow::EqualParam*>(
      ::deepflow::EqualParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->print_param_ = const_cast< ::deepflow::PrintParam*>(
      ::deepflow::PrintParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->cast_float_param_ = const_cast< ::deepflow::CastFloatParam*>(
      ::deepflow::CastFloatParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->accumulator_param_ = const_cast< ::deepflow::AccumulatorParam*>(
      ::deepflow::AccumulatorParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->display_param_ = const_cast< ::deepflow::DisplayParam*>(
      ::deepflow::DisplayParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->activation_param_ = const_cast< ::deepflow::ActivationParam*>(
      ::deepflow::ActivationParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->psnr_param_ = const_cast< ::deepflow::PsnrParam*>(
      ::deepflow::PsnrParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->random_selector_param_ = const_cast< ::deepflow::RandomSelectorParam*>(
      ::deepflow::RandomSelectorParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->logger_param_ = const_cast< ::deepflow::LoggerParam*>(
      ::deepflow::LoggerParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->restructure_param_ = const_cast< ::deepflow::RestructureParam*>(
      ::deepflow::RestructureParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->image_reader_param_ = const_cast< ::deepflow::ImageReaderParam*>(
      ::deepflow::ImageReaderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->multiplexer_param_ = const_cast< ::deepflow::MultiplexerParam*>(
      ::deepflow::MultiplexerParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->negate_param_ = const_cast< ::deepflow::NegateParam*>(
      ::deepflow::NegateParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->batch_normalization_param_ = const_cast< ::deepflow::BatchNormalizationParam*>(
      ::deepflow::BatchNormalizationParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->mnist_param_ = const_cast< ::deepflow::MnistParam*>(
      ::deepflow::MnistParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->data_generator_param_ = const_cast< ::deepflow::DataGeneratorParam*>(
      ::deepflow::DataGeneratorParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->image_batch_reader_param_ = const_cast< ::deepflow::ImageBatchReaderParam*>(
      ::deepflow::ImageBatchReaderParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->dot_param_ = const_cast< ::deepflow::DotParam*>(
      ::deepflow::DotParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->replay_memory_param_ = const_cast< ::deepflow::ReplayMemoryParam*>(
      ::deepflow::ReplayMemoryParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->euclidean_distance_param_ = const_cast< ::deepflow::EuclideanDistanceParam*>(
      ::deepflow::EuclideanDistanceParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->sio_output_param_ = const_cast< ::deepflow::SIOOutputParam*>(
      ::deepflow::SIOOutputParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->log_param_ = const_cast< ::deepflow::LogParam*>(
      ::deepflow::LogParam::internal_default_instance());
  _NodeParam_default_instance_.get_mutable()->loss_param_ = const_cast< ::deepflow::LossParam*>(
      ::deepflow::LossParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->tensor_param_ = const_cast< ::deepflow::TensorParam*>(
      ::deepflow::TensorParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->init_data_ = const_cast< ::deepflow::TensorData*>(
      ::deepflow::TensorData::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->fill_param_ = const_cast< ::deepflow::InitFillParam*>(
      ::deepflow::InitFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->index_fill_param_ = const_cast< ::deepflow::InitIndexFillParam*>(
      ::deepflow::InitIndexFillParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->random_uniform_param_ = const_cast< ::deepflow::InitRandomUniformParam*>(
      ::deepflow::InitRandomUniformParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->step_param_ = const_cast< ::deepflow::InitStepParam*>(
      ::deepflow::InitStepParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->random_normal_param_ = const_cast< ::deepflow::InitRandomNormalParam*>(
      ::deepflow::InitRandomNormalParam::internal_default_instance());
  _InitParam_default_instance_.get_mutable()->three_state_param_ = const_cast< ::deepflow::InitThreeStateParam*>(
      ::deepflow::InitThreeStateParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->sgd_solver_ = const_cast< ::deepflow::SGDSolverParam*>(
      ::deepflow::SGDSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->gain_solver_ = const_cast< ::deepflow::GainSolverParam*>(
      ::deepflow::GainSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->adam_solver_ = const_cast< ::deepflow::AdamSolverParam*>(
      ::deepflow::AdamSolverParam::internal_default_instance());
  _SolverParam_default_instance_.get_mutable()->adadelta_solver_ = const_cast< ::deepflow::AdaDeltaSolverParam*>(
      ::deepflow::AdaDeltaSolverParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016deepflow.proto\022\010deepflow\"\036\n\nTensorData"
      "\022\020\n\004data\030\001 \003(\002B\002\020\001\"\233\001\n\013TensorParam\022.\n\004ty"
      "pe\030\001 \001(\0162 .deepflow.TensorParam.TensorTy"
      "pe\022\014\n\004dims\030\002 \003(\005\"N\n\nTensorType\022\t\n\005FLOAT\020"
      "\000\022\n\n\006DOUBLE\020\001\022\010\n\004HALF\020\002\022\010\n\004INT8\020\003\022\t\n\005INT"
      "32\020\004\022\n\n\006INT8x4\020\005\"&\n\020MultiplexerParam\022\022\n\n"
      "num_inputs\030\001 \001(\005\"!\n\020PhaseplexerParam\022\r\n\005"
      "phase\030\001 \003(\t\"*\n\023RandomSelectorParam\022\023\n\013pr"
      "obability\030\001 \001(\002\"<\n\020AccumulatorParam\022(\n\nr"
      "eset_time\030\001 \001(\0162\024.deepflow.ActionTime\"5\n"
      "\tPsnrParam\022(\n\nprint_time\030\001 \001(\0162\024.deepflo"
      "w.ActionTime\"\235\001\n\013LoggerParam\022\021\n\tfile_pat"
      "h\030\001 \001(\t\022\022\n\nnum_inputs\030\002 \001(\005\022\017\n\007message\030\003"
      " \001(\t\022*\n\014logging_time\030\004 \001(\0162\024.deepflow.Ac"
      "tionTime\022*\n\014logging_type\030\005 \001(\0162\024.deepflo"
      "w.ActionType\"\205\001\n\nPrintParam\022\022\n\nnum_input"
      "s\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022(\n\nprint_time\030\003"
      " \001(\0162\024.deepflow.ActionTime\022(\n\nprint_type"
      "\030\004 \001(\0162\024.deepflow.ActionType\"j\n\016SIOOutpu"
      "tParam\022\022\n\nnum_inputs\030\001 \001(\005\022(\n\nprint_time"
      "\030\002 \001(\0162\024.deepflow.ActionTime\022\014\n\004host\030\003 \001"
      "(\t\022\014\n\004port\030\004 \001(\005\"\n\n\010DotParam\"\'\n\010AddParam"
      "\022\r\n\005alpha\030\001 \001(\002\022\014\n\004beta\030\002 \001(\002\"8\n\013NegateP"
      "aram\022)\n\013negate_type\030\001 \001(\0162\024.deepflow.Act"
      "ionType\"\223\001\n\014DisplayParam\022\022\n\ndelay_msec\030\001"
      " \001(\005\022*\n\014display_time\030\002 \001(\0162\024.deepflow.Ac"
      "tionTime\022*\n\014display_type\030\003 \001(\0162\024.deepflo"
      "w.ActionType\022\027\n\017epoch_frequency\030\004 \001(\005\"\030\n"
      "\010LogParam\022\014\n\004coef\030\001 \001(\002\"\225\001\n\tLossParam\022/\n"
      "\treduce_op\030\001 \001(\0162\034.deepflow.LossParam.Re"
      "duceOp\"W\n\010ReduceOp\022\007\n\003ADD\020\000\022\007\n\003MUL\020\001\022\007\n\003"
      "MIN\020\002\022\007\n\003MAX\020\003\022\010\n\004AMAX\020\004\022\007\n\003AVG\020\005\022\t\n\005NOR"
      "M1\020\006\022\t\n\005NORM2\020\007\"\014\n\nEqualParam\"\016\n\014BiasAdd"
      "Param\"t\n\014PoolingParam\022\020\n\010window_h\030\001 \001(\005\022"
      "\020\n\010window_w\030\002 \001(\005\022\r\n\005h_pad\030\003 \001(\005\022\r\n\005v_pa"
      "d\030\004 \001(\005\022\020\n\010h_stride\030\005 \001(\005\022\020\n\010v_stride\030\006 "
      "\001(\005\"s\n\025TransposedConv2dParam\022\r\n\005pad_h\030\001 "
      "\001(\005\022\r\n\005pad_w\030\002 \001(\005\022\t\n\001u\030\003 \001(\005\022\t\n\001v\030\004 \001(\005"
      "\022\022\n\ndilation_h\030\005 \001(\005\022\022\n\ndilation_w\030\006 \001(\005"
      "\"\201\001\n\013Conv2dParam\022\r\n\005pad_h\030\001 \001(\005\022\r\n\005pad_w"
      "\030\002 \001(\005\022\t\n\001u\030\003 \001(\005\022\t\n\001v\030\004 \001(\005\022\022\n\ndilation"
      "_h\030\005 \001(\005\022\022\n\ndilation_w\030\006 \001(\005\022\026\n\016negative"
      "_slope\030\007 \001(\002\"3\n\014DropoutParam\022\017\n\007dropout\030"
      "\001 \001(\002\022\022\n\ntrain_only\030\002 \001(\010\"\r\n\013MatMulParam"
      "\";\n\016LeakyReluParam\022\026\n\016negative_slope\030\001 \001"
      "(\002\022\021\n\trandomize\030\002 \001(\010\"\213\002\n\013ReduceParam\0221\n"
      "\treduce_op\030\001 \001(\0162\036.deepflow.ReduceParam."
      "ReduceOp\022\022\n\nreduce_dim\030\002 \001(\005\0225\n\013output_t"
      "ype\030\003 \001(\0162 .deepflow.ReduceParam.OutputT"
      "ype\"W\n\010ReduceOp\022\007\n\003ADD\020\000\022\007\n\003MUL\020\001\022\007\n\003MIN"
      "\020\002\022\007\n\003MAX\020\003\022\010\n\004AMAX\020\004\022\007\n\003AVG\020\005\022\t\n\005NORM1\020"
      "\006\022\t\n\005NORM2\020\007\"%\n\nOutputType\022\n\n\006VALUES\020\000\022\013"
      "\n\007INDICES\020\001\"v\n\rSnapshotParam\022\031\n\021snapshot"
      "_interval\030\001 \001(\005\022\027\n\017snapshot_prefix\030\002 \001(\t"
      "\022\030\n\020per_image_height\030\003 \001(\005\022\027\n\017per_image_"
      "width\030\004 \001(\005\"\?\n\020PlaceHolderParam\022+\n\014tenso"
      "r_param\030\001 \001(\0132\025.deepflow.TensorParam\"9\n\020"
      "RestructureParam\022\021\n\tfirst_dim\030\001 \001(\005\022\022\n\ns"
      "econd_dim\030\002 \001(\005\"t\n\rVariableParam\022\'\n\ninit"
      "_param\030\001 \001(\0132\023.deepflow.InitParam\022\023\n\013sol"
      "ver_name\030\002 \001(\t\022%\n\007weights\030\003 \001(\0132\024.deepfl"
      "ow.TensorData\")\n\022DataGeneratorParam\022\023\n\013n"
      "um_samples\030\001 \001(\005\"\347\001\n\017ActivationParam\022,\n\004"
      "type\030\001 \001(\0162\036.deepflow.ActivationParam.Ty"
      "pe\022\014\n\004coef\030\002 \001(\002\"\227\001\n\004Type\022\034\n\030CUDNN_ACTIV"
      "ATION_SIGMOID\020\000\022\031\n\025CUDNN_ACTIVATION_RELU"
      "\020\001\022\031\n\025CUDNN_ACTIVATION_TANH\020\002\022!\n\035CUDNN_A"
      "CTIVATION_CLIPPED_RELU\020\003\022\030\n\024CUDNN_ACTIVA"
      "TION_ELU\020\004\"l\n\025ImageBatchReaderParam\022\023\n\013f"
      "older_path\030\001 \001(\t\022+\n\014tensor_param\030\002 \001(\0132\025"
      ".deepflow.TensorParam\022\021\n\trandomize\030\003 \001(\010"
      "\"\203\001\n\020ImageReaderParam\022\021\n\tfile_name\030\001 \001(\t"
      "\022-\n\004type\030\002 \001(\0162\037.deepflow.ImageReaderPar"
      "am.Type\"-\n\004Type\022\r\n\tGRAY_ONLY\020\000\022\026\n\022COLOR_"
      "IF_AVAILABLE\020\001\"\350\001\n\nMnistParam\022\023\n\013folder_"
      "path\030\001 \001(\t\0224\n\013reader_type\030\002 \001(\0162\037.deepfl"
      "ow.MnistParam.ReaderType\0224\n\013output_type\030"
      "\003 \001(\0162\037.deepflow.MnistParam.OutputType\022\022"
      "\n\nbatch_size\030\004 \001(\005\"!\n\nReaderType\022\t\n\005TRAI"
      "N\020\000\022\010\n\004TEST\020\001\"\"\n\nOutputType\022\010\n\004DATA\020\000\022\n\n"
      "\006LABELS\020\001\"\020\n\016CastFloatParam\"\220\003\n\027BatchNor"
      "malizationParam\0224\n\004mode\030\001 \001(\0162&.deepflow"
      ".BatchNormalizationParam.Mode\022\026\n\016exp_avg"
      "_factor\030\002 \001(\002\022\022\n\nalpha_data\030\003 \001(\002\022\021\n\tbet"
      "a_data\030\004 \001(\002\022\023\n\013alpha_param\030\005 \001(\002\022\022\n\nbet"
      "a_param\030\006 \001(\002\022#\n\005scale\030\007 \001(\0132\024.deepflow."
      "TensorData\022\"\n\004bias\030\010 \001(\0132\024.deepflow.Tens"
      "orData\022\"\n\004mean\030\t \001(\0132\024.deepflow.TensorDa"
      "ta\022!\n\003var\030\n \001(\0132\024.deepflow.TensorData\"G\n"
      "\004Mode\022\"\n\036CUDNN_BATCHNORM_PER_ACTIVATION\020"
      "\000\022\033\n\027CUDNN_BATCHNORM_SPATIAL\020\001\"%\n\021Replay"
      "MemoryParam\022\020\n\010capacity\030\001 \001(\005\"\320\017\n\tNodePa"
      "ram\022\014\n\004name\030\001 \001(\t\022\r\n\005input\030\002 \003(\t\022\016\n\006outp"
      "ut\030\003 \003(\t\022\r\n\005phase\030\004 \003(\t\022)\n\013block_param\030\005"
      " \001(\0132\024.deepflow.BlockParam\022/\n\016variable_p"
      "aram\030d \001(\0132\027.deepflow.VariableParam\0226\n\022p"
      "lace_holder_param\030e \001(\0132\032.deepflow.Place"
      "HolderParam\0225\n\021phaseplexer_param\030f \001(\0132\032"
      ".deepflow.PhaseplexerParam\022%\n\tadd_param\030"
      "g \001(\0132\022.deepflow.AddParam\022.\n\016bias_add_pa"
      "ram\030h \001(\0132\026.deepflow.BiasAddParam\022,\n\rcon"
      "v_2d_param\030i \001(\0132\025.deepflow.Conv2dParam\022"
      "A\n\030transposed_conv_2d_param\030j \001(\0132\037.deep"
      "flow.TransposedConv2dParam\022-\n\rdropout_pa"
      "ram\030k \001(\0132\026.deepflow.DropoutParam\0222\n\020lea"
      "ky_relu_param\030l \001(\0132\030.deepflow.LeakyRelu"
      "Param\022-\n\rsoftmax_param\030m \001(\0132\026.deepflow."
      "SoftmaxParam\022+\n\014square_param\030n \001(\0132\025.dee"
      "pflow.SquareParam\022+\n\014matmul_param\030o \001(\0132"
      "\025.deepflow.MatMulParam\022-\n\rpooling_param\030"
      "p \001(\0132\026.deepflow.PoolingParam\022+\n\014reduce_"
      "param\030q \001(\0132\025.deepflow.ReduceParam\022)\n\013eq"
      "ual_param\030r \001(\0132\024.deepflow.EqualParam\022)\n"
      "\013print_param\030s \001(\0132\024.deepflow.PrintParam"
      "\0222\n\020cast_float_param\030t \001(\0132\030.deepflow.Ca"
      "stFloatParam\0225\n\021accumulator_param\030u \001(\0132"
      "\032.deepflow.AccumulatorParam\022-\n\rdisplay_p"
      "aram\030v \001(\0132\026.deepflow.DisplayParam\0223\n\020ac"
      "tivation_param\030w \001(\0132\031.deepflow.Activati"
      "onParam\022\'\n\npsnr_param\030x \001(\0132\023.deepflow.P"
      "snrParam\022<\n\025random_selector_param\030y \001(\0132"
      "\035.deepflow.RandomSelectorParam\022+\n\014logger"
      "_param\030z \001(\0132\025.deepflow.LoggerParam\0225\n\021r"
      "estructure_param\030{ \001(\0132\032.deepflow.Restru"
      "ctureParam\0226\n\022image_reader_param\030| \001(\0132\032"
      ".deepflow.ImageReaderParam\0225\n\021multiplexe"
      "r_param\030} \001(\0132\032.deepflow.MultiplexerPara"
      "m\022+\n\014negate_param\030~ \001(\0132\025.deepflow.Negat"
      "eParam\022D\n\031batch_normalization_param\030\177 \001("
      "\0132!.deepflow.BatchNormalizationParam\022*\n\013"
      "mnist_param\030\200\001 \001(\0132\024.deepflow.MnistParam"
      "\022;\n\024data_generator_param\030\201\001 \001(\0132\034.deepfl"
      "ow.DataGeneratorParam\022B\n\030image_batch_rea"
      "der_param\030\202\001 \001(\0132\037.deepflow.ImageBatchRe"
      "aderParam\022&\n\tdot_param\030\203\001 \001(\0132\022.deepflow"
      ".DotParam\0229\n\023replay_memory_param\030\204\001 \001(\0132"
      "\033.deepflow.ReplayMemoryParam\022C\n\030euclidea"
      "n_distance_param\030\206\001 \001(\0132 .deepflow.Eucli"
      "deanDistanceParam\0223\n\020sio_output_param\030\207\001"
      " \001(\0132\030.deepflow.SIOOutputParam\022&\n\tlog_pa"
      "ram\030\210\001 \001(\0132\022.deepflow.LogParam\022(\n\nloss_p"
      "aram\030\211\001 \001(\0132\023.deepflow.LossParam\"\r\n\013Squa"
      "reParam\"\030\n\026EuclideanDistanceParam\"\016\n\014Sof"
      "tmaxParam\"\036\n\rInitFillParam\022\r\n\005value\030\001 \001("
      "\002\"$\n\022InitIndexFillParam\022\016\n\006offset\030\001 \001(\002\""
      "2\n\026InitRandomUniformParam\022\013\n\003min\030\001 \001(\002\022\013"
      "\n\003max\030\002 \001(\002\"5\n\025InitRandomNormalParam\022\014\n\004"
      "mean\030\001 \001(\002\022\016\n\006stddev\030\002 \001(\002\")\n\rInitStepPa"
      "ram\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"\025\n\023InitThr"
      "eeStateParam\"\271\003\n\tInitParam\022\014\n\004name\030\001 \001(\t"
      "\022+\n\014tensor_param\030\002 \001(\0132\025.deepflow.Tensor"
      "Param\022\'\n\tinit_data\030\003 \001(\0132\024.deepflow.Tens"
      "orData\022+\n\nfill_param\030\004 \001(\0132\027.deepflow.In"
      "itFillParam\0226\n\020index_fill_param\030\005 \001(\0132\034."
      "deepflow.InitIndexFillParam\022>\n\024random_un"
      "iform_param\030\006 \001(\0132 .deepflow.InitRandomU"
      "niformParam\022+\n\nstep_param\030\007 \001(\0132\027.deepfl"
      "ow.InitStepParam\022<\n\023random_normal_param\030"
      "\010 \001(\0132\037.deepflow.InitRandomNormalParam\0228"
      "\n\021three_state_param\030\t \001(\0132\035.deepflow.Ini"
      "tThreeStateParam\"9\n\016SGDSolverParam\022\025\n\rle"
      "arning_rate\030\001 \001(\002\022\020\n\010momentum\030\002 \001(\002\"\204\001\n\017"
      "GainSolverParam\022\025\n\rlearning_rate\030\001 \001(\002\022\020"
      "\n\010momentum\030\002 \001(\002\022\020\n\010max_gain\030\003 \001(\002\022\020\n\010mi"
      "n_gain\030\004 \001(\002\022\021\n\tgain_plus\030\005 \001(\002\022\021\n\tgain_"
      "mult\030\006 \001(\002\"M\n\023AdaDeltaSolverParam\022\025\n\rlea"
      "rning_rate\030\001 \001(\002\022\020\n\010momentum\030\002 \001(\002\022\r\n\005de"
      "lta\030\003 \001(\002\"S\n\017AdamSolverParam\022\025\n\rlearning"
      "_rate\030\001 \001(\002\022\r\n\005beta1\030\002 \001(\002\022\r\n\005beta2\030\003 \001("
      "\002\022\013\n\003eps\030\004 \001(\002\"\367\001\n\013SolverParam\022\014\n\004name\030\001"
      " \001(\t\022\024\n\014enable_input\030\002 \001(\t\022,\n\nsgd_solver"
      "\030\003 \001(\0132\030.deepflow.SGDSolverParam\022.\n\013gain"
      "_solver\030\004 \001(\0132\031.deepflow.GainSolverParam"
      "\022.\n\013adam_solver\030\005 \001(\0132\031.deepflow.AdamSol"
      "verParam\0226\n\017adadelta_solver\030\006 \001(\0132\035.deep"
      "flow.AdaDeltaSolverParam\"\250\001\n\nPhaseParam\022"
      "\r\n\005phase\030\001 \001(\t\0226\n\tbehaviour\030\002 \001(\0162#.deep"
      "flow.PhaseParam.PhaseBehaviour\"S\n\016PhaseB"
      "ehaviour\022\027\n\023TRAIN_AND_INFERENCE\020\000\022\t\n\005TRA"
      "IN\020\001\022\016\n\nVALIDATION\020\002\022\r\n\tINFERENCE\020\003\"\245\001\n\n"
      "BlockParam\022!\n\004node\030\001 \003(\0132\023.deepflow.Node"
      "Param\022%\n\006solver\030\002 \003(\0132\025.deepflow.SolverP"
      "aram\022#\n\005phase\030\003 \003(\0132\024.deepflow.PhasePara"
      "m\022(\n\013initializer\030\004 \003(\0132\023.deepflow.InitPa"
      "ram*9\n\nActionTime\022\016\n\nEVERY_PASS\020\000\022\020\n\014END"
      "_OF_EPOCH\020\001\022\t\n\005NEVER\020\002*9\n\nActionType\022\n\n\006"
      "VALUES\020\000\022\t\n\005DIFFS\020\001\022\024\n\020VALUES_AND_DIFFS\020"
      "\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deepflow.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_deepflow_2eproto

const ::google::protobuf::EnumDescriptor* TensorParam_TensorType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[0];
}
bool TensorParam_TensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TensorParam_TensorType TensorParam::FLOAT;
const TensorParam_TensorType TensorParam::DOUBLE;
const TensorParam_TensorType TensorParam::HALF;
const TensorParam_TensorType TensorParam::INT8;
const TensorParam_TensorType TensorParam::INT32;
const TensorParam_TensorType TensorParam::INT8x4;
const TensorParam_TensorType TensorParam::TensorType_MIN;
const TensorParam_TensorType TensorParam::TensorType_MAX;
const int TensorParam::TensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LossParam_ReduceOp_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[1];
}
bool LossParam_ReduceOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParam_ReduceOp LossParam::ADD;
const LossParam_ReduceOp LossParam::MUL;
const LossParam_ReduceOp LossParam::MIN;
const LossParam_ReduceOp LossParam::MAX;
const LossParam_ReduceOp LossParam::AMAX;
const LossParam_ReduceOp LossParam::AVG;
const LossParam_ReduceOp LossParam::NORM1;
const LossParam_ReduceOp LossParam::NORM2;
const LossParam_ReduceOp LossParam::ReduceOp_MIN;
const LossParam_ReduceOp LossParam::ReduceOp_MAX;
const int LossParam::ReduceOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReduceParam_ReduceOp_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[2];
}
bool ReduceParam_ReduceOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReduceParam_ReduceOp ReduceParam::ADD;
const ReduceParam_ReduceOp ReduceParam::MUL;
const ReduceParam_ReduceOp ReduceParam::MIN;
const ReduceParam_ReduceOp ReduceParam::MAX;
const ReduceParam_ReduceOp ReduceParam::AMAX;
const ReduceParam_ReduceOp ReduceParam::AVG;
const ReduceParam_ReduceOp ReduceParam::NORM1;
const ReduceParam_ReduceOp ReduceParam::NORM2;
const ReduceParam_ReduceOp ReduceParam::ReduceOp_MIN;
const ReduceParam_ReduceOp ReduceParam::ReduceOp_MAX;
const int ReduceParam::ReduceOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReduceParam_OutputType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[3];
}
bool ReduceParam_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReduceParam_OutputType ReduceParam::VALUES;
const ReduceParam_OutputType ReduceParam::INDICES;
const ReduceParam_OutputType ReduceParam::OutputType_MIN;
const ReduceParam_OutputType ReduceParam::OutputType_MAX;
const int ReduceParam::OutputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActivationParam_Type_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[4];
}
bool ActivationParam_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActivationParam_Type ActivationParam::CUDNN_ACTIVATION_SIGMOID;
const ActivationParam_Type ActivationParam::CUDNN_ACTIVATION_RELU;
const ActivationParam_Type ActivationParam::CUDNN_ACTIVATION_TANH;
const ActivationParam_Type ActivationParam::CUDNN_ACTIVATION_CLIPPED_RELU;
const ActivationParam_Type ActivationParam::CUDNN_ACTIVATION_ELU;
const ActivationParam_Type ActivationParam::Type_MIN;
const ActivationParam_Type ActivationParam::Type_MAX;
const int ActivationParam::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageReaderParam_Type_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[5];
}
bool ImageReaderParam_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageReaderParam_Type ImageReaderParam::GRAY_ONLY;
const ImageReaderParam_Type ImageReaderParam::COLOR_IF_AVAILABLE;
const ImageReaderParam_Type ImageReaderParam::Type_MIN;
const ImageReaderParam_Type ImageReaderParam::Type_MAX;
const int ImageReaderParam::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MnistParam_ReaderType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[6];
}
bool MnistParam_ReaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MnistParam_ReaderType MnistParam::TRAIN;
const MnistParam_ReaderType MnistParam::TEST;
const MnistParam_ReaderType MnistParam::ReaderType_MIN;
const MnistParam_ReaderType MnistParam::ReaderType_MAX;
const int MnistParam::ReaderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MnistParam_OutputType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[7];
}
bool MnistParam_OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MnistParam_OutputType MnistParam::DATA;
const MnistParam_OutputType MnistParam::LABELS;
const MnistParam_OutputType MnistParam::OutputType_MIN;
const MnistParam_OutputType MnistParam::OutputType_MAX;
const int MnistParam::OutputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BatchNormalizationParam_Mode_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[8];
}
bool BatchNormalizationParam_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatchNormalizationParam_Mode BatchNormalizationParam::CUDNN_BATCHNORM_PER_ACTIVATION;
const BatchNormalizationParam_Mode BatchNormalizationParam::CUDNN_BATCHNORM_SPATIAL;
const BatchNormalizationParam_Mode BatchNormalizationParam::Mode_MIN;
const BatchNormalizationParam_Mode BatchNormalizationParam::Mode_MAX;
const int BatchNormalizationParam::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PhaseParam_PhaseBehaviour_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[9];
}
bool PhaseParam_PhaseBehaviour_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PhaseParam_PhaseBehaviour PhaseParam::TRAIN_AND_INFERENCE;
const PhaseParam_PhaseBehaviour PhaseParam::TRAIN;
const PhaseParam_PhaseBehaviour PhaseParam::VALIDATION;
const PhaseParam_PhaseBehaviour PhaseParam::INFERENCE;
const PhaseParam_PhaseBehaviour PhaseParam::PhaseBehaviour_MIN;
const PhaseParam_PhaseBehaviour PhaseParam::PhaseBehaviour_MAX;
const int PhaseParam::PhaseBehaviour_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActionTime_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[10];
}
bool ActionTime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_enum_descriptors[11];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorData::TensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.TensorData)
}
TensorData::TensorData(const TensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.TensorData)
}

void TensorData::SharedCtor() {
  _cached_size_ = 0;
}

TensorData::~TensorData() {
  // @@protoc_insertion_point(destructor:deepflow.TensorData)
  SharedDtor();
}

void TensorData::SharedDtor() {
}

void TensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorData::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorData& TensorData::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorData* TensorData::New(::google::protobuf::Arena* arena) const {
  TensorData* n = new TensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.TensorData)
  data_.Clear();
}

bool TensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.TensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.TensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.TensorData)
  return false;
#undef DO_
}

void TensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.TensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.TensorData)
}

::google::protobuf::uint8* TensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.TensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.TensorData)
  return target;
}

size_t TensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.TensorData)
  size_t total_size = 0;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = this->data_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.TensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.TensorData)
    MergeFrom(*source);
  }
}

void TensorData::MergeFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.TensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorData::CopyFrom(const TensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.TensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorData::IsInitialized() const {
  return true;
}

void TensorData::Swap(TensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorData::InternalSwap(TensorData* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorData::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorData

// repeated float data = 1 [packed = true];
int TensorData::data_size() const {
  return data_.size();
}
void TensorData::clear_data() {
  data_.Clear();
}
float TensorData::data(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.TensorData.data)
  return data_.Get(index);
}
void TensorData::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:deepflow.TensorData.data)
}
void TensorData::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:deepflow.TensorData.data)
}
const ::google::protobuf::RepeatedField< float >&
TensorData::data() const {
  // @@protoc_insertion_point(field_list:deepflow.TensorData.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
TensorData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.TensorData.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorParam::kTypeFieldNumber;
const int TensorParam::kDimsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorParam::TensorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.TensorParam)
}
TensorParam::TensorParam(const TensorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dims_(from.dims_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:deepflow.TensorParam)
}

void TensorParam::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

TensorParam::~TensorParam() {
  // @@protoc_insertion_point(destructor:deepflow.TensorParam)
  SharedDtor();
}

void TensorParam::SharedDtor() {
}

void TensorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorParam& TensorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TensorParam* TensorParam::New(::google::protobuf::Arena* arena) const {
  TensorParam* n = new TensorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TensorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.TensorParam)
  dims_.Clear();
  type_ = 0;
}

bool TensorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.TensorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.TensorParam.TensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::deepflow::TensorParam_TensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dims = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dims())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.TensorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.TensorParam)
  return false;
#undef DO_
}

void TensorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.TensorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_);
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dims(i), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.TensorParam)
}

::google::protobuf::uint8* TensorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.TensorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 dims = 2;
  if (this->dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dims_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dims_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.TensorParam)
  return target;
}

size_t TensorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.TensorParam)
  size_t total_size = 0;

  // repeated int32 dims = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .deepflow.TensorParam.TensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.TensorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.TensorParam)
    MergeFrom(*source);
  }
}

void TensorParam::MergeFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.TensorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TensorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorParam::CopyFrom(const TensorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.TensorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParam::IsInitialized() const {
  return true;
}

void TensorParam::Swap(TensorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorParam::InternalSwap(TensorParam* other) {
  dims_.InternalSwap(&other->dims_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TensorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TensorParam

// .deepflow.TensorParam.TensorType type = 1;
void TensorParam::clear_type() {
  type_ = 0;
}
::deepflow::TensorParam_TensorType TensorParam::type() const {
  // @@protoc_insertion_point(field_get:deepflow.TensorParam.type)
  return static_cast< ::deepflow::TensorParam_TensorType >(type_);
}
void TensorParam::set_type(::deepflow::TensorParam_TensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TensorParam.type)
}

// repeated int32 dims = 2;
int TensorParam::dims_size() const {
  return dims_.size();
}
void TensorParam::clear_dims() {
  dims_.Clear();
}
::google::protobuf::int32 TensorParam::dims(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.TensorParam.dims)
  return dims_.Get(index);
}
void TensorParam::set_dims(int index, ::google::protobuf::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:deepflow.TensorParam.dims)
}
void TensorParam::add_dims(::google::protobuf::int32 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:deepflow.TensorParam.dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorParam::dims() const {
  // @@protoc_insertion_point(field_list:deepflow.TensorParam.dims)
  return dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorParam::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.TensorParam.dims)
  return &dims_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiplexerParam::kNumInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiplexerParam::MultiplexerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.MultiplexerParam)
}
MultiplexerParam::MultiplexerParam(const MultiplexerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_inputs_ = from.num_inputs_;
  // @@protoc_insertion_point(copy_constructor:deepflow.MultiplexerParam)
}

void MultiplexerParam::SharedCtor() {
  num_inputs_ = 0;
  _cached_size_ = 0;
}

MultiplexerParam::~MultiplexerParam() {
  // @@protoc_insertion_point(destructor:deepflow.MultiplexerParam)
  SharedDtor();
}

void MultiplexerParam::SharedDtor() {
}

void MultiplexerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiplexerParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiplexerParam& MultiplexerParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiplexerParam* MultiplexerParam::New(::google::protobuf::Arena* arena) const {
  MultiplexerParam* n = new MultiplexerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiplexerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.MultiplexerParam)
  num_inputs_ = 0;
}

bool MultiplexerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.MultiplexerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.MultiplexerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.MultiplexerParam)
  return false;
#undef DO_
}

void MultiplexerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.MultiplexerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_inputs(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.MultiplexerParam)
}

::google::protobuf::uint8* MultiplexerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.MultiplexerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_inputs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.MultiplexerParam)
  return target;
}

size_t MultiplexerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.MultiplexerParam)
  size_t total_size = 0;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_inputs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiplexerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.MultiplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiplexerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiplexerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.MultiplexerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.MultiplexerParam)
    MergeFrom(*source);
  }
}

void MultiplexerParam::MergeFrom(const MultiplexerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.MultiplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_inputs() != 0) {
    set_num_inputs(from.num_inputs());
  }
}

void MultiplexerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.MultiplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplexerParam::CopyFrom(const MultiplexerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.MultiplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplexerParam::IsInitialized() const {
  return true;
}

void MultiplexerParam::Swap(MultiplexerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiplexerParam::InternalSwap(MultiplexerParam* other) {
  std::swap(num_inputs_, other->num_inputs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiplexerParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiplexerParam

// int32 num_inputs = 1;
void MultiplexerParam::clear_num_inputs() {
  num_inputs_ = 0;
}
::google::protobuf::int32 MultiplexerParam::num_inputs() const {
  // @@protoc_insertion_point(field_get:deepflow.MultiplexerParam.num_inputs)
  return num_inputs_;
}
void MultiplexerParam::set_num_inputs(::google::protobuf::int32 value) {
  
  num_inputs_ = value;
  // @@protoc_insertion_point(field_set:deepflow.MultiplexerParam.num_inputs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseplexerParam::kPhaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseplexerParam::PhaseplexerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PhaseplexerParam)
}
PhaseplexerParam::PhaseplexerParam(const PhaseplexerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      phase_(from.phase_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.PhaseplexerParam)
}

void PhaseplexerParam::SharedCtor() {
  _cached_size_ = 0;
}

PhaseplexerParam::~PhaseplexerParam() {
  // @@protoc_insertion_point(destructor:deepflow.PhaseplexerParam)
  SharedDtor();
}

void PhaseplexerParam::SharedDtor() {
}

void PhaseplexerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhaseplexerParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhaseplexerParam& PhaseplexerParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhaseplexerParam* PhaseplexerParam::New(::google::protobuf::Arena* arena) const {
  PhaseplexerParam* n = new PhaseplexerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhaseplexerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PhaseplexerParam)
  phase_.Clear();
}

bool PhaseplexerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PhaseplexerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase(this->phase_size() - 1).data(),
            this->phase(this->phase_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.PhaseplexerParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PhaseplexerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PhaseplexerParam)
  return false;
#undef DO_
}

void PhaseplexerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PhaseplexerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phase = 1;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PhaseplexerParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phase(i), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PhaseplexerParam)
}

::google::protobuf::uint8* PhaseplexerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PhaseplexerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phase = 1;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PhaseplexerParam.phase");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->phase(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PhaseplexerParam)
  return target;
}

size_t PhaseplexerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PhaseplexerParam)
  size_t total_size = 0;

  // repeated string phase = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phase_size());
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phase(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhaseplexerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PhaseplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseplexerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseplexerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PhaseplexerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PhaseplexerParam)
    MergeFrom(*source);
  }
}

void PhaseplexerParam::MergeFrom(const PhaseplexerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PhaseplexerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phase_.MergeFrom(from.phase_);
}

void PhaseplexerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PhaseplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseplexerParam::CopyFrom(const PhaseplexerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PhaseplexerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseplexerParam::IsInitialized() const {
  return true;
}

void PhaseplexerParam::Swap(PhaseplexerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhaseplexerParam::InternalSwap(PhaseplexerParam* other) {
  phase_.InternalSwap(&other->phase_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhaseplexerParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhaseplexerParam

// repeated string phase = 1;
int PhaseplexerParam::phase_size() const {
  return phase_.size();
}
void PhaseplexerParam::clear_phase() {
  phase_.Clear();
}
const ::std::string& PhaseplexerParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.PhaseplexerParam.phase)
  return phase_.Get(index);
}
::std::string* PhaseplexerParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.PhaseplexerParam.phase)
  return phase_.Mutable(index);
}
void PhaseplexerParam::set_phase(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:deepflow.PhaseplexerParam.phase)
  phase_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PhaseplexerParam::set_phase(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:deepflow.PhaseplexerParam.phase)
  phase_.Mutable(index)->assign(std::move(value));
}
#endif
void PhaseplexerParam::set_phase(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phase_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deepflow.PhaseplexerParam.phase)
}
void PhaseplexerParam::set_phase(int index, const char* value, size_t size) {
  phase_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deepflow.PhaseplexerParam.phase)
}
::std::string* PhaseplexerParam::add_phase() {
  // @@protoc_insertion_point(field_add_mutable:deepflow.PhaseplexerParam.phase)
  return phase_.Add();
}
void PhaseplexerParam::add_phase(const ::std::string& value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deepflow.PhaseplexerParam.phase)
}
#if LANG_CXX11
void PhaseplexerParam::add_phase(::std::string&& value) {
  phase_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:deepflow.PhaseplexerParam.phase)
}
#endif
void PhaseplexerParam::add_phase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deepflow.PhaseplexerParam.phase)
}
void PhaseplexerParam::add_phase(const char* value, size_t size) {
  phase_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deepflow.PhaseplexerParam.phase)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PhaseplexerParam::phase() const {
  // @@protoc_insertion_point(field_list:deepflow.PhaseplexerParam.phase)
  return phase_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PhaseplexerParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.PhaseplexerParam.phase)
  return &phase_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomSelectorParam::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomSelectorParam::RandomSelectorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.RandomSelectorParam)
}
RandomSelectorParam::RandomSelectorParam(const RandomSelectorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:deepflow.RandomSelectorParam)
}

void RandomSelectorParam::SharedCtor() {
  probability_ = 0;
  _cached_size_ = 0;
}

RandomSelectorParam::~RandomSelectorParam() {
  // @@protoc_insertion_point(destructor:deepflow.RandomSelectorParam)
  SharedDtor();
}

void RandomSelectorParam::SharedDtor() {
}

void RandomSelectorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomSelectorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomSelectorParam& RandomSelectorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomSelectorParam* RandomSelectorParam::New(::google::protobuf::Arena* arena) const {
  RandomSelectorParam* n = new RandomSelectorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomSelectorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.RandomSelectorParam)
  probability_ = 0;
}

bool RandomSelectorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.RandomSelectorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.RandomSelectorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.RandomSelectorParam)
  return false;
#undef DO_
}

void RandomSelectorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.RandomSelectorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float probability = 1;
  if (this->probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->probability(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.RandomSelectorParam)
}

::google::protobuf::uint8* RandomSelectorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.RandomSelectorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float probability = 1;
  if (this->probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->probability(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.RandomSelectorParam)
  return target;
}

size_t RandomSelectorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.RandomSelectorParam)
  size_t total_size = 0;

  // float probability = 1;
  if (this->probability() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomSelectorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.RandomSelectorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomSelectorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomSelectorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.RandomSelectorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.RandomSelectorParam)
    MergeFrom(*source);
  }
}

void RandomSelectorParam::MergeFrom(const RandomSelectorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.RandomSelectorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.probability() != 0) {
    set_probability(from.probability());
  }
}

void RandomSelectorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.RandomSelectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomSelectorParam::CopyFrom(const RandomSelectorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.RandomSelectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomSelectorParam::IsInitialized() const {
  return true;
}

void RandomSelectorParam::Swap(RandomSelectorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomSelectorParam::InternalSwap(RandomSelectorParam* other) {
  std::swap(probability_, other->probability_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomSelectorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomSelectorParam

// float probability = 1;
void RandomSelectorParam::clear_probability() {
  probability_ = 0;
}
float RandomSelectorParam::probability() const {
  // @@protoc_insertion_point(field_get:deepflow.RandomSelectorParam.probability)
  return probability_;
}
void RandomSelectorParam::set_probability(float value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:deepflow.RandomSelectorParam.probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccumulatorParam::kResetTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccumulatorParam::AccumulatorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.AccumulatorParam)
}
AccumulatorParam::AccumulatorParam(const AccumulatorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reset_time_ = from.reset_time_;
  // @@protoc_insertion_point(copy_constructor:deepflow.AccumulatorParam)
}

void AccumulatorParam::SharedCtor() {
  reset_time_ = 0;
  _cached_size_ = 0;
}

AccumulatorParam::~AccumulatorParam() {
  // @@protoc_insertion_point(destructor:deepflow.AccumulatorParam)
  SharedDtor();
}

void AccumulatorParam::SharedDtor() {
}

void AccumulatorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulatorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccumulatorParam& AccumulatorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccumulatorParam* AccumulatorParam::New(::google::protobuf::Arena* arena) const {
  AccumulatorParam* n = new AccumulatorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccumulatorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.AccumulatorParam)
  reset_time_ = 0;
}

bool AccumulatorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.AccumulatorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.ActionTime reset_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reset_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.AccumulatorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.AccumulatorParam)
  return false;
#undef DO_
}

void AccumulatorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.AccumulatorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionTime reset_time = 1;
  if (this->reset_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reset_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.AccumulatorParam)
}

::google::protobuf::uint8* AccumulatorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.AccumulatorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionTime reset_time = 1;
  if (this->reset_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reset_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.AccumulatorParam)
  return target;
}

size_t AccumulatorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.AccumulatorParam)
  size_t total_size = 0;

  // .deepflow.ActionTime reset_time = 1;
  if (this->reset_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reset_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulatorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.AccumulatorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AccumulatorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccumulatorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.AccumulatorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.AccumulatorParam)
    MergeFrom(*source);
  }
}

void AccumulatorParam::MergeFrom(const AccumulatorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.AccumulatorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reset_time() != 0) {
    set_reset_time(from.reset_time());
  }
}

void AccumulatorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.AccumulatorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulatorParam::CopyFrom(const AccumulatorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.AccumulatorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulatorParam::IsInitialized() const {
  return true;
}

void AccumulatorParam::Swap(AccumulatorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccumulatorParam::InternalSwap(AccumulatorParam* other) {
  std::swap(reset_time_, other->reset_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccumulatorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccumulatorParam

// .deepflow.ActionTime reset_time = 1;
void AccumulatorParam::clear_reset_time() {
  reset_time_ = 0;
}
::deepflow::ActionTime AccumulatorParam::reset_time() const {
  // @@protoc_insertion_point(field_get:deepflow.AccumulatorParam.reset_time)
  return static_cast< ::deepflow::ActionTime >(reset_time_);
}
void AccumulatorParam::set_reset_time(::deepflow::ActionTime value) {
  
  reset_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AccumulatorParam.reset_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsnrParam::kPrintTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsnrParam::PsnrParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PsnrParam)
}
PsnrParam::PsnrParam(const PsnrParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  print_time_ = from.print_time_;
  // @@protoc_insertion_point(copy_constructor:deepflow.PsnrParam)
}

void PsnrParam::SharedCtor() {
  print_time_ = 0;
  _cached_size_ = 0;
}

PsnrParam::~PsnrParam() {
  // @@protoc_insertion_point(destructor:deepflow.PsnrParam)
  SharedDtor();
}

void PsnrParam::SharedDtor() {
}

void PsnrParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PsnrParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PsnrParam& PsnrParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PsnrParam* PsnrParam::New(::google::protobuf::Arena* arena) const {
  PsnrParam* n = new PsnrParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PsnrParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PsnrParam)
  print_time_ = 0;
}

bool PsnrParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PsnrParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.ActionTime print_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PsnrParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PsnrParam)
  return false;
#undef DO_
}

void PsnrParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PsnrParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionTime print_time = 1;
  if (this->print_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->print_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PsnrParam)
}

::google::protobuf::uint8* PsnrParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PsnrParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionTime print_time = 1;
  if (this->print_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->print_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PsnrParam)
  return target;
}

size_t PsnrParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PsnrParam)
  size_t total_size = 0;

  // .deepflow.ActionTime print_time = 1;
  if (this->print_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PsnrParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PsnrParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PsnrParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PsnrParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PsnrParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PsnrParam)
    MergeFrom(*source);
  }
}

void PsnrParam::MergeFrom(const PsnrParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PsnrParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.print_time() != 0) {
    set_print_time(from.print_time());
  }
}

void PsnrParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PsnrParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsnrParam::CopyFrom(const PsnrParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PsnrParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsnrParam::IsInitialized() const {
  return true;
}

void PsnrParam::Swap(PsnrParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PsnrParam::InternalSwap(PsnrParam* other) {
  std::swap(print_time_, other->print_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PsnrParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PsnrParam

// .deepflow.ActionTime print_time = 1;
void PsnrParam::clear_print_time() {
  print_time_ = 0;
}
::deepflow::ActionTime PsnrParam::print_time() const {
  // @@protoc_insertion_point(field_get:deepflow.PsnrParam.print_time)
  return static_cast< ::deepflow::ActionTime >(print_time_);
}
void PsnrParam::set_print_time(::deepflow::ActionTime value) {
  
  print_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PsnrParam.print_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggerParam::kFilePathFieldNumber;
const int LoggerParam::kNumInputsFieldNumber;
const int LoggerParam::kMessageFieldNumber;
const int LoggerParam::kLoggingTimeFieldNumber;
const int LoggerParam::kLoggingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggerParam::LoggerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.LoggerParam)
}
LoggerParam::LoggerParam(const LoggerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&num_inputs_, &from.num_inputs_,
    reinterpret_cast<char*>(&logging_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(logging_type_));
  // @@protoc_insertion_point(copy_constructor:deepflow.LoggerParam)
}

void LoggerParam::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&logging_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(logging_type_));
  _cached_size_ = 0;
}

LoggerParam::~LoggerParam() {
  // @@protoc_insertion_point(destructor:deepflow.LoggerParam)
  SharedDtor();
}

void LoggerParam::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoggerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggerParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoggerParam& LoggerParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoggerParam* LoggerParam::New(::google::protobuf::Arena* arena) const {
  LoggerParam* n = new LoggerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoggerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.LoggerParam)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&logging_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(logging_type_));
}

bool LoggerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.LoggerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.LoggerParam.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.LoggerParam.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionTime logging_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logging_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionType logging_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logging_type(static_cast< ::deepflow::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.LoggerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.LoggerParam)
  return false;
#undef DO_
}

void LoggerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.LoggerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.LoggerParam.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // int32 num_inputs = 2;
  if (this->num_inputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_inputs(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.LoggerParam.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // .deepflow.ActionTime logging_time = 4;
  if (this->logging_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->logging_time(), output);
  }

  // .deepflow.ActionType logging_type = 5;
  if (this->logging_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->logging_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.LoggerParam)
}

::google::protobuf::uint8* LoggerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.LoggerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.LoggerParam.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // int32 num_inputs = 2;
  if (this->num_inputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_inputs(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.LoggerParam.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // .deepflow.ActionTime logging_time = 4;
  if (this->logging_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->logging_time(), target);
  }

  // .deepflow.ActionType logging_type = 5;
  if (this->logging_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->logging_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.LoggerParam)
  return target;
}

size_t LoggerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.LoggerParam)
  size_t total_size = 0;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 num_inputs = 2;
  if (this->num_inputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_inputs());
  }

  // .deepflow.ActionTime logging_time = 4;
  if (this->logging_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logging_time());
  }

  // .deepflow.ActionType logging_type = 5;
  if (this->logging_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logging_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.LoggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoggerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.LoggerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.LoggerParam)
    MergeFrom(*source);
  }
}

void LoggerParam::MergeFrom(const LoggerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.LoggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.num_inputs() != 0) {
    set_num_inputs(from.num_inputs());
  }
  if (from.logging_time() != 0) {
    set_logging_time(from.logging_time());
  }
  if (from.logging_type() != 0) {
    set_logging_type(from.logging_type());
  }
}

void LoggerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.LoggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggerParam::CopyFrom(const LoggerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.LoggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggerParam::IsInitialized() const {
  return true;
}

void LoggerParam::Swap(LoggerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggerParam::InternalSwap(LoggerParam* other) {
  file_path_.Swap(&other->file_path_);
  message_.Swap(&other->message_);
  std::swap(num_inputs_, other->num_inputs_);
  std::swap(logging_time_, other->logging_time_);
  std::swap(logging_type_, other->logging_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoggerParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggerParam

// string file_path = 1;
void LoggerParam::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoggerParam::file_path() const {
  // @@protoc_insertion_point(field_get:deepflow.LoggerParam.file_path)
  return file_path_.GetNoArena();
}
void LoggerParam::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.LoggerParam.file_path)
}
#if LANG_CXX11
void LoggerParam::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.LoggerParam.file_path)
}
#endif
void LoggerParam::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.LoggerParam.file_path)
}
void LoggerParam::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.LoggerParam.file_path)
}
::std::string* LoggerParam::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.LoggerParam.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoggerParam::release_file_path() {
  // @@protoc_insertion_point(field_release:deepflow.LoggerParam.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoggerParam::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:deepflow.LoggerParam.file_path)
}

// int32 num_inputs = 2;
void LoggerParam::clear_num_inputs() {
  num_inputs_ = 0;
}
::google::protobuf::int32 LoggerParam::num_inputs() const {
  // @@protoc_insertion_point(field_get:deepflow.LoggerParam.num_inputs)
  return num_inputs_;
}
void LoggerParam::set_num_inputs(::google::protobuf::int32 value) {
  
  num_inputs_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LoggerParam.num_inputs)
}

// string message = 3;
void LoggerParam::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoggerParam::message() const {
  // @@protoc_insertion_point(field_get:deepflow.LoggerParam.message)
  return message_.GetNoArena();
}
void LoggerParam::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.LoggerParam.message)
}
#if LANG_CXX11
void LoggerParam::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.LoggerParam.message)
}
#endif
void LoggerParam::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.LoggerParam.message)
}
void LoggerParam::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.LoggerParam.message)
}
::std::string* LoggerParam::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.LoggerParam.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoggerParam::release_message() {
  // @@protoc_insertion_point(field_release:deepflow.LoggerParam.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoggerParam::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:deepflow.LoggerParam.message)
}

// .deepflow.ActionTime logging_time = 4;
void LoggerParam::clear_logging_time() {
  logging_time_ = 0;
}
::deepflow::ActionTime LoggerParam::logging_time() const {
  // @@protoc_insertion_point(field_get:deepflow.LoggerParam.logging_time)
  return static_cast< ::deepflow::ActionTime >(logging_time_);
}
void LoggerParam::set_logging_time(::deepflow::ActionTime value) {
  
  logging_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LoggerParam.logging_time)
}

// .deepflow.ActionType logging_type = 5;
void LoggerParam::clear_logging_type() {
  logging_type_ = 0;
}
::deepflow::ActionType LoggerParam::logging_type() const {
  // @@protoc_insertion_point(field_get:deepflow.LoggerParam.logging_type)
  return static_cast< ::deepflow::ActionType >(logging_type_);
}
void LoggerParam::set_logging_type(::deepflow::ActionType value) {
  
  logging_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LoggerParam.logging_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrintParam::kNumInputsFieldNumber;
const int PrintParam::kMessageFieldNumber;
const int PrintParam::kPrintTimeFieldNumber;
const int PrintParam::kPrintTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrintParam::PrintParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PrintParam)
}
PrintParam::PrintParam(const PrintParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&num_inputs_, &from.num_inputs_,
    reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
  // @@protoc_insertion_point(copy_constructor:deepflow.PrintParam)
}

void PrintParam::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
  _cached_size_ = 0;
}

PrintParam::~PrintParam() {
  // @@protoc_insertion_point(destructor:deepflow.PrintParam)
  SharedDtor();
}

void PrintParam::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrintParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrintParam& PrintParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrintParam* PrintParam::New(::google::protobuf::Arena* arena) const {
  PrintParam* n = new PrintParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrintParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PrintParam)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&print_type_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(print_type_));
}

bool PrintParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PrintParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.PrintParam.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionTime print_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionType print_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_type(static_cast< ::deepflow::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PrintParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PrintParam)
  return false;
#undef DO_
}

void PrintParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PrintParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_inputs(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PrintParam.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // .deepflow.ActionTime print_time = 3;
  if (this->print_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->print_time(), output);
  }

  // .deepflow.ActionType print_type = 4;
  if (this->print_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->print_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PrintParam)
}

::google::protobuf::uint8* PrintParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PrintParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_inputs(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PrintParam.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // .deepflow.ActionTime print_time = 3;
  if (this->print_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->print_time(), target);
  }

  // .deepflow.ActionType print_type = 4;
  if (this->print_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->print_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PrintParam)
  return target;
}

size_t PrintParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PrintParam)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_inputs());
  }

  // .deepflow.ActionTime print_time = 3;
  if (this->print_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_time());
  }

  // .deepflow.ActionType print_type = 4;
  if (this->print_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PrintParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrintParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PrintParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PrintParam)
    MergeFrom(*source);
  }
}

void PrintParam::MergeFrom(const PrintParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PrintParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.num_inputs() != 0) {
    set_num_inputs(from.num_inputs());
  }
  if (from.print_time() != 0) {
    set_print_time(from.print_time());
  }
  if (from.print_type() != 0) {
    set_print_type(from.print_type());
  }
}

void PrintParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PrintParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintParam::CopyFrom(const PrintParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PrintParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintParam::IsInitialized() const {
  return true;
}

void PrintParam::Swap(PrintParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrintParam::InternalSwap(PrintParam* other) {
  message_.Swap(&other->message_);
  std::swap(num_inputs_, other->num_inputs_);
  std::swap(print_time_, other->print_time_);
  std::swap(print_type_, other->print_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrintParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrintParam

// int32 num_inputs = 1;
void PrintParam::clear_num_inputs() {
  num_inputs_ = 0;
}
::google::protobuf::int32 PrintParam::num_inputs() const {
  // @@protoc_insertion_point(field_get:deepflow.PrintParam.num_inputs)
  return num_inputs_;
}
void PrintParam::set_num_inputs(::google::protobuf::int32 value) {
  
  num_inputs_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PrintParam.num_inputs)
}

// string message = 2;
void PrintParam::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrintParam::message() const {
  // @@protoc_insertion_point(field_get:deepflow.PrintParam.message)
  return message_.GetNoArena();
}
void PrintParam::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.PrintParam.message)
}
#if LANG_CXX11
void PrintParam::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.PrintParam.message)
}
#endif
void PrintParam::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.PrintParam.message)
}
void PrintParam::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.PrintParam.message)
}
::std::string* PrintParam::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.PrintParam.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrintParam::release_message() {
  // @@protoc_insertion_point(field_release:deepflow.PrintParam.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrintParam::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:deepflow.PrintParam.message)
}

// .deepflow.ActionTime print_time = 3;
void PrintParam::clear_print_time() {
  print_time_ = 0;
}
::deepflow::ActionTime PrintParam::print_time() const {
  // @@protoc_insertion_point(field_get:deepflow.PrintParam.print_time)
  return static_cast< ::deepflow::ActionTime >(print_time_);
}
void PrintParam::set_print_time(::deepflow::ActionTime value) {
  
  print_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PrintParam.print_time)
}

// .deepflow.ActionType print_type = 4;
void PrintParam::clear_print_type() {
  print_type_ = 0;
}
::deepflow::ActionType PrintParam::print_type() const {
  // @@protoc_insertion_point(field_get:deepflow.PrintParam.print_type)
  return static_cast< ::deepflow::ActionType >(print_type_);
}
void PrintParam::set_print_type(::deepflow::ActionType value) {
  
  print_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PrintParam.print_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SIOOutputParam::kNumInputsFieldNumber;
const int SIOOutputParam::kPrintTimeFieldNumber;
const int SIOOutputParam::kHostFieldNumber;
const int SIOOutputParam::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SIOOutputParam::SIOOutputParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SIOOutputParam)
}
SIOOutputParam::SIOOutputParam(const SIOOutputParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&num_inputs_, &from.num_inputs_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:deepflow.SIOOutputParam)
}

void SIOOutputParam::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(port_));
  _cached_size_ = 0;
}

SIOOutputParam::~SIOOutputParam() {
  // @@protoc_insertion_point(destructor:deepflow.SIOOutputParam)
  SharedDtor();
}

void SIOOutputParam::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SIOOutputParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIOOutputParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SIOOutputParam& SIOOutputParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SIOOutputParam* SIOOutputParam::New(::google::protobuf::Arena* arena) const {
  SIOOutputParam* n = new SIOOutputParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SIOOutputParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SIOOutputParam)
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_inputs_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&num_inputs_) + sizeof(port_));
}

bool SIOOutputParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SIOOutputParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionTime print_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_print_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.SIOOutputParam.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SIOOutputParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SIOOutputParam)
  return false;
#undef DO_
}

void SIOOutputParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SIOOutputParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_inputs(), output);
  }

  // .deepflow.ActionTime print_time = 2;
  if (this->print_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->print_time(), output);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SIOOutputParam.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.SIOOutputParam)
}

::google::protobuf::uint8* SIOOutputParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SIOOutputParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_inputs(), target);
  }

  // .deepflow.ActionTime print_time = 2;
  if (this->print_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->print_time(), target);
  }

  // string host = 3;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SIOOutputParam.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SIOOutputParam)
  return target;
}

size_t SIOOutputParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SIOOutputParam)
  size_t total_size = 0;

  // string host = 3;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // int32 num_inputs = 1;
  if (this->num_inputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_inputs());
  }

  // .deepflow.ActionTime print_time = 2;
  if (this->print_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_time());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIOOutputParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SIOOutputParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SIOOutputParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SIOOutputParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SIOOutputParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SIOOutputParam)
    MergeFrom(*source);
  }
}

void SIOOutputParam::MergeFrom(const SIOOutputParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SIOOutputParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.num_inputs() != 0) {
    set_num_inputs(from.num_inputs());
  }
  if (from.print_time() != 0) {
    set_print_time(from.print_time());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SIOOutputParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SIOOutputParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIOOutputParam::CopyFrom(const SIOOutputParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SIOOutputParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIOOutputParam::IsInitialized() const {
  return true;
}

void SIOOutputParam::Swap(SIOOutputParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SIOOutputParam::InternalSwap(SIOOutputParam* other) {
  host_.Swap(&other->host_);
  std::swap(num_inputs_, other->num_inputs_);
  std::swap(print_time_, other->print_time_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SIOOutputParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SIOOutputParam

// int32 num_inputs = 1;
void SIOOutputParam::clear_num_inputs() {
  num_inputs_ = 0;
}
::google::protobuf::int32 SIOOutputParam::num_inputs() const {
  // @@protoc_insertion_point(field_get:deepflow.SIOOutputParam.num_inputs)
  return num_inputs_;
}
void SIOOutputParam::set_num_inputs(::google::protobuf::int32 value) {
  
  num_inputs_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SIOOutputParam.num_inputs)
}

// .deepflow.ActionTime print_time = 2;
void SIOOutputParam::clear_print_time() {
  print_time_ = 0;
}
::deepflow::ActionTime SIOOutputParam::print_time() const {
  // @@protoc_insertion_point(field_get:deepflow.SIOOutputParam.print_time)
  return static_cast< ::deepflow::ActionTime >(print_time_);
}
void SIOOutputParam::set_print_time(::deepflow::ActionTime value) {
  
  print_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SIOOutputParam.print_time)
}

// string host = 3;
void SIOOutputParam::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SIOOutputParam::host() const {
  // @@protoc_insertion_point(field_get:deepflow.SIOOutputParam.host)
  return host_.GetNoArena();
}
void SIOOutputParam::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.SIOOutputParam.host)
}
#if LANG_CXX11
void SIOOutputParam::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.SIOOutputParam.host)
}
#endif
void SIOOutputParam::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.SIOOutputParam.host)
}
void SIOOutputParam::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.SIOOutputParam.host)
}
::std::string* SIOOutputParam::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.SIOOutputParam.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SIOOutputParam::release_host() {
  // @@protoc_insertion_point(field_release:deepflow.SIOOutputParam.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SIOOutputParam::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:deepflow.SIOOutputParam.host)
}

// int32 port = 4;
void SIOOutputParam::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 SIOOutputParam::port() const {
  // @@protoc_insertion_point(field_get:deepflow.SIOOutputParam.port)
  return port_;
}
void SIOOutputParam::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SIOOutputParam.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DotParam::DotParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.DotParam)
}
DotParam::DotParam(const DotParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.DotParam)
}

void DotParam::SharedCtor() {
  _cached_size_ = 0;
}

DotParam::~DotParam() {
  // @@protoc_insertion_point(destructor:deepflow.DotParam)
  SharedDtor();
}

void DotParam::SharedDtor() {
}

void DotParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DotParam& DotParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DotParam* DotParam::New(::google::protobuf::Arena* arena) const {
  DotParam* n = new DotParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DotParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.DotParam)
}

bool DotParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.DotParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.DotParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.DotParam)
  return false;
#undef DO_
}

void DotParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.DotParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.DotParam)
}

::google::protobuf::uint8* DotParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.DotParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.DotParam)
  return target;
}

size_t DotParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.DotParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.DotParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DotParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DotParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.DotParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.DotParam)
    MergeFrom(*source);
  }
}

void DotParam::MergeFrom(const DotParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.DotParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DotParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.DotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotParam::CopyFrom(const DotParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.DotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotParam::IsInitialized() const {
  return true;
}

void DotParam::Swap(DotParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DotParam::InternalSwap(DotParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DotParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DotParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddParam::kAlphaFieldNumber;
const int AddParam::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddParam::AddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.AddParam)
}
AddParam::AddParam(const AddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:deepflow.AddParam)
}

void AddParam::SharedCtor() {
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
  _cached_size_ = 0;
}

AddParam::~AddParam() {
  // @@protoc_insertion_point(destructor:deepflow.AddParam)
  SharedDtor();
}

void AddParam::SharedDtor() {
}

void AddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddParam& AddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddParam* AddParam::New(::google::protobuf::Arena* arena) const {
  AddParam* n = new AddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.AddParam)
  ::memset(&alpha_, 0, reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&alpha_) + sizeof(beta_));
}

bool AddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.AddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.AddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.AddParam)
  return false;
#undef DO_
}

void AddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.AddParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.AddParam)
}

::google::protobuf::uint8* AddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.AddParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // float beta = 2;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.AddParam)
  return target;
}

size_t AddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.AddParam)
  size_t total_size = 0;

  // float alpha = 1;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // float beta = 2;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.AddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.AddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.AddParam)
    MergeFrom(*source);
  }
}

void AddParam::MergeFrom(const AddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.AddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void AddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.AddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParam::CopyFrom(const AddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.AddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParam::IsInitialized() const {
  return true;
}

void AddParam::Swap(AddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddParam::InternalSwap(AddParam* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddParam

// float alpha = 1;
void AddParam::clear_alpha() {
  alpha_ = 0;
}
float AddParam::alpha() const {
  // @@protoc_insertion_point(field_get:deepflow.AddParam.alpha)
  return alpha_;
}
void AddParam::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AddParam.alpha)
}

// float beta = 2;
void AddParam::clear_beta() {
  beta_ = 0;
}
float AddParam::beta() const {
  // @@protoc_insertion_point(field_get:deepflow.AddParam.beta)
  return beta_;
}
void AddParam::set_beta(float value) {
  
  beta_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AddParam.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NegateParam::kNegateTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NegateParam::NegateParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.NegateParam)
}
NegateParam::NegateParam(const NegateParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negate_type_ = from.negate_type_;
  // @@protoc_insertion_point(copy_constructor:deepflow.NegateParam)
}

void NegateParam::SharedCtor() {
  negate_type_ = 0;
  _cached_size_ = 0;
}

NegateParam::~NegateParam() {
  // @@protoc_insertion_point(destructor:deepflow.NegateParam)
  SharedDtor();
}

void NegateParam::SharedDtor() {
}

void NegateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegateParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NegateParam& NegateParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

NegateParam* NegateParam::New(::google::protobuf::Arena* arena) const {
  NegateParam* n = new NegateParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NegateParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.NegateParam)
  negate_type_ = 0;
}

bool NegateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.NegateParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.ActionType negate_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_negate_type(static_cast< ::deepflow::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.NegateParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.NegateParam)
  return false;
#undef DO_
}

void NegateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.NegateParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionType negate_type = 1;
  if (this->negate_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->negate_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.NegateParam)
}

::google::protobuf::uint8* NegateParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.NegateParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActionType negate_type = 1;
  if (this->negate_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->negate_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.NegateParam)
  return target;
}

size_t NegateParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.NegateParam)
  size_t total_size = 0;

  // .deepflow.ActionType negate_type = 1;
  if (this->negate_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->negate_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegateParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.NegateParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NegateParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NegateParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.NegateParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.NegateParam)
    MergeFrom(*source);
  }
}

void NegateParam::MergeFrom(const NegateParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.NegateParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.negate_type() != 0) {
    set_negate_type(from.negate_type());
  }
}

void NegateParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.NegateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegateParam::CopyFrom(const NegateParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.NegateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegateParam::IsInitialized() const {
  return true;
}

void NegateParam::Swap(NegateParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NegateParam::InternalSwap(NegateParam* other) {
  std::swap(negate_type_, other->negate_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NegateParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NegateParam

// .deepflow.ActionType negate_type = 1;
void NegateParam::clear_negate_type() {
  negate_type_ = 0;
}
::deepflow::ActionType NegateParam::negate_type() const {
  // @@protoc_insertion_point(field_get:deepflow.NegateParam.negate_type)
  return static_cast< ::deepflow::ActionType >(negate_type_);
}
void NegateParam::set_negate_type(::deepflow::ActionType value) {
  
  negate_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.NegateParam.negate_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplayParam::kDelayMsecFieldNumber;
const int DisplayParam::kDisplayTimeFieldNumber;
const int DisplayParam::kDisplayTypeFieldNumber;
const int DisplayParam::kEpochFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisplayParam::DisplayParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.DisplayParam)
}
DisplayParam::DisplayParam(const DisplayParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delay_msec_, &from.delay_msec_,
    reinterpret_cast<char*>(&epoch_frequency_) -
    reinterpret_cast<char*>(&delay_msec_) + sizeof(epoch_frequency_));
  // @@protoc_insertion_point(copy_constructor:deepflow.DisplayParam)
}

void DisplayParam::SharedCtor() {
  ::memset(&delay_msec_, 0, reinterpret_cast<char*>(&epoch_frequency_) -
    reinterpret_cast<char*>(&delay_msec_) + sizeof(epoch_frequency_));
  _cached_size_ = 0;
}

DisplayParam::~DisplayParam() {
  // @@protoc_insertion_point(destructor:deepflow.DisplayParam)
  SharedDtor();
}

void DisplayParam::SharedDtor() {
}

void DisplayParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisplayParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisplayParam& DisplayParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisplayParam* DisplayParam::New(::google::protobuf::Arena* arena) const {
  DisplayParam* n = new DisplayParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisplayParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.DisplayParam)
  ::memset(&delay_msec_, 0, reinterpret_cast<char*>(&epoch_frequency_) -
    reinterpret_cast<char*>(&delay_msec_) + sizeof(epoch_frequency_));
}

bool DisplayParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.DisplayParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 delay_msec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionTime display_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_display_time(static_cast< ::deepflow::ActionTime >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActionType display_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_display_type(static_cast< ::deepflow::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epoch_frequency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.DisplayParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.DisplayParam)
  return false;
#undef DO_
}

void DisplayParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.DisplayParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay_msec(), output);
  }

  // .deepflow.ActionTime display_time = 2;
  if (this->display_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->display_time(), output);
  }

  // .deepflow.ActionType display_type = 3;
  if (this->display_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->display_type(), output);
  }

  // int32 epoch_frequency = 4;
  if (this->epoch_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->epoch_frequency(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.DisplayParam)
}

::google::protobuf::uint8* DisplayParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.DisplayParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay_msec(), target);
  }

  // .deepflow.ActionTime display_time = 2;
  if (this->display_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->display_time(), target);
  }

  // .deepflow.ActionType display_type = 3;
  if (this->display_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->display_type(), target);
  }

  // int32 epoch_frequency = 4;
  if (this->epoch_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->epoch_frequency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.DisplayParam)
  return target;
}

size_t DisplayParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.DisplayParam)
  size_t total_size = 0;

  // int32 delay_msec = 1;
  if (this->delay_msec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay_msec());
  }

  // .deepflow.ActionTime display_time = 2;
  if (this->display_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_time());
  }

  // .deepflow.ActionType display_type = 3;
  if (this->display_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
  }

  // int32 epoch_frequency = 4;
  if (this->epoch_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch_frequency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.DisplayParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisplayParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.DisplayParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.DisplayParam)
    MergeFrom(*source);
  }
}

void DisplayParam::MergeFrom(const DisplayParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.DisplayParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delay_msec() != 0) {
    set_delay_msec(from.delay_msec());
  }
  if (from.display_time() != 0) {
    set_display_time(from.display_time());
  }
  if (from.display_type() != 0) {
    set_display_type(from.display_type());
  }
  if (from.epoch_frequency() != 0) {
    set_epoch_frequency(from.epoch_frequency());
  }
}

void DisplayParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.DisplayParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayParam::CopyFrom(const DisplayParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.DisplayParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayParam::IsInitialized() const {
  return true;
}

void DisplayParam::Swap(DisplayParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisplayParam::InternalSwap(DisplayParam* other) {
  std::swap(delay_msec_, other->delay_msec_);
  std::swap(display_time_, other->display_time_);
  std::swap(display_type_, other->display_type_);
  std::swap(epoch_frequency_, other->epoch_frequency_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisplayParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisplayParam

// int32 delay_msec = 1;
void DisplayParam::clear_delay_msec() {
  delay_msec_ = 0;
}
::google::protobuf::int32 DisplayParam::delay_msec() const {
  // @@protoc_insertion_point(field_get:deepflow.DisplayParam.delay_msec)
  return delay_msec_;
}
void DisplayParam::set_delay_msec(::google::protobuf::int32 value) {
  
  delay_msec_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DisplayParam.delay_msec)
}

// .deepflow.ActionTime display_time = 2;
void DisplayParam::clear_display_time() {
  display_time_ = 0;
}
::deepflow::ActionTime DisplayParam::display_time() const {
  // @@protoc_insertion_point(field_get:deepflow.DisplayParam.display_time)
  return static_cast< ::deepflow::ActionTime >(display_time_);
}
void DisplayParam::set_display_time(::deepflow::ActionTime value) {
  
  display_time_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DisplayParam.display_time)
}

// .deepflow.ActionType display_type = 3;
void DisplayParam::clear_display_type() {
  display_type_ = 0;
}
::deepflow::ActionType DisplayParam::display_type() const {
  // @@protoc_insertion_point(field_get:deepflow.DisplayParam.display_type)
  return static_cast< ::deepflow::ActionType >(display_type_);
}
void DisplayParam::set_display_type(::deepflow::ActionType value) {
  
  display_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DisplayParam.display_type)
}

// int32 epoch_frequency = 4;
void DisplayParam::clear_epoch_frequency() {
  epoch_frequency_ = 0;
}
::google::protobuf::int32 DisplayParam::epoch_frequency() const {
  // @@protoc_insertion_point(field_get:deepflow.DisplayParam.epoch_frequency)
  return epoch_frequency_;
}
void DisplayParam::set_epoch_frequency(::google::protobuf::int32 value) {
  
  epoch_frequency_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DisplayParam.epoch_frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParam::kCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParam::LogParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.LogParam)
}
LogParam::LogParam(const LogParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coef_ = from.coef_;
  // @@protoc_insertion_point(copy_constructor:deepflow.LogParam)
}

void LogParam::SharedCtor() {
  coef_ = 0;
  _cached_size_ = 0;
}

LogParam::~LogParam() {
  // @@protoc_insertion_point(destructor:deepflow.LogParam)
  SharedDtor();
}

void LogParam::SharedDtor() {
}

void LogParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogParam& LogParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogParam* LogParam::New(::google::protobuf::Arena* arena) const {
  LogParam* n = new LogParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.LogParam)
  coef_ = 0;
}

bool LogParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.LogParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float coef = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.LogParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.LogParam)
  return false;
#undef DO_
}

void LogParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.LogParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coef = 1;
  if (this->coef() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->coef(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.LogParam)
}

::google::protobuf::uint8* LogParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.LogParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float coef = 1;
  if (this->coef() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->coef(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.LogParam)
  return target;
}

size_t LogParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.LogParam)
  size_t total_size = 0;

  // float coef = 1;
  if (this->coef() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.LogParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LogParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.LogParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.LogParam)
    MergeFrom(*source);
  }
}

void LogParam::MergeFrom(const LogParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.LogParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coef() != 0) {
    set_coef(from.coef());
  }
}

void LogParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.LogParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParam::CopyFrom(const LogParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.LogParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParam::IsInitialized() const {
  return true;
}

void LogParam::Swap(LogParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogParam::InternalSwap(LogParam* other) {
  std::swap(coef_, other->coef_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogParam

// float coef = 1;
void LogParam::clear_coef() {
  coef_ = 0;
}
float LogParam::coef() const {
  // @@protoc_insertion_point(field_get:deepflow.LogParam.coef)
  return coef_;
}
void LogParam::set_coef(float value) {
  
  coef_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LogParam.coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParam::kReduceOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParam::LossParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.LossParam)
}
LossParam::LossParam(const LossParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reduce_op_ = from.reduce_op_;
  // @@protoc_insertion_point(copy_constructor:deepflow.LossParam)
}

void LossParam::SharedCtor() {
  reduce_op_ = 0;
  _cached_size_ = 0;
}

LossParam::~LossParam() {
  // @@protoc_insertion_point(destructor:deepflow.LossParam)
  SharedDtor();
}

void LossParam::SharedDtor() {
}

void LossParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LossParam& LossParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParam* LossParam::New(::google::protobuf::Arena* arena) const {
  LossParam* n = new LossParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.LossParam)
  reduce_op_ = 0;
}

bool LossParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.LossParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.LossParam.ReduceOp reduce_op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reduce_op(static_cast< ::deepflow::LossParam_ReduceOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.LossParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.LossParam)
  return false;
#undef DO_
}

void LossParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.LossParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.LossParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reduce_op(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.LossParam)
}

::google::protobuf::uint8* LossParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.LossParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.LossParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reduce_op(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.LossParam)
  return target;
}

size_t LossParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.LossParam)
  size_t total_size = 0;

  // .deepflow.LossParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reduce_op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.LossParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.LossParam)
    MergeFrom(*source);
  }
}

void LossParam::MergeFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.LossParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reduce_op() != 0) {
    set_reduce_op(from.reduce_op());
  }
}

void LossParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParam::CopyFrom(const LossParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.LossParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParam::IsInitialized() const {
  return true;
}

void LossParam::Swap(LossParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParam::InternalSwap(LossParam* other) {
  std::swap(reduce_op_, other->reduce_op_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParam

// .deepflow.LossParam.ReduceOp reduce_op = 1;
void LossParam::clear_reduce_op() {
  reduce_op_ = 0;
}
::deepflow::LossParam_ReduceOp LossParam::reduce_op() const {
  // @@protoc_insertion_point(field_get:deepflow.LossParam.reduce_op)
  return static_cast< ::deepflow::LossParam_ReduceOp >(reduce_op_);
}
void LossParam::set_reduce_op(::deepflow::LossParam_ReduceOp value) {
  
  reduce_op_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LossParam.reduce_op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EqualParam::EqualParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.EqualParam)
}
EqualParam::EqualParam(const EqualParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.EqualParam)
}

void EqualParam::SharedCtor() {
  _cached_size_ = 0;
}

EqualParam::~EqualParam() {
  // @@protoc_insertion_point(destructor:deepflow.EqualParam)
  SharedDtor();
}

void EqualParam::SharedDtor() {
}

void EqualParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EqualParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EqualParam& EqualParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

EqualParam* EqualParam::New(::google::protobuf::Arena* arena) const {
  EqualParam* n = new EqualParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EqualParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.EqualParam)
}

bool EqualParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.EqualParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.EqualParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.EqualParam)
  return false;
#undef DO_
}

void EqualParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.EqualParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.EqualParam)
}

::google::protobuf::uint8* EqualParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.EqualParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.EqualParam)
  return target;
}

size_t EqualParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.EqualParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EqualParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.EqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EqualParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EqualParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.EqualParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.EqualParam)
    MergeFrom(*source);
  }
}

void EqualParam::MergeFrom(const EqualParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.EqualParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EqualParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.EqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EqualParam::CopyFrom(const EqualParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.EqualParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualParam::IsInitialized() const {
  return true;
}

void EqualParam::Swap(EqualParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EqualParam::InternalSwap(EqualParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EqualParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EqualParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasAddParam::BiasAddParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.BiasAddParam)
}
BiasAddParam::BiasAddParam(const BiasAddParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.BiasAddParam)
}

void BiasAddParam::SharedCtor() {
  _cached_size_ = 0;
}

BiasAddParam::~BiasAddParam() {
  // @@protoc_insertion_point(destructor:deepflow.BiasAddParam)
  SharedDtor();
}

void BiasAddParam::SharedDtor() {
}

void BiasAddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasAddParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BiasAddParam& BiasAddParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

BiasAddParam* BiasAddParam::New(::google::protobuf::Arena* arena) const {
  BiasAddParam* n = new BiasAddParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasAddParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.BiasAddParam)
}

bool BiasAddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.BiasAddParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.BiasAddParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.BiasAddParam)
  return false;
#undef DO_
}

void BiasAddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.BiasAddParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.BiasAddParam)
}

::google::protobuf::uint8* BiasAddParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.BiasAddParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.BiasAddParam)
  return target;
}

size_t BiasAddParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.BiasAddParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasAddParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.BiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasAddParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasAddParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.BiasAddParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.BiasAddParam)
    MergeFrom(*source);
  }
}

void BiasAddParam::MergeFrom(const BiasAddParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.BiasAddParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BiasAddParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.BiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasAddParam::CopyFrom(const BiasAddParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.BiasAddParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasAddParam::IsInitialized() const {
  return true;
}

void BiasAddParam::Swap(BiasAddParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasAddParam::InternalSwap(BiasAddParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasAddParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasAddParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParam::kWindowHFieldNumber;
const int PoolingParam::kWindowWFieldNumber;
const int PoolingParam::kHPadFieldNumber;
const int PoolingParam::kVPadFieldNumber;
const int PoolingParam::kHStrideFieldNumber;
const int PoolingParam::kVStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParam::PoolingParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PoolingParam)
}
PoolingParam::PoolingParam(const PoolingParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&window_h_, &from.window_h_,
    reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  // @@protoc_insertion_point(copy_constructor:deepflow.PoolingParam)
}

void PoolingParam::SharedCtor() {
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
  _cached_size_ = 0;
}

PoolingParam::~PoolingParam() {
  // @@protoc_insertion_point(destructor:deepflow.PoolingParam)
  SharedDtor();
}

void PoolingParam::SharedDtor() {
}

void PoolingParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoolingParam& PoolingParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoolingParam* PoolingParam::New(::google::protobuf::Arena* arena) const {
  PoolingParam* n = new PoolingParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PoolingParam)
  ::memset(&window_h_, 0, reinterpret_cast<char*>(&v_stride_) -
    reinterpret_cast<char*>(&window_h_) + sizeof(v_stride_));
}

bool PoolingParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PoolingParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 window_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 window_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_pad = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h_stride = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v_stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PoolingParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PoolingParam)
  return false;
#undef DO_
}

void PoolingParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PoolingParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 window_h = 1;
  if (this->window_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_h(), output);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_w(), output);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h_pad(), output);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v_pad(), output);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->h_stride(), output);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->v_stride(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PoolingParam)
}

::google::protobuf::uint8* PoolingParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PoolingParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 window_h = 1;
  if (this->window_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_h(), target);
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_w(), target);
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h_pad(), target);
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v_pad(), target);
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->h_stride(), target);
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->v_stride(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PoolingParam)
  return target;
}

size_t PoolingParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PoolingParam)
  size_t total_size = 0;

  // int32 window_h = 1;
  if (this->window_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_h());
  }

  // int32 window_w = 2;
  if (this->window_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_w());
  }

  // int32 h_pad = 3;
  if (this->h_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_pad());
  }

  // int32 v_pad = 4;
  if (this->v_pad() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_pad());
  }

  // int32 h_stride = 5;
  if (this->h_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h_stride());
  }

  // int32 v_stride = 6;
  if (this->v_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v_stride());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PoolingParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PoolingParam)
    MergeFrom(*source);
  }
}

void PoolingParam::MergeFrom(const PoolingParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PoolingParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.window_h() != 0) {
    set_window_h(from.window_h());
  }
  if (from.window_w() != 0) {
    set_window_w(from.window_w());
  }
  if (from.h_pad() != 0) {
    set_h_pad(from.h_pad());
  }
  if (from.v_pad() != 0) {
    set_v_pad(from.v_pad());
  }
  if (from.h_stride() != 0) {
    set_h_stride(from.h_stride());
  }
  if (from.v_stride() != 0) {
    set_v_stride(from.v_stride());
  }
}

void PoolingParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParam::CopyFrom(const PoolingParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PoolingParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParam::IsInitialized() const {
  return true;
}

void PoolingParam::Swap(PoolingParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParam::InternalSwap(PoolingParam* other) {
  std::swap(window_h_, other->window_h_);
  std::swap(window_w_, other->window_w_);
  std::swap(h_pad_, other->h_pad_);
  std::swap(v_pad_, other->v_pad_);
  std::swap(h_stride_, other->h_stride_);
  std::swap(v_stride_, other->v_stride_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParam

// int32 window_h = 1;
void PoolingParam::clear_window_h() {
  window_h_ = 0;
}
::google::protobuf::int32 PoolingParam::window_h() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.window_h)
  return window_h_;
}
void PoolingParam::set_window_h(::google::protobuf::int32 value) {
  
  window_h_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.window_h)
}

// int32 window_w = 2;
void PoolingParam::clear_window_w() {
  window_w_ = 0;
}
::google::protobuf::int32 PoolingParam::window_w() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.window_w)
  return window_w_;
}
void PoolingParam::set_window_w(::google::protobuf::int32 value) {
  
  window_w_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.window_w)
}

// int32 h_pad = 3;
void PoolingParam::clear_h_pad() {
  h_pad_ = 0;
}
::google::protobuf::int32 PoolingParam::h_pad() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.h_pad)
  return h_pad_;
}
void PoolingParam::set_h_pad(::google::protobuf::int32 value) {
  
  h_pad_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.h_pad)
}

// int32 v_pad = 4;
void PoolingParam::clear_v_pad() {
  v_pad_ = 0;
}
::google::protobuf::int32 PoolingParam::v_pad() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.v_pad)
  return v_pad_;
}
void PoolingParam::set_v_pad(::google::protobuf::int32 value) {
  
  v_pad_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.v_pad)
}

// int32 h_stride = 5;
void PoolingParam::clear_h_stride() {
  h_stride_ = 0;
}
::google::protobuf::int32 PoolingParam::h_stride() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.h_stride)
  return h_stride_;
}
void PoolingParam::set_h_stride(::google::protobuf::int32 value) {
  
  h_stride_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.h_stride)
}

// int32 v_stride = 6;
void PoolingParam::clear_v_stride() {
  v_stride_ = 0;
}
::google::protobuf::int32 PoolingParam::v_stride() const {
  // @@protoc_insertion_point(field_get:deepflow.PoolingParam.v_stride)
  return v_stride_;
}
void PoolingParam::set_v_stride(::google::protobuf::int32 value) {
  
  v_stride_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PoolingParam.v_stride)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransposedConv2dParam::kPadHFieldNumber;
const int TransposedConv2dParam::kPadWFieldNumber;
const int TransposedConv2dParam::kUFieldNumber;
const int TransposedConv2dParam::kVFieldNumber;
const int TransposedConv2dParam::kDilationHFieldNumber;
const int TransposedConv2dParam::kDilationWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransposedConv2dParam::TransposedConv2dParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.TransposedConv2dParam)
}
TransposedConv2dParam::TransposedConv2dParam(const TransposedConv2dParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_h_, &from.pad_h_,
    reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
  // @@protoc_insertion_point(copy_constructor:deepflow.TransposedConv2dParam)
}

void TransposedConv2dParam::SharedCtor() {
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
  _cached_size_ = 0;
}

TransposedConv2dParam::~TransposedConv2dParam() {
  // @@protoc_insertion_point(destructor:deepflow.TransposedConv2dParam)
  SharedDtor();
}

void TransposedConv2dParam::SharedDtor() {
}

void TransposedConv2dParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransposedConv2dParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransposedConv2dParam& TransposedConv2dParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransposedConv2dParam* TransposedConv2dParam::New(::google::protobuf::Arena* arena) const {
  TransposedConv2dParam* n = new TransposedConv2dParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransposedConv2dParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.TransposedConv2dParam)
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&dilation_w_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(dilation_w_));
}

bool TransposedConv2dParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.TransposedConv2dParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pad_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 u = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.TransposedConv2dParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.TransposedConv2dParam)
  return false;
#undef DO_
}

void TransposedConv2dParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.TransposedConv2dParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pad_h(), output);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pad_w(), output);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->u(), output);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dilation_h(), output);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dilation_w(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.TransposedConv2dParam)
}

::google::protobuf::uint8* TransposedConv2dParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.TransposedConv2dParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pad_h(), target);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pad_w(), target);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->u(), target);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dilation_h(), target);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dilation_w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.TransposedConv2dParam)
  return target;
}

size_t TransposedConv2dParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.TransposedConv2dParam)
  size_t total_size = 0;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_h());
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_w());
  }

  // int32 u = 3;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  // int32 v = 4;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_h());
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_w());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransposedConv2dParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.TransposedConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TransposedConv2dParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransposedConv2dParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.TransposedConv2dParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.TransposedConv2dParam)
    MergeFrom(*source);
  }
}

void TransposedConv2dParam::MergeFrom(const TransposedConv2dParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.TransposedConv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pad_h() != 0) {
    set_pad_h(from.pad_h());
  }
  if (from.pad_w() != 0) {
    set_pad_w(from.pad_w());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.dilation_h() != 0) {
    set_dilation_h(from.dilation_h());
  }
  if (from.dilation_w() != 0) {
    set_dilation_w(from.dilation_w());
  }
}

void TransposedConv2dParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.TransposedConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransposedConv2dParam::CopyFrom(const TransposedConv2dParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.TransposedConv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransposedConv2dParam::IsInitialized() const {
  return true;
}

void TransposedConv2dParam::Swap(TransposedConv2dParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransposedConv2dParam::InternalSwap(TransposedConv2dParam* other) {
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(dilation_h_, other->dilation_h_);
  std::swap(dilation_w_, other->dilation_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransposedConv2dParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransposedConv2dParam

// int32 pad_h = 1;
void TransposedConv2dParam::clear_pad_h() {
  pad_h_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::pad_h() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.pad_h)
  return pad_h_;
}
void TransposedConv2dParam::set_pad_h(::google::protobuf::int32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.pad_h)
}

// int32 pad_w = 2;
void TransposedConv2dParam::clear_pad_w() {
  pad_w_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::pad_w() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.pad_w)
  return pad_w_;
}
void TransposedConv2dParam::set_pad_w(::google::protobuf::int32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.pad_w)
}

// int32 u = 3;
void TransposedConv2dParam::clear_u() {
  u_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::u() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.u)
  return u_;
}
void TransposedConv2dParam::set_u(::google::protobuf::int32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.u)
}

// int32 v = 4;
void TransposedConv2dParam::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::v() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.v)
  return v_;
}
void TransposedConv2dParam::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.v)
}

// int32 dilation_h = 5;
void TransposedConv2dParam::clear_dilation_h() {
  dilation_h_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::dilation_h() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.dilation_h)
  return dilation_h_;
}
void TransposedConv2dParam::set_dilation_h(::google::protobuf::int32 value) {
  
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.dilation_h)
}

// int32 dilation_w = 6;
void TransposedConv2dParam::clear_dilation_w() {
  dilation_w_ = 0;
}
::google::protobuf::int32 TransposedConv2dParam::dilation_w() const {
  // @@protoc_insertion_point(field_get:deepflow.TransposedConv2dParam.dilation_w)
  return dilation_w_;
}
void TransposedConv2dParam::set_dilation_w(::google::protobuf::int32 value) {
  
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:deepflow.TransposedConv2dParam.dilation_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Conv2dParam::kPadHFieldNumber;
const int Conv2dParam::kPadWFieldNumber;
const int Conv2dParam::kUFieldNumber;
const int Conv2dParam::kVFieldNumber;
const int Conv2dParam::kDilationHFieldNumber;
const int Conv2dParam::kDilationWFieldNumber;
const int Conv2dParam::kNegativeSlopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Conv2dParam::Conv2dParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.Conv2dParam)
}
Conv2dParam::Conv2dParam(const Conv2dParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_h_, &from.pad_h_,
    reinterpret_cast<char*>(&negative_slope_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(negative_slope_));
  // @@protoc_insertion_point(copy_constructor:deepflow.Conv2dParam)
}

void Conv2dParam::SharedCtor() {
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&negative_slope_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(negative_slope_));
  _cached_size_ = 0;
}

Conv2dParam::~Conv2dParam() {
  // @@protoc_insertion_point(destructor:deepflow.Conv2dParam)
  SharedDtor();
}

void Conv2dParam::SharedDtor() {
}

void Conv2dParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conv2dParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Conv2dParam& Conv2dParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

Conv2dParam* Conv2dParam::New(::google::protobuf::Arena* arena) const {
  Conv2dParam* n = new Conv2dParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Conv2dParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.Conv2dParam)
  ::memset(&pad_h_, 0, reinterpret_cast<char*>(&negative_slope_) -
    reinterpret_cast<char*>(&pad_h_) + sizeof(negative_slope_));
}

bool Conv2dParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.Conv2dParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pad_h = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pad_w = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 u = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dilation_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float negative_slope = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.Conv2dParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.Conv2dParam)
  return false;
#undef DO_
}

void Conv2dParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.Conv2dParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pad_h(), output);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pad_w(), output);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->u(), output);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v(), output);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dilation_h(), output);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dilation_w(), output);
  }

  // float negative_slope = 7;
  if (this->negative_slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->negative_slope(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.Conv2dParam)
}

::google::protobuf::uint8* Conv2dParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.Conv2dParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pad_h(), target);
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pad_w(), target);
  }

  // int32 u = 3;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->u(), target);
  }

  // int32 v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v(), target);
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dilation_h(), target);
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dilation_w(), target);
  }

  // float negative_slope = 7;
  if (this->negative_slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->negative_slope(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.Conv2dParam)
  return target;
}

size_t Conv2dParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.Conv2dParam)
  size_t total_size = 0;

  // int32 pad_h = 1;
  if (this->pad_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_h());
  }

  // int32 pad_w = 2;
  if (this->pad_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pad_w());
  }

  // int32 u = 3;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  // int32 v = 4;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 dilation_h = 5;
  if (this->dilation_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_h());
  }

  // int32 dilation_w = 6;
  if (this->dilation_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dilation_w());
  }

  // float negative_slope = 7;
  if (this->negative_slope() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conv2dParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.Conv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  const Conv2dParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Conv2dParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.Conv2dParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.Conv2dParam)
    MergeFrom(*source);
  }
}

void Conv2dParam::MergeFrom(const Conv2dParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.Conv2dParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pad_h() != 0) {
    set_pad_h(from.pad_h());
  }
  if (from.pad_w() != 0) {
    set_pad_w(from.pad_w());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.dilation_h() != 0) {
    set_dilation_h(from.dilation_h());
  }
  if (from.dilation_w() != 0) {
    set_dilation_w(from.dilation_w());
  }
  if (from.negative_slope() != 0) {
    set_negative_slope(from.negative_slope());
  }
}

void Conv2dParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.Conv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv2dParam::CopyFrom(const Conv2dParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.Conv2dParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv2dParam::IsInitialized() const {
  return true;
}

void Conv2dParam::Swap(Conv2dParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conv2dParam::InternalSwap(Conv2dParam* other) {
  std::swap(pad_h_, other->pad_h_);
  std::swap(pad_w_, other->pad_w_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(dilation_h_, other->dilation_h_);
  std::swap(dilation_w_, other->dilation_w_);
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Conv2dParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Conv2dParam

// int32 pad_h = 1;
void Conv2dParam::clear_pad_h() {
  pad_h_ = 0;
}
::google::protobuf::int32 Conv2dParam::pad_h() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.pad_h)
  return pad_h_;
}
void Conv2dParam::set_pad_h(::google::protobuf::int32 value) {
  
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.pad_h)
}

// int32 pad_w = 2;
void Conv2dParam::clear_pad_w() {
  pad_w_ = 0;
}
::google::protobuf::int32 Conv2dParam::pad_w() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.pad_w)
  return pad_w_;
}
void Conv2dParam::set_pad_w(::google::protobuf::int32 value) {
  
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.pad_w)
}

// int32 u = 3;
void Conv2dParam::clear_u() {
  u_ = 0;
}
::google::protobuf::int32 Conv2dParam::u() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.u)
  return u_;
}
void Conv2dParam::set_u(::google::protobuf::int32 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.u)
}

// int32 v = 4;
void Conv2dParam::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 Conv2dParam::v() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.v)
  return v_;
}
void Conv2dParam::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.v)
}

// int32 dilation_h = 5;
void Conv2dParam::clear_dilation_h() {
  dilation_h_ = 0;
}
::google::protobuf::int32 Conv2dParam::dilation_h() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.dilation_h)
  return dilation_h_;
}
void Conv2dParam::set_dilation_h(::google::protobuf::int32 value) {
  
  dilation_h_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.dilation_h)
}

// int32 dilation_w = 6;
void Conv2dParam::clear_dilation_w() {
  dilation_w_ = 0;
}
::google::protobuf::int32 Conv2dParam::dilation_w() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.dilation_w)
  return dilation_w_;
}
void Conv2dParam::set_dilation_w(::google::protobuf::int32 value) {
  
  dilation_w_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.dilation_w)
}

// float negative_slope = 7;
void Conv2dParam::clear_negative_slope() {
  negative_slope_ = 0;
}
float Conv2dParam::negative_slope() const {
  // @@protoc_insertion_point(field_get:deepflow.Conv2dParam.negative_slope)
  return negative_slope_;
}
void Conv2dParam::set_negative_slope(float value) {
  
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:deepflow.Conv2dParam.negative_slope)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParam::kDropoutFieldNumber;
const int DropoutParam::kTrainOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParam::DropoutParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.DropoutParam)
}
DropoutParam::DropoutParam(const DropoutParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropout_, &from.dropout_,
    reinterpret_cast<char*>(&train_only_) -
    reinterpret_cast<char*>(&dropout_) + sizeof(train_only_));
  // @@protoc_insertion_point(copy_constructor:deepflow.DropoutParam)
}

void DropoutParam::SharedCtor() {
  ::memset(&dropout_, 0, reinterpret_cast<char*>(&train_only_) -
    reinterpret_cast<char*>(&dropout_) + sizeof(train_only_));
  _cached_size_ = 0;
}

DropoutParam::~DropoutParam() {
  // @@protoc_insertion_point(destructor:deepflow.DropoutParam)
  SharedDtor();
}

void DropoutParam::SharedDtor() {
}

void DropoutParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropoutParam& DropoutParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropoutParam* DropoutParam::New(::google::protobuf::Arena* arena) const {
  DropoutParam* n = new DropoutParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.DropoutParam)
  ::memset(&dropout_, 0, reinterpret_cast<char*>(&train_only_) -
    reinterpret_cast<char*>(&dropout_) + sizeof(train_only_));
}

bool DropoutParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.DropoutParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dropout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool train_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &train_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.DropoutParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.DropoutParam)
  return false;
#undef DO_
}

void DropoutParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.DropoutParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dropout = 1;
  if (this->dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout(), output);
  }

  // bool train_only = 2;
  if (this->train_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->train_only(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.DropoutParam)
}

::google::protobuf::uint8* DropoutParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.DropoutParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dropout = 1;
  if (this->dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout(), target);
  }

  // bool train_only = 2;
  if (this->train_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->train_only(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.DropoutParam)
  return target;
}

size_t DropoutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.DropoutParam)
  size_t total_size = 0;

  // float dropout = 1;
  if (this->dropout() != 0) {
    total_size += 1 + 4;
  }

  // bool train_only = 2;
  if (this->train_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.DropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.DropoutParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.DropoutParam)
    MergeFrom(*source);
  }
}

void DropoutParam::MergeFrom(const DropoutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.DropoutParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dropout() != 0) {
    set_dropout(from.dropout());
  }
  if (from.train_only() != 0) {
    set_train_only(from.train_only());
  }
}

void DropoutParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.DropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParam::CopyFrom(const DropoutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.DropoutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParam::IsInitialized() const {
  return true;
}

void DropoutParam::Swap(DropoutParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParam::InternalSwap(DropoutParam* other) {
  std::swap(dropout_, other->dropout_);
  std::swap(train_only_, other->train_only_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParam

// float dropout = 1;
void DropoutParam::clear_dropout() {
  dropout_ = 0;
}
float DropoutParam::dropout() const {
  // @@protoc_insertion_point(field_get:deepflow.DropoutParam.dropout)
  return dropout_;
}
void DropoutParam::set_dropout(float value) {
  
  dropout_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DropoutParam.dropout)
}

// bool train_only = 2;
void DropoutParam::clear_train_only() {
  train_only_ = false;
}
bool DropoutParam::train_only() const {
  // @@protoc_insertion_point(field_get:deepflow.DropoutParam.train_only)
  return train_only_;
}
void DropoutParam::set_train_only(bool value) {
  
  train_only_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DropoutParam.train_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatMulParam::MatMulParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.MatMulParam)
}
MatMulParam::MatMulParam(const MatMulParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.MatMulParam)
}

void MatMulParam::SharedCtor() {
  _cached_size_ = 0;
}

MatMulParam::~MatMulParam() {
  // @@protoc_insertion_point(destructor:deepflow.MatMulParam)
  SharedDtor();
}

void MatMulParam::SharedDtor() {
}

void MatMulParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatMulParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatMulParam& MatMulParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MatMulParam* MatMulParam::New(::google::protobuf::Arena* arena) const {
  MatMulParam* n = new MatMulParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatMulParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.MatMulParam)
}

bool MatMulParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.MatMulParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.MatMulParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.MatMulParam)
  return false;
#undef DO_
}

void MatMulParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.MatMulParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.MatMulParam)
}

::google::protobuf::uint8* MatMulParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.MatMulParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.MatMulParam)
  return target;
}

size_t MatMulParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.MatMulParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatMulParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.MatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MatMulParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatMulParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.MatMulParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.MatMulParam)
    MergeFrom(*source);
  }
}

void MatMulParam::MergeFrom(const MatMulParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.MatMulParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MatMulParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.MatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatMulParam::CopyFrom(const MatMulParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.MatMulParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatMulParam::IsInitialized() const {
  return true;
}

void MatMulParam::Swap(MatMulParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatMulParam::InternalSwap(MatMulParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatMulParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatMulParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeakyReluParam::kNegativeSlopeFieldNumber;
const int LeakyReluParam::kRandomizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeakyReluParam::LeakyReluParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.LeakyReluParam)
}
LeakyReluParam::LeakyReluParam(const LeakyReluParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&negative_slope_, &from.negative_slope_,
    reinterpret_cast<char*>(&randomize_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(randomize_));
  // @@protoc_insertion_point(copy_constructor:deepflow.LeakyReluParam)
}

void LeakyReluParam::SharedCtor() {
  ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&randomize_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(randomize_));
  _cached_size_ = 0;
}

LeakyReluParam::~LeakyReluParam() {
  // @@protoc_insertion_point(destructor:deepflow.LeakyReluParam)
  SharedDtor();
}

void LeakyReluParam::SharedDtor() {
}

void LeakyReluParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeakyReluParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeakyReluParam& LeakyReluParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeakyReluParam* LeakyReluParam::New(::google::protobuf::Arena* arena) const {
  LeakyReluParam* n = new LeakyReluParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeakyReluParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.LeakyReluParam)
  ::memset(&negative_slope_, 0, reinterpret_cast<char*>(&randomize_) -
    reinterpret_cast<char*>(&negative_slope_) + sizeof(randomize_));
}

bool LeakyReluParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.LeakyReluParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float negative_slope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool randomize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.LeakyReluParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.LeakyReluParam)
  return false;
#undef DO_
}

void LeakyReluParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.LeakyReluParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // bool randomize = 2;
  if (this->randomize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->randomize(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.LeakyReluParam)
}

::google::protobuf::uint8* LeakyReluParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.LeakyReluParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // bool randomize = 2;
  if (this->randomize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->randomize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.LeakyReluParam)
  return target;
}

size_t LeakyReluParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.LeakyReluParam)
  size_t total_size = 0;

  // float negative_slope = 1;
  if (this->negative_slope() != 0) {
    total_size += 1 + 4;
  }

  // bool randomize = 2;
  if (this->randomize() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeakyReluParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.LeakyReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LeakyReluParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeakyReluParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.LeakyReluParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.LeakyReluParam)
    MergeFrom(*source);
  }
}

void LeakyReluParam::MergeFrom(const LeakyReluParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.LeakyReluParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.negative_slope() != 0) {
    set_negative_slope(from.negative_slope());
  }
  if (from.randomize() != 0) {
    set_randomize(from.randomize());
  }
}

void LeakyReluParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.LeakyReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeakyReluParam::CopyFrom(const LeakyReluParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.LeakyReluParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeakyReluParam::IsInitialized() const {
  return true;
}

void LeakyReluParam::Swap(LeakyReluParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeakyReluParam::InternalSwap(LeakyReluParam* other) {
  std::swap(negative_slope_, other->negative_slope_);
  std::swap(randomize_, other->randomize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeakyReluParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeakyReluParam

// float negative_slope = 1;
void LeakyReluParam::clear_negative_slope() {
  negative_slope_ = 0;
}
float LeakyReluParam::negative_slope() const {
  // @@protoc_insertion_point(field_get:deepflow.LeakyReluParam.negative_slope)
  return negative_slope_;
}
void LeakyReluParam::set_negative_slope(float value) {
  
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LeakyReluParam.negative_slope)
}

// bool randomize = 2;
void LeakyReluParam::clear_randomize() {
  randomize_ = false;
}
bool LeakyReluParam::randomize() const {
  // @@protoc_insertion_point(field_get:deepflow.LeakyReluParam.randomize)
  return randomize_;
}
void LeakyReluParam::set_randomize(bool value) {
  
  randomize_ = value;
  // @@protoc_insertion_point(field_set:deepflow.LeakyReluParam.randomize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReduceParam::kReduceOpFieldNumber;
const int ReduceParam::kReduceDimFieldNumber;
const int ReduceParam::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReduceParam::ReduceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.ReduceParam)
}
ReduceParam::ReduceParam(const ReduceParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reduce_op_, &from.reduce_op_,
    reinterpret_cast<char*>(&output_type_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(output_type_));
  // @@protoc_insertion_point(copy_constructor:deepflow.ReduceParam)
}

void ReduceParam::SharedCtor() {
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&output_type_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(output_type_));
  _cached_size_ = 0;
}

ReduceParam::~ReduceParam() {
  // @@protoc_insertion_point(destructor:deepflow.ReduceParam)
  SharedDtor();
}

void ReduceParam::SharedDtor() {
}

void ReduceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReduceParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReduceParam& ReduceParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReduceParam* ReduceParam::New(::google::protobuf::Arena* arena) const {
  ReduceParam* n = new ReduceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReduceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.ReduceParam)
  ::memset(&reduce_op_, 0, reinterpret_cast<char*>(&output_type_) -
    reinterpret_cast<char*>(&reduce_op_) + sizeof(output_type_));
}

bool ReduceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.ReduceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.ReduceParam.ReduceOp reduce_op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reduce_op(static_cast< ::deepflow::ReduceParam_ReduceOp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reduce_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ReduceParam.OutputType output_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_type(static_cast< ::deepflow::ReduceParam_OutputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.ReduceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.ReduceParam)
  return false;
#undef DO_
}

void ReduceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.ReduceParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reduce_op(), output);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reduce_dim(), output);
  }

  // .deepflow.ReduceParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.ReduceParam)
}

::google::protobuf::uint8* ReduceParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.ReduceParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reduce_op(), target);
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reduce_dim(), target);
  }

  // .deepflow.ReduceParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.ReduceParam)
  return target;
}

size_t ReduceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.ReduceParam)
  size_t total_size = 0;

  // .deepflow.ReduceParam.ReduceOp reduce_op = 1;
  if (this->reduce_op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reduce_op());
  }

  // int32 reduce_dim = 2;
  if (this->reduce_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reduce_dim());
  }

  // .deepflow.ReduceParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReduceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.ReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReduceParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReduceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.ReduceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.ReduceParam)
    MergeFrom(*source);
  }
}

void ReduceParam::MergeFrom(const ReduceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.ReduceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reduce_op() != 0) {
    set_reduce_op(from.reduce_op());
  }
  if (from.reduce_dim() != 0) {
    set_reduce_dim(from.reduce_dim());
  }
  if (from.output_type() != 0) {
    set_output_type(from.output_type());
  }
}

void ReduceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.ReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceParam::CopyFrom(const ReduceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.ReduceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceParam::IsInitialized() const {
  return true;
}

void ReduceParam::Swap(ReduceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReduceParam::InternalSwap(ReduceParam* other) {
  std::swap(reduce_op_, other->reduce_op_);
  std::swap(reduce_dim_, other->reduce_dim_);
  std::swap(output_type_, other->output_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReduceParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReduceParam

// .deepflow.ReduceParam.ReduceOp reduce_op = 1;
void ReduceParam::clear_reduce_op() {
  reduce_op_ = 0;
}
::deepflow::ReduceParam_ReduceOp ReduceParam::reduce_op() const {
  // @@protoc_insertion_point(field_get:deepflow.ReduceParam.reduce_op)
  return static_cast< ::deepflow::ReduceParam_ReduceOp >(reduce_op_);
}
void ReduceParam::set_reduce_op(::deepflow::ReduceParam_ReduceOp value) {
  
  reduce_op_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ReduceParam.reduce_op)
}

// int32 reduce_dim = 2;
void ReduceParam::clear_reduce_dim() {
  reduce_dim_ = 0;
}
::google::protobuf::int32 ReduceParam::reduce_dim() const {
  // @@protoc_insertion_point(field_get:deepflow.ReduceParam.reduce_dim)
  return reduce_dim_;
}
void ReduceParam::set_reduce_dim(::google::protobuf::int32 value) {
  
  reduce_dim_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ReduceParam.reduce_dim)
}

// .deepflow.ReduceParam.OutputType output_type = 3;
void ReduceParam::clear_output_type() {
  output_type_ = 0;
}
::deepflow::ReduceParam_OutputType ReduceParam::output_type() const {
  // @@protoc_insertion_point(field_get:deepflow.ReduceParam.output_type)
  return static_cast< ::deepflow::ReduceParam_OutputType >(output_type_);
}
void ReduceParam::set_output_type(::deepflow::ReduceParam_OutputType value) {
  
  output_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ReduceParam.output_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotParam::kSnapshotIntervalFieldNumber;
const int SnapshotParam::kSnapshotPrefixFieldNumber;
const int SnapshotParam::kPerImageHeightFieldNumber;
const int SnapshotParam::kPerImageWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotParam::SnapshotParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SnapshotParam)
}
SnapshotParam::SnapshotParam(const SnapshotParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_prefix().size() > 0) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  ::memcpy(&snapshot_interval_, &from.snapshot_interval_,
    reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  // @@protoc_insertion_point(copy_constructor:deepflow.SnapshotParam)
}

void SnapshotParam::SharedCtor() {
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
  _cached_size_ = 0;
}

SnapshotParam::~SnapshotParam() {
  // @@protoc_insertion_point(destructor:deepflow.SnapshotParam)
  SharedDtor();
}

void SnapshotParam::SharedDtor() {
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotParam& SnapshotParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnapshotParam* SnapshotParam::New(::google::protobuf::Arena* arena) const {
  SnapshotParam* n = new SnapshotParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SnapshotParam)
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_interval_, 0, reinterpret_cast<char*>(&per_image_width_) -
    reinterpret_cast<char*>(&snapshot_interval_) + sizeof(per_image_width_));
}

bool SnapshotParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SnapshotParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 snapshot_interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_prefix().data(), this->snapshot_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.SnapshotParam.snapshot_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 per_image_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SnapshotParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SnapshotParam)
  return false;
#undef DO_
}

void SnapshotParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SnapshotParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->snapshot_interval(), output);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SnapshotParam.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snapshot_prefix(), output);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->per_image_height(), output);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->per_image_width(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.SnapshotParam)
}

::google::protobuf::uint8* SnapshotParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SnapshotParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->snapshot_interval(), target);
  }

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_prefix().data(), this->snapshot_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SnapshotParam.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshot_prefix(), target);
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->per_image_height(), target);
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->per_image_width(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SnapshotParam)
  return target;
}

size_t SnapshotParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SnapshotParam)
  size_t total_size = 0;

  // string snapshot_prefix = 2;
  if (this->snapshot_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot_prefix());
  }

  // int32 snapshot_interval = 1;
  if (this->snapshot_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->snapshot_interval());
  }

  // int32 per_image_height = 3;
  if (this->per_image_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_height());
  }

  // int32 per_image_width = 4;
  if (this->per_image_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->per_image_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SnapshotParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SnapshotParam)
    MergeFrom(*source);
  }
}

void SnapshotParam::MergeFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SnapshotParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_prefix().size() > 0) {

    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  if (from.snapshot_interval() != 0) {
    set_snapshot_interval(from.snapshot_interval());
  }
  if (from.per_image_height() != 0) {
    set_per_image_height(from.per_image_height());
  }
  if (from.per_image_width() != 0) {
    set_per_image_width(from.per_image_width());
  }
}

void SnapshotParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotParam::CopyFrom(const SnapshotParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SnapshotParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotParam::IsInitialized() const {
  return true;
}

void SnapshotParam::Swap(SnapshotParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotParam::InternalSwap(SnapshotParam* other) {
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  std::swap(snapshot_interval_, other->snapshot_interval_);
  std::swap(per_image_height_, other->per_image_height_);
  std::swap(per_image_width_, other->per_image_width_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotParam

// int32 snapshot_interval = 1;
void SnapshotParam::clear_snapshot_interval() {
  snapshot_interval_ = 0;
}
::google::protobuf::int32 SnapshotParam::snapshot_interval() const {
  // @@protoc_insertion_point(field_get:deepflow.SnapshotParam.snapshot_interval)
  return snapshot_interval_;
}
void SnapshotParam::set_snapshot_interval(::google::protobuf::int32 value) {
  
  snapshot_interval_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SnapshotParam.snapshot_interval)
}

// string snapshot_prefix = 2;
void SnapshotParam::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotParam::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:deepflow.SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SnapshotParam::set_snapshot_prefix(const ::std::string& value) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.SnapshotParam.snapshot_prefix)
}
#if LANG_CXX11
void SnapshotParam::set_snapshot_prefix(::std::string&& value) {
  
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.SnapshotParam.snapshot_prefix)
}
#endif
void SnapshotParam::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.SnapshotParam.snapshot_prefix)
}
void SnapshotParam::set_snapshot_prefix(const char* value, size_t size) {
  
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.SnapshotParam.snapshot_prefix)
}
::std::string* SnapshotParam::mutable_snapshot_prefix() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.SnapshotParam.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotParam::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:deepflow.SnapshotParam.snapshot_prefix)
  
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotParam::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    
  } else {
    
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:deepflow.SnapshotParam.snapshot_prefix)
}

// int32 per_image_height = 3;
void SnapshotParam::clear_per_image_height() {
  per_image_height_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_height() const {
  // @@protoc_insertion_point(field_get:deepflow.SnapshotParam.per_image_height)
  return per_image_height_;
}
void SnapshotParam::set_per_image_height(::google::protobuf::int32 value) {
  
  per_image_height_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SnapshotParam.per_image_height)
}

// int32 per_image_width = 4;
void SnapshotParam::clear_per_image_width() {
  per_image_width_ = 0;
}
::google::protobuf::int32 SnapshotParam::per_image_width() const {
  // @@protoc_insertion_point(field_get:deepflow.SnapshotParam.per_image_width)
  return per_image_width_;
}
void SnapshotParam::set_per_image_width(::google::protobuf::int32 value) {
  
  per_image_width_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SnapshotParam.per_image_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceHolderParam::kTensorParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceHolderParam::PlaceHolderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PlaceHolderParam)
}
PlaceHolderParam::PlaceHolderParam(const PlaceHolderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_param()) {
    tensor_param_ = new ::deepflow::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:deepflow.PlaceHolderParam)
}

void PlaceHolderParam::SharedCtor() {
  tensor_param_ = NULL;
  _cached_size_ = 0;
}

PlaceHolderParam::~PlaceHolderParam() {
  // @@protoc_insertion_point(destructor:deepflow.PlaceHolderParam)
  SharedDtor();
}

void PlaceHolderParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
}

void PlaceHolderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceHolderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlaceHolderParam& PlaceHolderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlaceHolderParam* PlaceHolderParam::New(::google::protobuf::Arena* arena) const {
  PlaceHolderParam* n = new PlaceHolderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceHolderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PlaceHolderParam)
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
}

bool PlaceHolderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PlaceHolderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.TensorParam tensor_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PlaceHolderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PlaceHolderParam)
  return false;
#undef DO_
}

void PlaceHolderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PlaceHolderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PlaceHolderParam)
}

::google::protobuf::uint8* PlaceHolderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PlaceHolderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_param_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PlaceHolderParam)
  return target;
}

size_t PlaceHolderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PlaceHolderParam)
  size_t total_size = 0;

  // .deepflow.TensorParam tensor_param = 1;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceHolderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PlaceHolderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceHolderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceHolderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PlaceHolderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PlaceHolderParam)
    MergeFrom(*source);
  }
}

void PlaceHolderParam::MergeFrom(const PlaceHolderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PlaceHolderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor_param()) {
    mutable_tensor_param()->::deepflow::TensorParam::MergeFrom(from.tensor_param());
  }
}

void PlaceHolderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PlaceHolderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceHolderParam::CopyFrom(const PlaceHolderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PlaceHolderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceHolderParam::IsInitialized() const {
  return true;
}

void PlaceHolderParam::Swap(PlaceHolderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceHolderParam::InternalSwap(PlaceHolderParam* other) {
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceHolderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceHolderParam

// .deepflow.TensorParam tensor_param = 1;
bool PlaceHolderParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void PlaceHolderParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::deepflow::TensorParam& PlaceHolderParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:deepflow.PlaceHolderParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::deepflow::TensorParam::internal_default_instance();
}
::deepflow::TensorParam* PlaceHolderParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::deepflow::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.PlaceHolderParam.tensor_param)
  return tensor_param_;
}
::deepflow::TensorParam* PlaceHolderParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:deepflow.PlaceHolderParam.tensor_param)
  
  ::deepflow::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void PlaceHolderParam::set_allocated_tensor_param(::deepflow::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.PlaceHolderParam.tensor_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RestructureParam::kFirstDimFieldNumber;
const int RestructureParam::kSecondDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestructureParam::RestructureParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.RestructureParam)
}
RestructureParam::RestructureParam(const RestructureParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_dim_, &from.first_dim_,
    reinterpret_cast<char*>(&second_dim_) -
    reinterpret_cast<char*>(&first_dim_) + sizeof(second_dim_));
  // @@protoc_insertion_point(copy_constructor:deepflow.RestructureParam)
}

void RestructureParam::SharedCtor() {
  ::memset(&first_dim_, 0, reinterpret_cast<char*>(&second_dim_) -
    reinterpret_cast<char*>(&first_dim_) + sizeof(second_dim_));
  _cached_size_ = 0;
}

RestructureParam::~RestructureParam() {
  // @@protoc_insertion_point(destructor:deepflow.RestructureParam)
  SharedDtor();
}

void RestructureParam::SharedDtor() {
}

void RestructureParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestructureParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RestructureParam& RestructureParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestructureParam* RestructureParam::New(::google::protobuf::Arena* arena) const {
  RestructureParam* n = new RestructureParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestructureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.RestructureParam)
  ::memset(&first_dim_, 0, reinterpret_cast<char*>(&second_dim_) -
    reinterpret_cast<char*>(&first_dim_) + sizeof(second_dim_));
}

bool RestructureParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.RestructureParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 first_dim = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 second_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.RestructureParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.RestructureParam)
  return false;
#undef DO_
}

void RestructureParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.RestructureParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 first_dim = 1;
  if (this->first_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_dim(), output);
  }

  // int32 second_dim = 2;
  if (this->second_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second_dim(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.RestructureParam)
}

::google::protobuf::uint8* RestructureParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.RestructureParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 first_dim = 1;
  if (this->first_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_dim(), target);
  }

  // int32 second_dim = 2;
  if (this->second_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second_dim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.RestructureParam)
  return target;
}

size_t RestructureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.RestructureParam)
  size_t total_size = 0;

  // int32 first_dim = 1;
  if (this->first_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_dim());
  }

  // int32 second_dim = 2;
  if (this->second_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->second_dim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestructureParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.RestructureParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RestructureParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestructureParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.RestructureParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.RestructureParam)
    MergeFrom(*source);
  }
}

void RestructureParam::MergeFrom(const RestructureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.RestructureParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first_dim() != 0) {
    set_first_dim(from.first_dim());
  }
  if (from.second_dim() != 0) {
    set_second_dim(from.second_dim());
  }
}

void RestructureParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.RestructureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestructureParam::CopyFrom(const RestructureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.RestructureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestructureParam::IsInitialized() const {
  return true;
}

void RestructureParam::Swap(RestructureParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestructureParam::InternalSwap(RestructureParam* other) {
  std::swap(first_dim_, other->first_dim_);
  std::swap(second_dim_, other->second_dim_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestructureParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestructureParam

// int32 first_dim = 1;
void RestructureParam::clear_first_dim() {
  first_dim_ = 0;
}
::google::protobuf::int32 RestructureParam::first_dim() const {
  // @@protoc_insertion_point(field_get:deepflow.RestructureParam.first_dim)
  return first_dim_;
}
void RestructureParam::set_first_dim(::google::protobuf::int32 value) {
  
  first_dim_ = value;
  // @@protoc_insertion_point(field_set:deepflow.RestructureParam.first_dim)
}

// int32 second_dim = 2;
void RestructureParam::clear_second_dim() {
  second_dim_ = 0;
}
::google::protobuf::int32 RestructureParam::second_dim() const {
  // @@protoc_insertion_point(field_get:deepflow.RestructureParam.second_dim)
  return second_dim_;
}
void RestructureParam::set_second_dim(::google::protobuf::int32 value) {
  
  second_dim_ = value;
  // @@protoc_insertion_point(field_set:deepflow.RestructureParam.second_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableParam::kInitParamFieldNumber;
const int VariableParam::kSolverNameFieldNumber;
const int VariableParam::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableParam::VariableParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.VariableParam)
}
VariableParam::VariableParam(const VariableParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  solver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.solver_name().size() > 0) {
    solver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_name_);
  }
  if (from.has_init_param()) {
    init_param_ = new ::deepflow::InitParam(*from.init_param_);
  } else {
    init_param_ = NULL;
  }
  if (from.has_weights()) {
    weights_ = new ::deepflow::TensorData(*from.weights_);
  } else {
    weights_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:deepflow.VariableParam)
}

void VariableParam::SharedCtor() {
  solver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&init_param_, 0, reinterpret_cast<char*>(&weights_) -
    reinterpret_cast<char*>(&init_param_) + sizeof(weights_));
  _cached_size_ = 0;
}

VariableParam::~VariableParam() {
  // @@protoc_insertion_point(destructor:deepflow.VariableParam)
  SharedDtor();
}

void VariableParam::SharedDtor() {
  solver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete init_param_;
  }
  if (this != internal_default_instance()) {
    delete weights_;
  }
}

void VariableParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VariableParam& VariableParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

VariableParam* VariableParam::New(::google::protobuf::Arena* arena) const {
  VariableParam* n = new VariableParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VariableParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.VariableParam)
  solver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && init_param_ != NULL) {
    delete init_param_;
  }
  init_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) {
    delete weights_;
  }
  weights_ = NULL;
}

bool VariableParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.VariableParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.InitParam init_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string solver_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->solver_name().data(), this->solver_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.VariableParam.solver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.VariableParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.VariableParam)
  return false;
#undef DO_
}

void VariableParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.VariableParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.InitParam init_param = 1;
  if (this->has_init_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->init_param_, output);
  }

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_name().data(), this->solver_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.VariableParam.solver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->solver_name(), output);
  }

  // .deepflow.TensorData weights = 3;
  if (this->has_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weights_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.VariableParam)
}

::google::protobuf::uint8* VariableParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.VariableParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.InitParam init_param = 1;
  if (this->has_init_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->init_param_, deterministic, target);
  }

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_name().data(), this->solver_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.VariableParam.solver_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->solver_name(), target);
  }

  // .deepflow.TensorData weights = 3;
  if (this->has_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weights_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.VariableParam)
  return target;
}

size_t VariableParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.VariableParam)
  size_t total_size = 0;

  // string solver_name = 2;
  if (this->solver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->solver_name());
  }

  // .deepflow.InitParam init_param = 1;
  if (this->has_init_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_param_);
  }

  // .deepflow.TensorData weights = 3;
  if (this->has_weights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weights_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VariableParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.VariableParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.VariableParam)
    MergeFrom(*source);
  }
}

void VariableParam::MergeFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.VariableParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.solver_name().size() > 0) {

    solver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_name_);
  }
  if (from.has_init_param()) {
    mutable_init_param()->::deepflow::InitParam::MergeFrom(from.init_param());
  }
  if (from.has_weights()) {
    mutable_weights()->::deepflow::TensorData::MergeFrom(from.weights());
  }
}

void VariableParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableParam::CopyFrom(const VariableParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.VariableParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableParam::IsInitialized() const {
  return true;
}

void VariableParam::Swap(VariableParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VariableParam::InternalSwap(VariableParam* other) {
  solver_name_.Swap(&other->solver_name_);
  std::swap(init_param_, other->init_param_);
  std::swap(weights_, other->weights_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VariableParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VariableParam

// .deepflow.InitParam init_param = 1;
bool VariableParam::has_init_param() const {
  return this != internal_default_instance() && init_param_ != NULL;
}
void VariableParam::clear_init_param() {
  if (GetArenaNoVirtual() == NULL && init_param_ != NULL) delete init_param_;
  init_param_ = NULL;
}
const ::deepflow::InitParam& VariableParam::init_param() const {
  // @@protoc_insertion_point(field_get:deepflow.VariableParam.init_param)
  return init_param_ != NULL ? *init_param_
                         : *::deepflow::InitParam::internal_default_instance();
}
::deepflow::InitParam* VariableParam::mutable_init_param() {
  
  if (init_param_ == NULL) {
    init_param_ = new ::deepflow::InitParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.VariableParam.init_param)
  return init_param_;
}
::deepflow::InitParam* VariableParam::release_init_param() {
  // @@protoc_insertion_point(field_release:deepflow.VariableParam.init_param)
  
  ::deepflow::InitParam* temp = init_param_;
  init_param_ = NULL;
  return temp;
}
void VariableParam::set_allocated_init_param(::deepflow::InitParam* init_param) {
  delete init_param_;
  init_param_ = init_param;
  if (init_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.VariableParam.init_param)
}

// string solver_name = 2;
void VariableParam::clear_solver_name() {
  solver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VariableParam::solver_name() const {
  // @@protoc_insertion_point(field_get:deepflow.VariableParam.solver_name)
  return solver_name_.GetNoArena();
}
void VariableParam::set_solver_name(const ::std::string& value) {
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.VariableParam.solver_name)
}
#if LANG_CXX11
void VariableParam::set_solver_name(::std::string&& value) {
  
  solver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.VariableParam.solver_name)
}
#endif
void VariableParam::set_solver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.VariableParam.solver_name)
}
void VariableParam::set_solver_name(const char* value, size_t size) {
  
  solver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.VariableParam.solver_name)
}
::std::string* VariableParam::mutable_solver_name() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.VariableParam.solver_name)
  return solver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VariableParam::release_solver_name() {
  // @@protoc_insertion_point(field_release:deepflow.VariableParam.solver_name)
  
  return solver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VariableParam::set_allocated_solver_name(::std::string* solver_name) {
  if (solver_name != NULL) {
    
  } else {
    
  }
  solver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solver_name);
  // @@protoc_insertion_point(field_set_allocated:deepflow.VariableParam.solver_name)
}

// .deepflow.TensorData weights = 3;
bool VariableParam::has_weights() const {
  return this != internal_default_instance() && weights_ != NULL;
}
void VariableParam::clear_weights() {
  if (GetArenaNoVirtual() == NULL && weights_ != NULL) delete weights_;
  weights_ = NULL;
}
const ::deepflow::TensorData& VariableParam::weights() const {
  // @@protoc_insertion_point(field_get:deepflow.VariableParam.weights)
  return weights_ != NULL ? *weights_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* VariableParam::mutable_weights() {
  
  if (weights_ == NULL) {
    weights_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.VariableParam.weights)
  return weights_;
}
::deepflow::TensorData* VariableParam::release_weights() {
  // @@protoc_insertion_point(field_release:deepflow.VariableParam.weights)
  
  ::deepflow::TensorData* temp = weights_;
  weights_ = NULL;
  return temp;
}
void VariableParam::set_allocated_weights(::deepflow::TensorData* weights) {
  delete weights_;
  weights_ = weights;
  if (weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.VariableParam.weights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataGeneratorParam::kNumSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataGeneratorParam::DataGeneratorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.DataGeneratorParam)
}
DataGeneratorParam::DataGeneratorParam(const DataGeneratorParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_samples_ = from.num_samples_;
  // @@protoc_insertion_point(copy_constructor:deepflow.DataGeneratorParam)
}

void DataGeneratorParam::SharedCtor() {
  num_samples_ = 0;
  _cached_size_ = 0;
}

DataGeneratorParam::~DataGeneratorParam() {
  // @@protoc_insertion_point(destructor:deepflow.DataGeneratorParam)
  SharedDtor();
}

void DataGeneratorParam::SharedDtor() {
}

void DataGeneratorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataGeneratorParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataGeneratorParam& DataGeneratorParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataGeneratorParam* DataGeneratorParam::New(::google::protobuf::Arena* arena) const {
  DataGeneratorParam* n = new DataGeneratorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataGeneratorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.DataGeneratorParam)
  num_samples_ = 0;
}

bool DataGeneratorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.DataGeneratorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.DataGeneratorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.DataGeneratorParam)
  return false;
#undef DO_
}

void DataGeneratorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.DataGeneratorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_samples = 1;
  if (this->num_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_samples(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.DataGeneratorParam)
}

::google::protobuf::uint8* DataGeneratorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.DataGeneratorParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_samples = 1;
  if (this->num_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_samples(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.DataGeneratorParam)
  return target;
}

size_t DataGeneratorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.DataGeneratorParam)
  size_t total_size = 0;

  // int32 num_samples = 1;
  if (this->num_samples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_samples());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataGeneratorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.DataGeneratorParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DataGeneratorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataGeneratorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.DataGeneratorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.DataGeneratorParam)
    MergeFrom(*source);
  }
}

void DataGeneratorParam::MergeFrom(const DataGeneratorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.DataGeneratorParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_samples() != 0) {
    set_num_samples(from.num_samples());
  }
}

void DataGeneratorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.DataGeneratorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataGeneratorParam::CopyFrom(const DataGeneratorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.DataGeneratorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataGeneratorParam::IsInitialized() const {
  return true;
}

void DataGeneratorParam::Swap(DataGeneratorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataGeneratorParam::InternalSwap(DataGeneratorParam* other) {
  std::swap(num_samples_, other->num_samples_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataGeneratorParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataGeneratorParam

// int32 num_samples = 1;
void DataGeneratorParam::clear_num_samples() {
  num_samples_ = 0;
}
::google::protobuf::int32 DataGeneratorParam::num_samples() const {
  // @@protoc_insertion_point(field_get:deepflow.DataGeneratorParam.num_samples)
  return num_samples_;
}
void DataGeneratorParam::set_num_samples(::google::protobuf::int32 value) {
  
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:deepflow.DataGeneratorParam.num_samples)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivationParam::kTypeFieldNumber;
const int ActivationParam::kCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivationParam::ActivationParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.ActivationParam)
}
ActivationParam::ActivationParam(const ActivationParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&coef_) -
    reinterpret_cast<char*>(&type_) + sizeof(coef_));
  // @@protoc_insertion_point(copy_constructor:deepflow.ActivationParam)
}

void ActivationParam::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&coef_) -
    reinterpret_cast<char*>(&type_) + sizeof(coef_));
  _cached_size_ = 0;
}

ActivationParam::~ActivationParam() {
  // @@protoc_insertion_point(destructor:deepflow.ActivationParam)
  SharedDtor();
}

void ActivationParam::SharedDtor() {
}

void ActivationParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivationParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivationParam& ActivationParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivationParam* ActivationParam::New(::google::protobuf::Arena* arena) const {
  ActivationParam* n = new ActivationParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.ActivationParam)
  ::memset(&type_, 0, reinterpret_cast<char*>(&coef_) -
    reinterpret_cast<char*>(&type_) + sizeof(coef_));
}

bool ActivationParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.ActivationParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.ActivationParam.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::deepflow::ActivationParam_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coef = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.ActivationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.ActivationParam)
  return false;
#undef DO_
}

void ActivationParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.ActivationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActivationParam.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float coef = 2;
  if (this->coef() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->coef(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.ActivationParam)
}

::google::protobuf::uint8* ActivationParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.ActivationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.ActivationParam.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float coef = 2;
  if (this->coef() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->coef(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.ActivationParam)
  return target;
}

size_t ActivationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.ActivationParam)
  size_t total_size = 0;

  // .deepflow.ActivationParam.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float coef = 2;
  if (this->coef() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivationParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.ActivationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivationParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.ActivationParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.ActivationParam)
    MergeFrom(*source);
  }
}

void ActivationParam::MergeFrom(const ActivationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.ActivationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.coef() != 0) {
    set_coef(from.coef());
  }
}

void ActivationParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.ActivationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationParam::CopyFrom(const ActivationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.ActivationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParam::IsInitialized() const {
  return true;
}

void ActivationParam::Swap(ActivationParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivationParam::InternalSwap(ActivationParam* other) {
  std::swap(type_, other->type_);
  std::swap(coef_, other->coef_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivationParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivationParam

// .deepflow.ActivationParam.Type type = 1;
void ActivationParam::clear_type() {
  type_ = 0;
}
::deepflow::ActivationParam_Type ActivationParam::type() const {
  // @@protoc_insertion_point(field_get:deepflow.ActivationParam.type)
  return static_cast< ::deepflow::ActivationParam_Type >(type_);
}
void ActivationParam::set_type(::deepflow::ActivationParam_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ActivationParam.type)
}

// float coef = 2;
void ActivationParam::clear_coef() {
  coef_ = 0;
}
float ActivationParam::coef() const {
  // @@protoc_insertion_point(field_get:deepflow.ActivationParam.coef)
  return coef_;
}
void ActivationParam::set_coef(float value) {
  
  coef_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ActivationParam.coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageBatchReaderParam::kFolderPathFieldNumber;
const int ImageBatchReaderParam::kTensorParamFieldNumber;
const int ImageBatchReaderParam::kRandomizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageBatchReaderParam::ImageBatchReaderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.ImageBatchReaderParam)
}
ImageBatchReaderParam::ImageBatchReaderParam(const ImageBatchReaderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_path().size() > 0) {
    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  if (from.has_tensor_param()) {
    tensor_param_ = new ::deepflow::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  randomize_ = from.randomize_;
  // @@protoc_insertion_point(copy_constructor:deepflow.ImageBatchReaderParam)
}

void ImageBatchReaderParam::SharedCtor() {
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&randomize_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(randomize_));
  _cached_size_ = 0;
}

ImageBatchReaderParam::~ImageBatchReaderParam() {
  // @@protoc_insertion_point(destructor:deepflow.ImageBatchReaderParam)
  SharedDtor();
}

void ImageBatchReaderParam::SharedDtor() {
  folder_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
}

void ImageBatchReaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageBatchReaderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageBatchReaderParam& ImageBatchReaderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageBatchReaderParam* ImageBatchReaderParam::New(::google::protobuf::Arena* arena) const {
  ImageBatchReaderParam* n = new ImageBatchReaderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageBatchReaderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.ImageBatchReaderParam)
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  randomize_ = false;
}

bool ImageBatchReaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.ImageBatchReaderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string folder_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_path().data(), this->folder_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.ImageBatchReaderParam.folder_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorParam tensor_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool randomize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.ImageBatchReaderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.ImageBatchReaderParam)
  return false;
#undef DO_
}

void ImageBatchReaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.ImageBatchReaderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.ImageBatchReaderParam.folder_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->folder_path(), output);
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tensor_param_, output);
  }

  // bool randomize = 3;
  if (this->randomize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->randomize(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.ImageBatchReaderParam)
}

::google::protobuf::uint8* ImageBatchReaderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.ImageBatchReaderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.ImageBatchReaderParam.folder_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->folder_path(), target);
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tensor_param_, deterministic, target);
  }

  // bool randomize = 3;
  if (this->randomize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->randomize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.ImageBatchReaderParam)
  return target;
}

size_t ImageBatchReaderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.ImageBatchReaderParam)
  size_t total_size = 0;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_path());
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // bool randomize = 3;
  if (this->randomize() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageBatchReaderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.ImageBatchReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageBatchReaderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageBatchReaderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.ImageBatchReaderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.ImageBatchReaderParam)
    MergeFrom(*source);
  }
}

void ImageBatchReaderParam::MergeFrom(const ImageBatchReaderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.ImageBatchReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.folder_path().size() > 0) {

    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::deepflow::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.randomize() != 0) {
    set_randomize(from.randomize());
  }
}

void ImageBatchReaderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.ImageBatchReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageBatchReaderParam::CopyFrom(const ImageBatchReaderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.ImageBatchReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageBatchReaderParam::IsInitialized() const {
  return true;
}

void ImageBatchReaderParam::Swap(ImageBatchReaderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageBatchReaderParam::InternalSwap(ImageBatchReaderParam* other) {
  folder_path_.Swap(&other->folder_path_);
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(randomize_, other->randomize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageBatchReaderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageBatchReaderParam

// string folder_path = 1;
void ImageBatchReaderParam::clear_folder_path() {
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageBatchReaderParam::folder_path() const {
  // @@protoc_insertion_point(field_get:deepflow.ImageBatchReaderParam.folder_path)
  return folder_path_.GetNoArena();
}
void ImageBatchReaderParam::set_folder_path(const ::std::string& value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.ImageBatchReaderParam.folder_path)
}
#if LANG_CXX11
void ImageBatchReaderParam::set_folder_path(::std::string&& value) {
  
  folder_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.ImageBatchReaderParam.folder_path)
}
#endif
void ImageBatchReaderParam::set_folder_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.ImageBatchReaderParam.folder_path)
}
void ImageBatchReaderParam::set_folder_path(const char* value, size_t size) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.ImageBatchReaderParam.folder_path)
}
::std::string* ImageBatchReaderParam::mutable_folder_path() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.ImageBatchReaderParam.folder_path)
  return folder_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageBatchReaderParam::release_folder_path() {
  // @@protoc_insertion_point(field_release:deepflow.ImageBatchReaderParam.folder_path)
  
  return folder_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageBatchReaderParam::set_allocated_folder_path(::std::string* folder_path) {
  if (folder_path != NULL) {
    
  } else {
    
  }
  folder_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_path);
  // @@protoc_insertion_point(field_set_allocated:deepflow.ImageBatchReaderParam.folder_path)
}

// .deepflow.TensorParam tensor_param = 2;
bool ImageBatchReaderParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void ImageBatchReaderParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::deepflow::TensorParam& ImageBatchReaderParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:deepflow.ImageBatchReaderParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::deepflow::TensorParam::internal_default_instance();
}
::deepflow::TensorParam* ImageBatchReaderParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::deepflow::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.ImageBatchReaderParam.tensor_param)
  return tensor_param_;
}
::deepflow::TensorParam* ImageBatchReaderParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:deepflow.ImageBatchReaderParam.tensor_param)
  
  ::deepflow::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void ImageBatchReaderParam::set_allocated_tensor_param(::deepflow::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.ImageBatchReaderParam.tensor_param)
}

// bool randomize = 3;
void ImageBatchReaderParam::clear_randomize() {
  randomize_ = false;
}
bool ImageBatchReaderParam::randomize() const {
  // @@protoc_insertion_point(field_get:deepflow.ImageBatchReaderParam.randomize)
  return randomize_;
}
void ImageBatchReaderParam::set_randomize(bool value) {
  
  randomize_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ImageBatchReaderParam.randomize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageReaderParam::kFileNameFieldNumber;
const int ImageReaderParam::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageReaderParam::ImageReaderParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.ImageReaderParam)
}
ImageReaderParam::ImageReaderParam(const ImageReaderParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:deepflow.ImageReaderParam)
}

void ImageReaderParam::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

ImageReaderParam::~ImageReaderParam() {
  // @@protoc_insertion_point(destructor:deepflow.ImageReaderParam)
  SharedDtor();
}

void ImageReaderParam::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageReaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageReaderParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageReaderParam& ImageReaderParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageReaderParam* ImageReaderParam::New(::google::protobuf::Arena* arena) const {
  ImageReaderParam* n = new ImageReaderParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageReaderParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.ImageReaderParam)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool ImageReaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.ImageReaderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.ImageReaderParam.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ImageReaderParam.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::deepflow::ImageReaderParam_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.ImageReaderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.ImageReaderParam)
  return false;
#undef DO_
}

void ImageReaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.ImageReaderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.ImageReaderParam.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // .deepflow.ImageReaderParam.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.ImageReaderParam)
}

::google::protobuf::uint8* ImageReaderParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.ImageReaderParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.ImageReaderParam.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // .deepflow.ImageReaderParam.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.ImageReaderParam)
  return target;
}

size_t ImageReaderParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.ImageReaderParam)
  size_t total_size = 0;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // .deepflow.ImageReaderParam.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageReaderParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.ImageReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageReaderParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageReaderParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.ImageReaderParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.ImageReaderParam)
    MergeFrom(*source);
  }
}

void ImageReaderParam::MergeFrom(const ImageReaderParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.ImageReaderParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ImageReaderParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.ImageReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageReaderParam::CopyFrom(const ImageReaderParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.ImageReaderParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReaderParam::IsInitialized() const {
  return true;
}

void ImageReaderParam::Swap(ImageReaderParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageReaderParam::InternalSwap(ImageReaderParam* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageReaderParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageReaderParam

// string file_name = 1;
void ImageReaderParam::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageReaderParam::file_name() const {
  // @@protoc_insertion_point(field_get:deepflow.ImageReaderParam.file_name)
  return file_name_.GetNoArena();
}
void ImageReaderParam::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.ImageReaderParam.file_name)
}
#if LANG_CXX11
void ImageReaderParam::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.ImageReaderParam.file_name)
}
#endif
void ImageReaderParam::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.ImageReaderParam.file_name)
}
void ImageReaderParam::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.ImageReaderParam.file_name)
}
::std::string* ImageReaderParam::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.ImageReaderParam.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageReaderParam::release_file_name() {
  // @@protoc_insertion_point(field_release:deepflow.ImageReaderParam.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageReaderParam::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:deepflow.ImageReaderParam.file_name)
}

// .deepflow.ImageReaderParam.Type type = 2;
void ImageReaderParam::clear_type() {
  type_ = 0;
}
::deepflow::ImageReaderParam_Type ImageReaderParam::type() const {
  // @@protoc_insertion_point(field_get:deepflow.ImageReaderParam.type)
  return static_cast< ::deepflow::ImageReaderParam_Type >(type_);
}
void ImageReaderParam::set_type(::deepflow::ImageReaderParam_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ImageReaderParam.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MnistParam::kFolderPathFieldNumber;
const int MnistParam::kReaderTypeFieldNumber;
const int MnistParam::kOutputTypeFieldNumber;
const int MnistParam::kBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MnistParam::MnistParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.MnistParam)
}
MnistParam::MnistParam(const MnistParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.folder_path().size() > 0) {
    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  ::memcpy(&reader_type_, &from.reader_type_,
    reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&reader_type_) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:deepflow.MnistParam)
}

void MnistParam::SharedCtor() {
  folder_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reader_type_, 0, reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&reader_type_) + sizeof(batch_size_));
  _cached_size_ = 0;
}

MnistParam::~MnistParam() {
  // @@protoc_insertion_point(destructor:deepflow.MnistParam)
  SharedDtor();
}

void MnistParam::SharedDtor() {
  folder_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MnistParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MnistParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MnistParam& MnistParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

MnistParam* MnistParam::New(::google::protobuf::Arena* arena) const {
  MnistParam* n = new MnistParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MnistParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.MnistParam)
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reader_type_, 0, reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&reader_type_) + sizeof(batch_size_));
}

bool MnistParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.MnistParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string folder_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->folder_path().data(), this->folder_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.MnistParam.folder_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.MnistParam.ReaderType reader_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reader_type(static_cast< ::deepflow::MnistParam_ReaderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.MnistParam.OutputType output_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_type(static_cast< ::deepflow::MnistParam_OutputType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.MnistParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.MnistParam)
  return false;
#undef DO_
}

void MnistParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.MnistParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.MnistParam.folder_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->folder_path(), output);
  }

  // .deepflow.MnistParam.ReaderType reader_type = 2;
  if (this->reader_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reader_type(), output);
  }

  // .deepflow.MnistParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_type(), output);
  }

  // int32 batch_size = 4;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.MnistParam)
}

::google::protobuf::uint8* MnistParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.MnistParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->folder_path().data(), this->folder_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.MnistParam.folder_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->folder_path(), target);
  }

  // .deepflow.MnistParam.ReaderType reader_type = 2;
  if (this->reader_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reader_type(), target);
  }

  // .deepflow.MnistParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_type(), target);
  }

  // int32 batch_size = 4;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.MnistParam)
  return target;
}

size_t MnistParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.MnistParam)
  size_t total_size = 0;

  // string folder_path = 1;
  if (this->folder_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->folder_path());
  }

  // .deepflow.MnistParam.ReaderType reader_type = 2;
  if (this->reader_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reader_type());
  }

  // .deepflow.MnistParam.OutputType output_type = 3;
  if (this->output_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
  }

  // int32 batch_size = 4;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MnistParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.MnistParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MnistParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MnistParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.MnistParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.MnistParam)
    MergeFrom(*source);
  }
}

void MnistParam::MergeFrom(const MnistParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.MnistParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.folder_path().size() > 0) {

    folder_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.folder_path_);
  }
  if (from.reader_type() != 0) {
    set_reader_type(from.reader_type());
  }
  if (from.output_type() != 0) {
    set_output_type(from.output_type());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
}

void MnistParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.MnistParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MnistParam::CopyFrom(const MnistParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.MnistParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MnistParam::IsInitialized() const {
  return true;
}

void MnistParam::Swap(MnistParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MnistParam::InternalSwap(MnistParam* other) {
  folder_path_.Swap(&other->folder_path_);
  std::swap(reader_type_, other->reader_type_);
  std::swap(output_type_, other->output_type_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MnistParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MnistParam

// string folder_path = 1;
void MnistParam::clear_folder_path() {
  folder_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MnistParam::folder_path() const {
  // @@protoc_insertion_point(field_get:deepflow.MnistParam.folder_path)
  return folder_path_.GetNoArena();
}
void MnistParam::set_folder_path(const ::std::string& value) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.MnistParam.folder_path)
}
#if LANG_CXX11
void MnistParam::set_folder_path(::std::string&& value) {
  
  folder_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.MnistParam.folder_path)
}
#endif
void MnistParam::set_folder_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.MnistParam.folder_path)
}
void MnistParam::set_folder_path(const char* value, size_t size) {
  
  folder_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.MnistParam.folder_path)
}
::std::string* MnistParam::mutable_folder_path() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.MnistParam.folder_path)
  return folder_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MnistParam::release_folder_path() {
  // @@protoc_insertion_point(field_release:deepflow.MnistParam.folder_path)
  
  return folder_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MnistParam::set_allocated_folder_path(::std::string* folder_path) {
  if (folder_path != NULL) {
    
  } else {
    
  }
  folder_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder_path);
  // @@protoc_insertion_point(field_set_allocated:deepflow.MnistParam.folder_path)
}

// .deepflow.MnistParam.ReaderType reader_type = 2;
void MnistParam::clear_reader_type() {
  reader_type_ = 0;
}
::deepflow::MnistParam_ReaderType MnistParam::reader_type() const {
  // @@protoc_insertion_point(field_get:deepflow.MnistParam.reader_type)
  return static_cast< ::deepflow::MnistParam_ReaderType >(reader_type_);
}
void MnistParam::set_reader_type(::deepflow::MnistParam_ReaderType value) {
  
  reader_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.MnistParam.reader_type)
}

// .deepflow.MnistParam.OutputType output_type = 3;
void MnistParam::clear_output_type() {
  output_type_ = 0;
}
::deepflow::MnistParam_OutputType MnistParam::output_type() const {
  // @@protoc_insertion_point(field_get:deepflow.MnistParam.output_type)
  return static_cast< ::deepflow::MnistParam_OutputType >(output_type_);
}
void MnistParam::set_output_type(::deepflow::MnistParam_OutputType value) {
  
  output_type_ = value;
  // @@protoc_insertion_point(field_set:deepflow.MnistParam.output_type)
}

// int32 batch_size = 4;
void MnistParam::clear_batch_size() {
  batch_size_ = 0;
}
::google::protobuf::int32 MnistParam::batch_size() const {
  // @@protoc_insertion_point(field_get:deepflow.MnistParam.batch_size)
  return batch_size_;
}
void MnistParam::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:deepflow.MnistParam.batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastFloatParam::CastFloatParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.CastFloatParam)
}
CastFloatParam::CastFloatParam(const CastFloatParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.CastFloatParam)
}

void CastFloatParam::SharedCtor() {
  _cached_size_ = 0;
}

CastFloatParam::~CastFloatParam() {
  // @@protoc_insertion_point(destructor:deepflow.CastFloatParam)
  SharedDtor();
}

void CastFloatParam::SharedDtor() {
}

void CastFloatParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastFloatParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastFloatParam& CastFloatParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastFloatParam* CastFloatParam::New(::google::protobuf::Arena* arena) const {
  CastFloatParam* n = new CastFloatParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastFloatParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.CastFloatParam)
}

bool CastFloatParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.CastFloatParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.CastFloatParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.CastFloatParam)
  return false;
#undef DO_
}

void CastFloatParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.CastFloatParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.CastFloatParam)
}

::google::protobuf::uint8* CastFloatParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.CastFloatParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.CastFloatParam)
  return target;
}

size_t CastFloatParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.CastFloatParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastFloatParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.CastFloatParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CastFloatParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastFloatParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.CastFloatParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.CastFloatParam)
    MergeFrom(*source);
  }
}

void CastFloatParam::MergeFrom(const CastFloatParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.CastFloatParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CastFloatParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.CastFloatParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastFloatParam::CopyFrom(const CastFloatParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.CastFloatParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastFloatParam::IsInitialized() const {
  return true;
}

void CastFloatParam::Swap(CastFloatParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastFloatParam::InternalSwap(CastFloatParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastFloatParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastFloatParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormalizationParam::kModeFieldNumber;
const int BatchNormalizationParam::kExpAvgFactorFieldNumber;
const int BatchNormalizationParam::kAlphaDataFieldNumber;
const int BatchNormalizationParam::kBetaDataFieldNumber;
const int BatchNormalizationParam::kAlphaParamFieldNumber;
const int BatchNormalizationParam::kBetaParamFieldNumber;
const int BatchNormalizationParam::kScaleFieldNumber;
const int BatchNormalizationParam::kBiasFieldNumber;
const int BatchNormalizationParam::kMeanFieldNumber;
const int BatchNormalizationParam::kVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormalizationParam::BatchNormalizationParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.BatchNormalizationParam)
}
BatchNormalizationParam::BatchNormalizationParam(const BatchNormalizationParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scale()) {
    scale_ = new ::deepflow::TensorData(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_bias()) {
    bias_ = new ::deepflow::TensorData(*from.bias_);
  } else {
    bias_ = NULL;
  }
  if (from.has_mean()) {
    mean_ = new ::deepflow::TensorData(*from.mean_);
  } else {
    mean_ = NULL;
  }
  if (from.has_var()) {
    var_ = new ::deepflow::TensorData(*from.var_);
  } else {
    var_ = NULL;
  }
  ::memcpy(&mode_, &from.mode_,
    reinterpret_cast<char*>(&beta_param_) -
    reinterpret_cast<char*>(&mode_) + sizeof(beta_param_));
  // @@protoc_insertion_point(copy_constructor:deepflow.BatchNormalizationParam)
}

void BatchNormalizationParam::SharedCtor() {
  ::memset(&scale_, 0, reinterpret_cast<char*>(&beta_param_) -
    reinterpret_cast<char*>(&scale_) + sizeof(beta_param_));
  _cached_size_ = 0;
}

BatchNormalizationParam::~BatchNormalizationParam() {
  // @@protoc_insertion_point(destructor:deepflow.BatchNormalizationParam)
  SharedDtor();
}

void BatchNormalizationParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete scale_;
  }
  if (this != internal_default_instance()) {
    delete bias_;
  }
  if (this != internal_default_instance()) {
    delete mean_;
  }
  if (this != internal_default_instance()) {
    delete var_;
  }
}

void BatchNormalizationParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormalizationParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchNormalizationParam& BatchNormalizationParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchNormalizationParam* BatchNormalizationParam::New(::google::protobuf::Arena* arena) const {
  BatchNormalizationParam* n = new BatchNormalizationParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormalizationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.BatchNormalizationParam)
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
  if (GetArenaNoVirtual() == NULL && bias_ != NULL) {
    delete bias_;
  }
  bias_ = NULL;
  if (GetArenaNoVirtual() == NULL && mean_ != NULL) {
    delete mean_;
  }
  mean_ = NULL;
  if (GetArenaNoVirtual() == NULL && var_ != NULL) {
    delete var_;
  }
  var_ = NULL;
  ::memset(&mode_, 0, reinterpret_cast<char*>(&beta_param_) -
    reinterpret_cast<char*>(&mode_) + sizeof(beta_param_));
}

bool BatchNormalizationParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.BatchNormalizationParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .deepflow.BatchNormalizationParam.Mode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::deepflow::BatchNormalizationParam_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exp_avg_factor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_avg_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData scale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData bias = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData mean = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData var = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.BatchNormalizationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.BatchNormalizationParam)
  return false;
#undef DO_
}

void BatchNormalizationParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.BatchNormalizationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.BatchNormalizationParam.Mode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // float exp_avg_factor = 2;
  if (this->exp_avg_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->exp_avg_factor(), output);
  }

  // float alpha_data = 3;
  if (this->alpha_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha_data(), output);
  }

  // float beta_data = 4;
  if (this->beta_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta_data(), output);
  }

  // float alpha_param = 5;
  if (this->alpha_param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->alpha_param(), output);
  }

  // float beta_param = 6;
  if (this->beta_param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->beta_param(), output);
  }

  // .deepflow.TensorData scale = 7;
  if (this->has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scale_, output);
  }

  // .deepflow.TensorData bias = 8;
  if (this->has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_, output);
  }

  // .deepflow.TensorData mean = 9;
  if (this->has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->mean_, output);
  }

  // .deepflow.TensorData var = 10;
  if (this->has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->var_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.BatchNormalizationParam)
}

::google::protobuf::uint8* BatchNormalizationParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.BatchNormalizationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .deepflow.BatchNormalizationParam.Mode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // float exp_avg_factor = 2;
  if (this->exp_avg_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->exp_avg_factor(), target);
  }

  // float alpha_data = 3;
  if (this->alpha_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha_data(), target);
  }

  // float beta_data = 4;
  if (this->beta_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta_data(), target);
  }

  // float alpha_param = 5;
  if (this->alpha_param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->alpha_param(), target);
  }

  // float beta_param = 6;
  if (this->beta_param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->beta_param(), target);
  }

  // .deepflow.TensorData scale = 7;
  if (this->has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->scale_, deterministic, target);
  }

  // .deepflow.TensorData bias = 8;
  if (this->has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_, deterministic, target);
  }

  // .deepflow.TensorData mean = 9;
  if (this->has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->mean_, deterministic, target);
  }

  // .deepflow.TensorData var = 10;
  if (this->has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->var_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.BatchNormalizationParam)
  return target;
}

size_t BatchNormalizationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.BatchNormalizationParam)
  size_t total_size = 0;

  // .deepflow.TensorData scale = 7;
  if (this->has_scale()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scale_);
  }

  // .deepflow.TensorData bias = 8;
  if (this->has_bias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);
  }

  // .deepflow.TensorData mean = 9;
  if (this->has_mean()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mean_);
  }

  // .deepflow.TensorData var = 10;
  if (this->has_var()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->var_);
  }

  // .deepflow.BatchNormalizationParam.Mode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // float exp_avg_factor = 2;
  if (this->exp_avg_factor() != 0) {
    total_size += 1 + 4;
  }

  // float alpha_data = 3;
  if (this->alpha_data() != 0) {
    total_size += 1 + 4;
  }

  // float beta_data = 4;
  if (this->beta_data() != 0) {
    total_size += 1 + 4;
  }

  // float alpha_param = 5;
  if (this->alpha_param() != 0) {
    total_size += 1 + 4;
  }

  // float beta_param = 6;
  if (this->beta_param() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormalizationParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.BatchNormalizationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormalizationParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormalizationParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.BatchNormalizationParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.BatchNormalizationParam)
    MergeFrom(*source);
  }
}

void BatchNormalizationParam::MergeFrom(const BatchNormalizationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.BatchNormalizationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    mutable_scale()->::deepflow::TensorData::MergeFrom(from.scale());
  }
  if (from.has_bias()) {
    mutable_bias()->::deepflow::TensorData::MergeFrom(from.bias());
  }
  if (from.has_mean()) {
    mutable_mean()->::deepflow::TensorData::MergeFrom(from.mean());
  }
  if (from.has_var()) {
    mutable_var()->::deepflow::TensorData::MergeFrom(from.var());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.exp_avg_factor() != 0) {
    set_exp_avg_factor(from.exp_avg_factor());
  }
  if (from.alpha_data() != 0) {
    set_alpha_data(from.alpha_data());
  }
  if (from.beta_data() != 0) {
    set_beta_data(from.beta_data());
  }
  if (from.alpha_param() != 0) {
    set_alpha_param(from.alpha_param());
  }
  if (from.beta_param() != 0) {
    set_beta_param(from.beta_param());
  }
}

void BatchNormalizationParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.BatchNormalizationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormalizationParam::CopyFrom(const BatchNormalizationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.BatchNormalizationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormalizationParam::IsInitialized() const {
  return true;
}

void BatchNormalizationParam::Swap(BatchNormalizationParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormalizationParam::InternalSwap(BatchNormalizationParam* other) {
  std::swap(scale_, other->scale_);
  std::swap(bias_, other->bias_);
  std::swap(mean_, other->mean_);
  std::swap(var_, other->var_);
  std::swap(mode_, other->mode_);
  std::swap(exp_avg_factor_, other->exp_avg_factor_);
  std::swap(alpha_data_, other->alpha_data_);
  std::swap(beta_data_, other->beta_data_);
  std::swap(alpha_param_, other->alpha_param_);
  std::swap(beta_param_, other->beta_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormalizationParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormalizationParam

// .deepflow.BatchNormalizationParam.Mode mode = 1;
void BatchNormalizationParam::clear_mode() {
  mode_ = 0;
}
::deepflow::BatchNormalizationParam_Mode BatchNormalizationParam::mode() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.mode)
  return static_cast< ::deepflow::BatchNormalizationParam_Mode >(mode_);
}
void BatchNormalizationParam::set_mode(::deepflow::BatchNormalizationParam_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.mode)
}

// float exp_avg_factor = 2;
void BatchNormalizationParam::clear_exp_avg_factor() {
  exp_avg_factor_ = 0;
}
float BatchNormalizationParam::exp_avg_factor() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.exp_avg_factor)
  return exp_avg_factor_;
}
void BatchNormalizationParam::set_exp_avg_factor(float value) {
  
  exp_avg_factor_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.exp_avg_factor)
}

// float alpha_data = 3;
void BatchNormalizationParam::clear_alpha_data() {
  alpha_data_ = 0;
}
float BatchNormalizationParam::alpha_data() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.alpha_data)
  return alpha_data_;
}
void BatchNormalizationParam::set_alpha_data(float value) {
  
  alpha_data_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.alpha_data)
}

// float beta_data = 4;
void BatchNormalizationParam::clear_beta_data() {
  beta_data_ = 0;
}
float BatchNormalizationParam::beta_data() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.beta_data)
  return beta_data_;
}
void BatchNormalizationParam::set_beta_data(float value) {
  
  beta_data_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.beta_data)
}

// float alpha_param = 5;
void BatchNormalizationParam::clear_alpha_param() {
  alpha_param_ = 0;
}
float BatchNormalizationParam::alpha_param() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.alpha_param)
  return alpha_param_;
}
void BatchNormalizationParam::set_alpha_param(float value) {
  
  alpha_param_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.alpha_param)
}

// float beta_param = 6;
void BatchNormalizationParam::clear_beta_param() {
  beta_param_ = 0;
}
float BatchNormalizationParam::beta_param() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.beta_param)
  return beta_param_;
}
void BatchNormalizationParam::set_beta_param(float value) {
  
  beta_param_ = value;
  // @@protoc_insertion_point(field_set:deepflow.BatchNormalizationParam.beta_param)
}

// .deepflow.TensorData scale = 7;
bool BatchNormalizationParam::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
void BatchNormalizationParam::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) delete scale_;
  scale_ = NULL;
}
const ::deepflow::TensorData& BatchNormalizationParam::scale() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.scale)
  return scale_ != NULL ? *scale_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* BatchNormalizationParam::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.BatchNormalizationParam.scale)
  return scale_;
}
::deepflow::TensorData* BatchNormalizationParam::release_scale() {
  // @@protoc_insertion_point(field_release:deepflow.BatchNormalizationParam.scale)
  
  ::deepflow::TensorData* temp = scale_;
  scale_ = NULL;
  return temp;
}
void BatchNormalizationParam::set_allocated_scale(::deepflow::TensorData* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.BatchNormalizationParam.scale)
}

// .deepflow.TensorData bias = 8;
bool BatchNormalizationParam::has_bias() const {
  return this != internal_default_instance() && bias_ != NULL;
}
void BatchNormalizationParam::clear_bias() {
  if (GetArenaNoVirtual() == NULL && bias_ != NULL) delete bias_;
  bias_ = NULL;
}
const ::deepflow::TensorData& BatchNormalizationParam::bias() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.bias)
  return bias_ != NULL ? *bias_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* BatchNormalizationParam::mutable_bias() {
  
  if (bias_ == NULL) {
    bias_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.BatchNormalizationParam.bias)
  return bias_;
}
::deepflow::TensorData* BatchNormalizationParam::release_bias() {
  // @@protoc_insertion_point(field_release:deepflow.BatchNormalizationParam.bias)
  
  ::deepflow::TensorData* temp = bias_;
  bias_ = NULL;
  return temp;
}
void BatchNormalizationParam::set_allocated_bias(::deepflow::TensorData* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.BatchNormalizationParam.bias)
}

// .deepflow.TensorData mean = 9;
bool BatchNormalizationParam::has_mean() const {
  return this != internal_default_instance() && mean_ != NULL;
}
void BatchNormalizationParam::clear_mean() {
  if (GetArenaNoVirtual() == NULL && mean_ != NULL) delete mean_;
  mean_ = NULL;
}
const ::deepflow::TensorData& BatchNormalizationParam::mean() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.mean)
  return mean_ != NULL ? *mean_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* BatchNormalizationParam::mutable_mean() {
  
  if (mean_ == NULL) {
    mean_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.BatchNormalizationParam.mean)
  return mean_;
}
::deepflow::TensorData* BatchNormalizationParam::release_mean() {
  // @@protoc_insertion_point(field_release:deepflow.BatchNormalizationParam.mean)
  
  ::deepflow::TensorData* temp = mean_;
  mean_ = NULL;
  return temp;
}
void BatchNormalizationParam::set_allocated_mean(::deepflow::TensorData* mean) {
  delete mean_;
  mean_ = mean;
  if (mean) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.BatchNormalizationParam.mean)
}

// .deepflow.TensorData var = 10;
bool BatchNormalizationParam::has_var() const {
  return this != internal_default_instance() && var_ != NULL;
}
void BatchNormalizationParam::clear_var() {
  if (GetArenaNoVirtual() == NULL && var_ != NULL) delete var_;
  var_ = NULL;
}
const ::deepflow::TensorData& BatchNormalizationParam::var() const {
  // @@protoc_insertion_point(field_get:deepflow.BatchNormalizationParam.var)
  return var_ != NULL ? *var_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* BatchNormalizationParam::mutable_var() {
  
  if (var_ == NULL) {
    var_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.BatchNormalizationParam.var)
  return var_;
}
::deepflow::TensorData* BatchNormalizationParam::release_var() {
  // @@protoc_insertion_point(field_release:deepflow.BatchNormalizationParam.var)
  
  ::deepflow::TensorData* temp = var_;
  var_ = NULL;
  return temp;
}
void BatchNormalizationParam::set_allocated_var(::deepflow::TensorData* var) {
  delete var_;
  var_ = var;
  if (var) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.BatchNormalizationParam.var)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayMemoryParam::kCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayMemoryParam::ReplayMemoryParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.ReplayMemoryParam)
}
ReplayMemoryParam::ReplayMemoryParam(const ReplayMemoryParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:deepflow.ReplayMemoryParam)
}

void ReplayMemoryParam::SharedCtor() {
  capacity_ = 0;
  _cached_size_ = 0;
}

ReplayMemoryParam::~ReplayMemoryParam() {
  // @@protoc_insertion_point(destructor:deepflow.ReplayMemoryParam)
  SharedDtor();
}

void ReplayMemoryParam::SharedDtor() {
}

void ReplayMemoryParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayMemoryParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplayMemoryParam& ReplayMemoryParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplayMemoryParam* ReplayMemoryParam::New(::google::protobuf::Arena* arena) const {
  ReplayMemoryParam* n = new ReplayMemoryParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplayMemoryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.ReplayMemoryParam)
  capacity_ = 0;
}

bool ReplayMemoryParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.ReplayMemoryParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 capacity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.ReplayMemoryParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.ReplayMemoryParam)
  return false;
#undef DO_
}

void ReplayMemoryParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.ReplayMemoryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->capacity(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.ReplayMemoryParam)
}

::google::protobuf::uint8* ReplayMemoryParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.ReplayMemoryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->capacity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.ReplayMemoryParam)
  return target;
}

size_t ReplayMemoryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.ReplayMemoryParam)
  size_t total_size = 0;

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayMemoryParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.ReplayMemoryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayMemoryParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayMemoryParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.ReplayMemoryParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.ReplayMemoryParam)
    MergeFrom(*source);
  }
}

void ReplayMemoryParam::MergeFrom(const ReplayMemoryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.ReplayMemoryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
}

void ReplayMemoryParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.ReplayMemoryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayMemoryParam::CopyFrom(const ReplayMemoryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.ReplayMemoryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayMemoryParam::IsInitialized() const {
  return true;
}

void ReplayMemoryParam::Swap(ReplayMemoryParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplayMemoryParam::InternalSwap(ReplayMemoryParam* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplayMemoryParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplayMemoryParam

// int32 capacity = 1;
void ReplayMemoryParam::clear_capacity() {
  capacity_ = 0;
}
::google::protobuf::int32 ReplayMemoryParam::capacity() const {
  // @@protoc_insertion_point(field_get:deepflow.ReplayMemoryParam.capacity)
  return capacity_;
}
void ReplayMemoryParam::set_capacity(::google::protobuf::int32 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:deepflow.ReplayMemoryParam.capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeParam::kNameFieldNumber;
const int NodeParam::kInputFieldNumber;
const int NodeParam::kOutputFieldNumber;
const int NodeParam::kPhaseFieldNumber;
const int NodeParam::kBlockParamFieldNumber;
const int NodeParam::kVariableParamFieldNumber;
const int NodeParam::kPlaceHolderParamFieldNumber;
const int NodeParam::kPhaseplexerParamFieldNumber;
const int NodeParam::kAddParamFieldNumber;
const int NodeParam::kBiasAddParamFieldNumber;
const int NodeParam::kConv2DParamFieldNumber;
const int NodeParam::kTransposedConv2DParamFieldNumber;
const int NodeParam::kDropoutParamFieldNumber;
const int NodeParam::kLeakyReluParamFieldNumber;
const int NodeParam::kSoftmaxParamFieldNumber;
const int NodeParam::kSquareParamFieldNumber;
const int NodeParam::kMatmulParamFieldNumber;
const int NodeParam::kPoolingParamFieldNumber;
const int NodeParam::kReduceParamFieldNumber;
const int NodeParam::kEqualParamFieldNumber;
const int NodeParam::kPrintParamFieldNumber;
const int NodeParam::kCastFloatParamFieldNumber;
const int NodeParam::kAccumulatorParamFieldNumber;
const int NodeParam::kDisplayParamFieldNumber;
const int NodeParam::kActivationParamFieldNumber;
const int NodeParam::kPsnrParamFieldNumber;
const int NodeParam::kRandomSelectorParamFieldNumber;
const int NodeParam::kLoggerParamFieldNumber;
const int NodeParam::kRestructureParamFieldNumber;
const int NodeParam::kImageReaderParamFieldNumber;
const int NodeParam::kMultiplexerParamFieldNumber;
const int NodeParam::kNegateParamFieldNumber;
const int NodeParam::kBatchNormalizationParamFieldNumber;
const int NodeParam::kMnistParamFieldNumber;
const int NodeParam::kDataGeneratorParamFieldNumber;
const int NodeParam::kImageBatchReaderParamFieldNumber;
const int NodeParam::kDotParamFieldNumber;
const int NodeParam::kReplayMemoryParamFieldNumber;
const int NodeParam::kEuclideanDistanceParamFieldNumber;
const int NodeParam::kSioOutputParamFieldNumber;
const int NodeParam::kLogParamFieldNumber;
const int NodeParam::kLossParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeParam::NodeParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.NodeParam)
}
NodeParam::NodeParam(const NodeParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_(from.input_),
      output_(from.output_),
      phase_(from.phase_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_block_param()) {
    block_param_ = new ::deepflow::BlockParam(*from.block_param_);
  } else {
    block_param_ = NULL;
  }
  if (from.has_variable_param()) {
    variable_param_ = new ::deepflow::VariableParam(*from.variable_param_);
  } else {
    variable_param_ = NULL;
  }
  if (from.has_place_holder_param()) {
    place_holder_param_ = new ::deepflow::PlaceHolderParam(*from.place_holder_param_);
  } else {
    place_holder_param_ = NULL;
  }
  if (from.has_phaseplexer_param()) {
    phaseplexer_param_ = new ::deepflow::PhaseplexerParam(*from.phaseplexer_param_);
  } else {
    phaseplexer_param_ = NULL;
  }
  if (from.has_add_param()) {
    add_param_ = new ::deepflow::AddParam(*from.add_param_);
  } else {
    add_param_ = NULL;
  }
  if (from.has_bias_add_param()) {
    bias_add_param_ = new ::deepflow::BiasAddParam(*from.bias_add_param_);
  } else {
    bias_add_param_ = NULL;
  }
  if (from.has_conv_2d_param()) {
    conv_2d_param_ = new ::deepflow::Conv2dParam(*from.conv_2d_param_);
  } else {
    conv_2d_param_ = NULL;
  }
  if (from.has_transposed_conv_2d_param()) {
    transposed_conv_2d_param_ = new ::deepflow::TransposedConv2dParam(*from.transposed_conv_2d_param_);
  } else {
    transposed_conv_2d_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::deepflow::DropoutParam(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_leaky_relu_param()) {
    leaky_relu_param_ = new ::deepflow::LeakyReluParam(*from.leaky_relu_param_);
  } else {
    leaky_relu_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::deepflow::SoftmaxParam(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_square_param()) {
    square_param_ = new ::deepflow::SquareParam(*from.square_param_);
  } else {
    square_param_ = NULL;
  }
  if (from.has_matmul_param()) {
    matmul_param_ = new ::deepflow::MatMulParam(*from.matmul_param_);
  } else {
    matmul_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::deepflow::PoolingParam(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_reduce_param()) {
    reduce_param_ = new ::deepflow::ReduceParam(*from.reduce_param_);
  } else {
    reduce_param_ = NULL;
  }
  if (from.has_equal_param()) {
    equal_param_ = new ::deepflow::EqualParam(*from.equal_param_);
  } else {
    equal_param_ = NULL;
  }
  if (from.has_print_param()) {
    print_param_ = new ::deepflow::PrintParam(*from.print_param_);
  } else {
    print_param_ = NULL;
  }
  if (from.has_cast_float_param()) {
    cast_float_param_ = new ::deepflow::CastFloatParam(*from.cast_float_param_);
  } else {
    cast_float_param_ = NULL;
  }
  if (from.has_accumulator_param()) {
    accumulator_param_ = new ::deepflow::AccumulatorParam(*from.accumulator_param_);
  } else {
    accumulator_param_ = NULL;
  }
  if (from.has_display_param()) {
    display_param_ = new ::deepflow::DisplayParam(*from.display_param_);
  } else {
    display_param_ = NULL;
  }
  if (from.has_activation_param()) {
    activation_param_ = new ::deepflow::ActivationParam(*from.activation_param_);
  } else {
    activation_param_ = NULL;
  }
  if (from.has_psnr_param()) {
    psnr_param_ = new ::deepflow::PsnrParam(*from.psnr_param_);
  } else {
    psnr_param_ = NULL;
  }
  if (from.has_random_selector_param()) {
    random_selector_param_ = new ::deepflow::RandomSelectorParam(*from.random_selector_param_);
  } else {
    random_selector_param_ = NULL;
  }
  if (from.has_logger_param()) {
    logger_param_ = new ::deepflow::LoggerParam(*from.logger_param_);
  } else {
    logger_param_ = NULL;
  }
  if (from.has_restructure_param()) {
    restructure_param_ = new ::deepflow::RestructureParam(*from.restructure_param_);
  } else {
    restructure_param_ = NULL;
  }
  if (from.has_image_reader_param()) {
    image_reader_param_ = new ::deepflow::ImageReaderParam(*from.image_reader_param_);
  } else {
    image_reader_param_ = NULL;
  }
  if (from.has_multiplexer_param()) {
    multiplexer_param_ = new ::deepflow::MultiplexerParam(*from.multiplexer_param_);
  } else {
    multiplexer_param_ = NULL;
  }
  if (from.has_negate_param()) {
    negate_param_ = new ::deepflow::NegateParam(*from.negate_param_);
  } else {
    negate_param_ = NULL;
  }
  if (from.has_batch_normalization_param()) {
    batch_normalization_param_ = new ::deepflow::BatchNormalizationParam(*from.batch_normalization_param_);
  } else {
    batch_normalization_param_ = NULL;
  }
  if (from.has_mnist_param()) {
    mnist_param_ = new ::deepflow::MnistParam(*from.mnist_param_);
  } else {
    mnist_param_ = NULL;
  }
  if (from.has_data_generator_param()) {
    data_generator_param_ = new ::deepflow::DataGeneratorParam(*from.data_generator_param_);
  } else {
    data_generator_param_ = NULL;
  }
  if (from.has_image_batch_reader_param()) {
    image_batch_reader_param_ = new ::deepflow::ImageBatchReaderParam(*from.image_batch_reader_param_);
  } else {
    image_batch_reader_param_ = NULL;
  }
  if (from.has_dot_param()) {
    dot_param_ = new ::deepflow::DotParam(*from.dot_param_);
  } else {
    dot_param_ = NULL;
  }
  if (from.has_replay_memory_param()) {
    replay_memory_param_ = new ::deepflow::ReplayMemoryParam(*from.replay_memory_param_);
  } else {
    replay_memory_param_ = NULL;
  }
  if (from.has_euclidean_distance_param()) {
    euclidean_distance_param_ = new ::deepflow::EuclideanDistanceParam(*from.euclidean_distance_param_);
  } else {
    euclidean_distance_param_ = NULL;
  }
  if (from.has_sio_output_param()) {
    sio_output_param_ = new ::deepflow::SIOOutputParam(*from.sio_output_param_);
  } else {
    sio_output_param_ = NULL;
  }
  if (from.has_log_param()) {
    log_param_ = new ::deepflow::LogParam(*from.log_param_);
  } else {
    log_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::deepflow::LossParam(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:deepflow.NodeParam)
}

void NodeParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_param_, 0, reinterpret_cast<char*>(&loss_param_) -
    reinterpret_cast<char*>(&block_param_) + sizeof(loss_param_));
  _cached_size_ = 0;
}

NodeParam::~NodeParam() {
  // @@protoc_insertion_point(destructor:deepflow.NodeParam)
  SharedDtor();
}

void NodeParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete block_param_;
  }
  if (this != internal_default_instance()) {
    delete variable_param_;
  }
  if (this != internal_default_instance()) {
    delete place_holder_param_;
  }
  if (this != internal_default_instance()) {
    delete phaseplexer_param_;
  }
  if (this != internal_default_instance()) {
    delete add_param_;
  }
  if (this != internal_default_instance()) {
    delete bias_add_param_;
  }
  if (this != internal_default_instance()) {
    delete conv_2d_param_;
  }
  if (this != internal_default_instance()) {
    delete transposed_conv_2d_param_;
  }
  if (this != internal_default_instance()) {
    delete dropout_param_;
  }
  if (this != internal_default_instance()) {
    delete leaky_relu_param_;
  }
  if (this != internal_default_instance()) {
    delete softmax_param_;
  }
  if (this != internal_default_instance()) {
    delete square_param_;
  }
  if (this != internal_default_instance()) {
    delete matmul_param_;
  }
  if (this != internal_default_instance()) {
    delete pooling_param_;
  }
  if (this != internal_default_instance()) {
    delete reduce_param_;
  }
  if (this != internal_default_instance()) {
    delete equal_param_;
  }
  if (this != internal_default_instance()) {
    delete print_param_;
  }
  if (this != internal_default_instance()) {
    delete cast_float_param_;
  }
  if (this != internal_default_instance()) {
    delete accumulator_param_;
  }
  if (this != internal_default_instance()) {
    delete display_param_;
  }
  if (this != internal_default_instance()) {
    delete activation_param_;
  }
  if (this != internal_default_instance()) {
    delete psnr_param_;
  }
  if (this != internal_default_instance()) {
    delete random_selector_param_;
  }
  if (this != internal_default_instance()) {
    delete logger_param_;
  }
  if (this != internal_default_instance()) {
    delete restructure_param_;
  }
  if (this != internal_default_instance()) {
    delete image_reader_param_;
  }
  if (this != internal_default_instance()) {
    delete multiplexer_param_;
  }
  if (this != internal_default_instance()) {
    delete negate_param_;
  }
  if (this != internal_default_instance()) {
    delete batch_normalization_param_;
  }
  if (this != internal_default_instance()) {
    delete mnist_param_;
  }
  if (this != internal_default_instance()) {
    delete data_generator_param_;
  }
  if (this != internal_default_instance()) {
    delete image_batch_reader_param_;
  }
  if (this != internal_default_instance()) {
    delete dot_param_;
  }
  if (this != internal_default_instance()) {
    delete replay_memory_param_;
  }
  if (this != internal_default_instance()) {
    delete euclidean_distance_param_;
  }
  if (this != internal_default_instance()) {
    delete sio_output_param_;
  }
  if (this != internal_default_instance()) {
    delete log_param_;
  }
  if (this != internal_default_instance()) {
    delete loss_param_;
  }
}

void NodeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeParam& NodeParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeParam* NodeParam::New(::google::protobuf::Arena* arena) const {
  NodeParam* n = new NodeParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.NodeParam)
  input_.Clear();
  output_.Clear();
  phase_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && block_param_ != NULL) {
    delete block_param_;
  }
  block_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) {
    delete variable_param_;
  }
  variable_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && place_holder_param_ != NULL) {
    delete place_holder_param_;
  }
  place_holder_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && phaseplexer_param_ != NULL) {
    delete phaseplexer_param_;
  }
  phaseplexer_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && add_param_ != NULL) {
    delete add_param_;
  }
  add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && bias_add_param_ != NULL) {
    delete bias_add_param_;
  }
  bias_add_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && conv_2d_param_ != NULL) {
    delete conv_2d_param_;
  }
  conv_2d_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && transposed_conv_2d_param_ != NULL) {
    delete transposed_conv_2d_param_;
  }
  transposed_conv_2d_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropout_param_ != NULL) {
    delete dropout_param_;
  }
  dropout_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && leaky_relu_param_ != NULL) {
    delete leaky_relu_param_;
  }
  leaky_relu_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) {
    delete softmax_param_;
  }
  softmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && square_param_ != NULL) {
    delete square_param_;
  }
  square_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && matmul_param_ != NULL) {
    delete matmul_param_;
  }
  matmul_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) {
    delete pooling_param_;
  }
  pooling_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && reduce_param_ != NULL) {
    delete reduce_param_;
  }
  reduce_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && equal_param_ != NULL) {
    delete equal_param_;
  }
  equal_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && print_param_ != NULL) {
    delete print_param_;
  }
  print_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && cast_float_param_ != NULL) {
    delete cast_float_param_;
  }
  cast_float_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && accumulator_param_ != NULL) {
    delete accumulator_param_;
  }
  accumulator_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && display_param_ != NULL) {
    delete display_param_;
  }
  display_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && activation_param_ != NULL) {
    delete activation_param_;
  }
  activation_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && psnr_param_ != NULL) {
    delete psnr_param_;
  }
  psnr_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_selector_param_ != NULL) {
    delete random_selector_param_;
  }
  random_selector_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && logger_param_ != NULL) {
    delete logger_param_;
  }
  logger_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && restructure_param_ != NULL) {
    delete restructure_param_;
  }
  restructure_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_reader_param_ != NULL) {
    delete image_reader_param_;
  }
  image_reader_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && multiplexer_param_ != NULL) {
    delete multiplexer_param_;
  }
  multiplexer_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && negate_param_ != NULL) {
    delete negate_param_;
  }
  negate_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && batch_normalization_param_ != NULL) {
    delete batch_normalization_param_;
  }
  batch_normalization_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && mnist_param_ != NULL) {
    delete mnist_param_;
  }
  mnist_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_generator_param_ != NULL) {
    delete data_generator_param_;
  }
  data_generator_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_batch_reader_param_ != NULL) {
    delete image_batch_reader_param_;
  }
  image_batch_reader_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && dot_param_ != NULL) {
    delete dot_param_;
  }
  dot_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && replay_memory_param_ != NULL) {
    delete replay_memory_param_;
  }
  replay_memory_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && euclidean_distance_param_ != NULL) {
    delete euclidean_distance_param_;
  }
  euclidean_distance_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && sio_output_param_ != NULL) {
    delete sio_output_param_;
  }
  sio_output_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_param_ != NULL) {
    delete log_param_;
  }
  log_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) {
    delete loss_param_;
  }
  loss_param_ = NULL;
}

bool NodeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.NodeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.NodeParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.NodeParam.input"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.NodeParam.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string phase = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase(this->phase_size() - 1).data(),
            this->phase(this->phase_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.NodeParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.BlockParam block_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.VariableParam variable_param = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PlaceHolderParam place_holder_param = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place_holder_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PhaseplexerParam phaseplexer_param = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phaseplexer_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.AddParam add_param = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.BiasAddParam bias_add_param = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.Conv2dParam conv_2d_param = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(842u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TransposedConv2dParam transposed_conv_2d_param = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(850u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transposed_conv_2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.DropoutParam dropout_param = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(858u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.LeakyReluParam leaky_relu_param = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(866u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaky_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.SoftmaxParam softmax_param = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(874u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.SquareParam square_param = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(882u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_square_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.MatMulParam matmul_param = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(890u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matmul_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PoolingParam pooling_param = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(898u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ReduceParam reduce_param = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(906u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduce_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.EqualParam equal_param = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(914u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PrintParam print_param = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(922u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.CastFloatParam cast_float_param = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(930u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_float_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.AccumulatorParam accumulator_param = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(938u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accumulator_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.DisplayParam display_param = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(946u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ActivationParam activation_param = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(954u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activation_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PsnrParam psnr_param = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(962u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psnr_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.RandomSelectorParam random_selector_param = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(970u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_selector_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.LoggerParam logger_param = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(978u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logger_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.RestructureParam restructure_param = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(986u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restructure_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ImageReaderParam image_reader_param = 124;
      case 124: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(994u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_reader_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.MultiplexerParam multiplexer_param = 125;
      case 125: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiplexer_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.NegateParam negate_param = 126;
      case 126: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1010u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_negate_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.BatchNormalizationParam batch_normalization_param = 127;
      case 127: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1018u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_normalization_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.MnistParam mnist_param = 128;
      case 128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1026u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mnist_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.DataGeneratorParam data_generator_param = 129;
      case 129: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1034u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_generator_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ImageBatchReaderParam image_batch_reader_param = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1042u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_batch_reader_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.DotParam dot_param = 131;
      case 131: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1050u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dot_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.ReplayMemoryParam replay_memory_param = 132;
      case 132: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1058u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay_memory_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.EuclideanDistanceParam euclidean_distance_param = 134;
      case 134: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1074u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_euclidean_distance_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.SIOOutputParam sio_output_param = 135;
      case 135: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1082u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sio_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.LogParam log_param = 136;
      case 136: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1090u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.LossParam loss_param = 137;
      case 137: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1098u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.NodeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.NodeParam)
  return false;
#undef DO_
}

void NodeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.NodeParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input = 2;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input(i), output);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->output(i), output);
  }

  // repeated string phase = 4;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phase(i), output);
  }

  // .deepflow.BlockParam block_param = 5;
  if (this->has_block_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->block_param_, output);
  }

  // .deepflow.VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->variable_param_, output);
  }

  // .deepflow.PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->place_holder_param_, output);
  }

  // .deepflow.PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->phaseplexer_param_, output);
  }

  // .deepflow.AddParam add_param = 103;
  if (this->has_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->add_param_, output);
  }

  // .deepflow.BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->bias_add_param_, output);
  }

  // .deepflow.Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->conv_2d_param_, output);
  }

  // .deepflow.TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->transposed_conv_2d_param_, output);
  }

  // .deepflow.DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->dropout_param_, output);
  }

  // .deepflow.LeakyReluParam leaky_relu_param = 108;
  if (this->has_leaky_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->leaky_relu_param_, output);
  }

  // .deepflow.SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->softmax_param_, output);
  }

  // .deepflow.SquareParam square_param = 110;
  if (this->has_square_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->square_param_, output);
  }

  // .deepflow.MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->matmul_param_, output);
  }

  // .deepflow.PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->pooling_param_, output);
  }

  // .deepflow.ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->reduce_param_, output);
  }

  // .deepflow.EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->equal_param_, output);
  }

  // .deepflow.PrintParam print_param = 115;
  if (this->has_print_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->print_param_, output);
  }

  // .deepflow.CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->cast_float_param_, output);
  }

  // .deepflow.AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->accumulator_param_, output);
  }

  // .deepflow.DisplayParam display_param = 118;
  if (this->has_display_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->display_param_, output);
  }

  // .deepflow.ActivationParam activation_param = 119;
  if (this->has_activation_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->activation_param_, output);
  }

  // .deepflow.PsnrParam psnr_param = 120;
  if (this->has_psnr_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, *this->psnr_param_, output);
  }

  // .deepflow.RandomSelectorParam random_selector_param = 121;
  if (this->has_random_selector_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->random_selector_param_, output);
  }

  // .deepflow.LoggerParam logger_param = 122;
  if (this->has_logger_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, *this->logger_param_, output);
  }

  // .deepflow.RestructureParam restructure_param = 123;
  if (this->has_restructure_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->restructure_param_, output);
  }

  // .deepflow.ImageReaderParam image_reader_param = 124;
  if (this->has_image_reader_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->image_reader_param_, output);
  }

  // .deepflow.MultiplexerParam multiplexer_param = 125;
  if (this->has_multiplexer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->multiplexer_param_, output);
  }

  // .deepflow.NegateParam negate_param = 126;
  if (this->has_negate_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, *this->negate_param_, output);
  }

  // .deepflow.BatchNormalizationParam batch_normalization_param = 127;
  if (this->has_batch_normalization_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, *this->batch_normalization_param_, output);
  }

  // .deepflow.MnistParam mnist_param = 128;
  if (this->has_mnist_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, *this->mnist_param_, output);
  }

  // .deepflow.DataGeneratorParam data_generator_param = 129;
  if (this->has_data_generator_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->data_generator_param_, output);
  }

  // .deepflow.ImageBatchReaderParam image_batch_reader_param = 130;
  if (this->has_image_batch_reader_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->image_batch_reader_param_, output);
  }

  // .deepflow.DotParam dot_param = 131;
  if (this->has_dot_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->dot_param_, output);
  }

  // .deepflow.ReplayMemoryParam replay_memory_param = 132;
  if (this->has_replay_memory_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->replay_memory_param_, output);
  }

  // .deepflow.EuclideanDistanceParam euclidean_distance_param = 134;
  if (this->has_euclidean_distance_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->euclidean_distance_param_, output);
  }

  // .deepflow.SIOOutputParam sio_output_param = 135;
  if (this->has_sio_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->sio_output_param_, output);
  }

  // .deepflow.LogParam log_param = 136;
  if (this->has_log_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->log_param_, output);
  }

  // .deepflow.LossParam loss_param = 137;
  if (this->has_loss_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->loss_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.NodeParam)
}

::google::protobuf::uint8* NodeParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.NodeParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string input = 2;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->input(i), target);
  }

  // repeated string output = 3;
  for (int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->output(i), target);
  }

  // repeated string phase = 4;
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase(i).data(), this->phase(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.NodeParam.phase");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->phase(i), target);
  }

  // .deepflow.BlockParam block_param = 5;
  if (this->has_block_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->block_param_, deterministic, target);
  }

  // .deepflow.VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->variable_param_, deterministic, target);
  }

  // .deepflow.PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->place_holder_param_, deterministic, target);
  }

  // .deepflow.PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->phaseplexer_param_, deterministic, target);
  }

  // .deepflow.AddParam add_param = 103;
  if (this->has_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->add_param_, deterministic, target);
  }

  // .deepflow.BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->bias_add_param_, deterministic, target);
  }

  // .deepflow.Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->conv_2d_param_, deterministic, target);
  }

  // .deepflow.TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->transposed_conv_2d_param_, deterministic, target);
  }

  // .deepflow.DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->dropout_param_, deterministic, target);
  }

  // .deepflow.LeakyReluParam leaky_relu_param = 108;
  if (this->has_leaky_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *this->leaky_relu_param_, deterministic, target);
  }

  // .deepflow.SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        109, *this->softmax_param_, deterministic, target);
  }

  // .deepflow.SquareParam square_param = 110;
  if (this->has_square_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        110, *this->square_param_, deterministic, target);
  }

  // .deepflow.MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        111, *this->matmul_param_, deterministic, target);
  }

  // .deepflow.PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->pooling_param_, deterministic, target);
  }

  // .deepflow.ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->reduce_param_, deterministic, target);
  }

  // .deepflow.EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        114, *this->equal_param_, deterministic, target);
  }

  // .deepflow.PrintParam print_param = 115;
  if (this->has_print_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        115, *this->print_param_, deterministic, target);
  }

  // .deepflow.CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        116, *this->cast_float_param_, deterministic, target);
  }

  // .deepflow.AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->accumulator_param_, deterministic, target);
  }

  // .deepflow.DisplayParam display_param = 118;
  if (this->has_display_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->display_param_, deterministic, target);
  }

  // .deepflow.ActivationParam activation_param = 119;
  if (this->has_activation_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        119, *this->activation_param_, deterministic, target);
  }

  // .deepflow.PsnrParam psnr_param = 120;
  if (this->has_psnr_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        120, *this->psnr_param_, deterministic, target);
  }

  // .deepflow.RandomSelectorParam random_selector_param = 121;
  if (this->has_random_selector_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, *this->random_selector_param_, deterministic, target);
  }

  // .deepflow.LoggerParam logger_param = 122;
  if (this->has_logger_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        122, *this->logger_param_, deterministic, target);
  }

  // .deepflow.RestructureParam restructure_param = 123;
  if (this->has_restructure_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        123, *this->restructure_param_, deterministic, target);
  }

  // .deepflow.ImageReaderParam image_reader_param = 124;
  if (this->has_image_reader_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        124, *this->image_reader_param_, deterministic, target);
  }

  // .deepflow.MultiplexerParam multiplexer_param = 125;
  if (this->has_multiplexer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        125, *this->multiplexer_param_, deterministic, target);
  }

  // .deepflow.NegateParam negate_param = 126;
  if (this->has_negate_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        126, *this->negate_param_, deterministic, target);
  }

  // .deepflow.BatchNormalizationParam batch_normalization_param = 127;
  if (this->has_batch_normalization_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        127, *this->batch_normalization_param_, deterministic, target);
  }

  // .deepflow.MnistParam mnist_param = 128;
  if (this->has_mnist_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        128, *this->mnist_param_, deterministic, target);
  }

  // .deepflow.DataGeneratorParam data_generator_param = 129;
  if (this->has_data_generator_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        129, *this->data_generator_param_, deterministic, target);
  }

  // .deepflow.ImageBatchReaderParam image_batch_reader_param = 130;
  if (this->has_image_batch_reader_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        130, *this->image_batch_reader_param_, deterministic, target);
  }

  // .deepflow.DotParam dot_param = 131;
  if (this->has_dot_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        131, *this->dot_param_, deterministic, target);
  }

  // .deepflow.ReplayMemoryParam replay_memory_param = 132;
  if (this->has_replay_memory_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        132, *this->replay_memory_param_, deterministic, target);
  }

  // .deepflow.EuclideanDistanceParam euclidean_distance_param = 134;
  if (this->has_euclidean_distance_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        134, *this->euclidean_distance_param_, deterministic, target);
  }

  // .deepflow.SIOOutputParam sio_output_param = 135;
  if (this->has_sio_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        135, *this->sio_output_param_, deterministic, target);
  }

  // .deepflow.LogParam log_param = 136;
  if (this->has_log_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        136, *this->log_param_, deterministic, target);
  }

  // .deepflow.LossParam loss_param = 137;
  if (this->has_loss_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        137, *this->loss_param_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.NodeParam)
  return target;
}

size_t NodeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.NodeParam)
  size_t total_size = 0;

  // repeated string input = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_size());
  for (int i = 0, n = this->output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated string phase = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phase_size());
  for (int i = 0, n = this->phase_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phase(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .deepflow.BlockParam block_param = 5;
  if (this->has_block_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_param_);
  }

  // .deepflow.VariableParam variable_param = 100;
  if (this->has_variable_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variable_param_);
  }

  // .deepflow.PlaceHolderParam place_holder_param = 101;
  if (this->has_place_holder_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->place_holder_param_);
  }

  // .deepflow.PhaseplexerParam phaseplexer_param = 102;
  if (this->has_phaseplexer_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->phaseplexer_param_);
  }

  // .deepflow.AddParam add_param = 103;
  if (this->has_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->add_param_);
  }

  // .deepflow.BiasAddParam bias_add_param = 104;
  if (this->has_bias_add_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_add_param_);
  }

  // .deepflow.Conv2dParam conv_2d_param = 105;
  if (this->has_conv_2d_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conv_2d_param_);
  }

  // .deepflow.TransposedConv2dParam transposed_conv_2d_param = 106;
  if (this->has_transposed_conv_2d_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transposed_conv_2d_param_);
  }

  // .deepflow.DropoutParam dropout_param = 107;
  if (this->has_dropout_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dropout_param_);
  }

  // .deepflow.LeakyReluParam leaky_relu_param = 108;
  if (this->has_leaky_relu_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leaky_relu_param_);
  }

  // .deepflow.SoftmaxParam softmax_param = 109;
  if (this->has_softmax_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_param_);
  }

  // .deepflow.SquareParam square_param = 110;
  if (this->has_square_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->square_param_);
  }

  // .deepflow.MatMulParam matmul_param = 111;
  if (this->has_matmul_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->matmul_param_);
  }

  // .deepflow.PoolingParam pooling_param = 112;
  if (this->has_pooling_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pooling_param_);
  }

  // .deepflow.ReduceParam reduce_param = 113;
  if (this->has_reduce_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reduce_param_);
  }

  // .deepflow.EqualParam equal_param = 114;
  if (this->has_equal_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equal_param_);
  }

  // .deepflow.PrintParam print_param = 115;
  if (this->has_print_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->print_param_);
  }

  // .deepflow.CastFloatParam cast_float_param = 116;
  if (this->has_cast_float_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cast_float_param_);
  }

  // .deepflow.AccumulatorParam accumulator_param = 117;
  if (this->has_accumulator_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accumulator_param_);
  }

  // .deepflow.DisplayParam display_param = 118;
  if (this->has_display_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->display_param_);
  }

  // .deepflow.ActivationParam activation_param = 119;
  if (this->has_activation_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->activation_param_);
  }

  // .deepflow.PsnrParam psnr_param = 120;
  if (this->has_psnr_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->psnr_param_);
  }

  // .deepflow.RandomSelectorParam random_selector_param = 121;
  if (this->has_random_selector_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_selector_param_);
  }

  // .deepflow.LoggerParam logger_param = 122;
  if (this->has_logger_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logger_param_);
  }

  // .deepflow.RestructureParam restructure_param = 123;
  if (this->has_restructure_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->restructure_param_);
  }

  // .deepflow.ImageReaderParam image_reader_param = 124;
  if (this->has_image_reader_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_reader_param_);
  }

  // .deepflow.MultiplexerParam multiplexer_param = 125;
  if (this->has_multiplexer_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->multiplexer_param_);
  }

  // .deepflow.NegateParam negate_param = 126;
  if (this->has_negate_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->negate_param_);
  }

  // .deepflow.BatchNormalizationParam batch_normalization_param = 127;
  if (this->has_batch_normalization_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->batch_normalization_param_);
  }

  // .deepflow.MnistParam mnist_param = 128;
  if (this->has_mnist_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mnist_param_);
  }

  // .deepflow.DataGeneratorParam data_generator_param = 129;
  if (this->has_data_generator_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_generator_param_);
  }

  // .deepflow.ImageBatchReaderParam image_batch_reader_param = 130;
  if (this->has_image_batch_reader_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_batch_reader_param_);
  }

  // .deepflow.DotParam dot_param = 131;
  if (this->has_dot_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dot_param_);
  }

  // .deepflow.ReplayMemoryParam replay_memory_param = 132;
  if (this->has_replay_memory_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->replay_memory_param_);
  }

  // .deepflow.EuclideanDistanceParam euclidean_distance_param = 134;
  if (this->has_euclidean_distance_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->euclidean_distance_param_);
  }

  // .deepflow.SIOOutputParam sio_output_param = 135;
  if (this->has_sio_output_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sio_output_param_);
  }

  // .deepflow.LogParam log_param = 136;
  if (this->has_log_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->log_param_);
  }

  // .deepflow.LossParam loss_param = 137;
  if (this->has_loss_param()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loss_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.NodeParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.NodeParam)
    MergeFrom(*source);
  }
}

void NodeParam::MergeFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.NodeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  phase_.MergeFrom(from.phase_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_block_param()) {
    mutable_block_param()->::deepflow::BlockParam::MergeFrom(from.block_param());
  }
  if (from.has_variable_param()) {
    mutable_variable_param()->::deepflow::VariableParam::MergeFrom(from.variable_param());
  }
  if (from.has_place_holder_param()) {
    mutable_place_holder_param()->::deepflow::PlaceHolderParam::MergeFrom(from.place_holder_param());
  }
  if (from.has_phaseplexer_param()) {
    mutable_phaseplexer_param()->::deepflow::PhaseplexerParam::MergeFrom(from.phaseplexer_param());
  }
  if (from.has_add_param()) {
    mutable_add_param()->::deepflow::AddParam::MergeFrom(from.add_param());
  }
  if (from.has_bias_add_param()) {
    mutable_bias_add_param()->::deepflow::BiasAddParam::MergeFrom(from.bias_add_param());
  }
  if (from.has_conv_2d_param()) {
    mutable_conv_2d_param()->::deepflow::Conv2dParam::MergeFrom(from.conv_2d_param());
  }
  if (from.has_transposed_conv_2d_param()) {
    mutable_transposed_conv_2d_param()->::deepflow::TransposedConv2dParam::MergeFrom(from.transposed_conv_2d_param());
  }
  if (from.has_dropout_param()) {
    mutable_dropout_param()->::deepflow::DropoutParam::MergeFrom(from.dropout_param());
  }
  if (from.has_leaky_relu_param()) {
    mutable_leaky_relu_param()->::deepflow::LeakyReluParam::MergeFrom(from.leaky_relu_param());
  }
  if (from.has_softmax_param()) {
    mutable_softmax_param()->::deepflow::SoftmaxParam::MergeFrom(from.softmax_param());
  }
  if (from.has_square_param()) {
    mutable_square_param()->::deepflow::SquareParam::MergeFrom(from.square_param());
  }
  if (from.has_matmul_param()) {
    mutable_matmul_param()->::deepflow::MatMulParam::MergeFrom(from.matmul_param());
  }
  if (from.has_pooling_param()) {
    mutable_pooling_param()->::deepflow::PoolingParam::MergeFrom(from.pooling_param());
  }
  if (from.has_reduce_param()) {
    mutable_reduce_param()->::deepflow::ReduceParam::MergeFrom(from.reduce_param());
  }
  if (from.has_equal_param()) {
    mutable_equal_param()->::deepflow::EqualParam::MergeFrom(from.equal_param());
  }
  if (from.has_print_param()) {
    mutable_print_param()->::deepflow::PrintParam::MergeFrom(from.print_param());
  }
  if (from.has_cast_float_param()) {
    mutable_cast_float_param()->::deepflow::CastFloatParam::MergeFrom(from.cast_float_param());
  }
  if (from.has_accumulator_param()) {
    mutable_accumulator_param()->::deepflow::AccumulatorParam::MergeFrom(from.accumulator_param());
  }
  if (from.has_display_param()) {
    mutable_display_param()->::deepflow::DisplayParam::MergeFrom(from.display_param());
  }
  if (from.has_activation_param()) {
    mutable_activation_param()->::deepflow::ActivationParam::MergeFrom(from.activation_param());
  }
  if (from.has_psnr_param()) {
    mutable_psnr_param()->::deepflow::PsnrParam::MergeFrom(from.psnr_param());
  }
  if (from.has_random_selector_param()) {
    mutable_random_selector_param()->::deepflow::RandomSelectorParam::MergeFrom(from.random_selector_param());
  }
  if (from.has_logger_param()) {
    mutable_logger_param()->::deepflow::LoggerParam::MergeFrom(from.logger_param());
  }
  if (from.has_restructure_param()) {
    mutable_restructure_param()->::deepflow::RestructureParam::MergeFrom(from.restructure_param());
  }
  if (from.has_image_reader_param()) {
    mutable_image_reader_param()->::deepflow::ImageReaderParam::MergeFrom(from.image_reader_param());
  }
  if (from.has_multiplexer_param()) {
    mutable_multiplexer_param()->::deepflow::MultiplexerParam::MergeFrom(from.multiplexer_param());
  }
  if (from.has_negate_param()) {
    mutable_negate_param()->::deepflow::NegateParam::MergeFrom(from.negate_param());
  }
  if (from.has_batch_normalization_param()) {
    mutable_batch_normalization_param()->::deepflow::BatchNormalizationParam::MergeFrom(from.batch_normalization_param());
  }
  if (from.has_mnist_param()) {
    mutable_mnist_param()->::deepflow::MnistParam::MergeFrom(from.mnist_param());
  }
  if (from.has_data_generator_param()) {
    mutable_data_generator_param()->::deepflow::DataGeneratorParam::MergeFrom(from.data_generator_param());
  }
  if (from.has_image_batch_reader_param()) {
    mutable_image_batch_reader_param()->::deepflow::ImageBatchReaderParam::MergeFrom(from.image_batch_reader_param());
  }
  if (from.has_dot_param()) {
    mutable_dot_param()->::deepflow::DotParam::MergeFrom(from.dot_param());
  }
  if (from.has_replay_memory_param()) {
    mutable_replay_memory_param()->::deepflow::ReplayMemoryParam::MergeFrom(from.replay_memory_param());
  }
  if (from.has_euclidean_distance_param()) {
    mutable_euclidean_distance_param()->::deepflow::EuclideanDistanceParam::MergeFrom(from.euclidean_distance_param());
  }
  if (from.has_sio_output_param()) {
    mutable_sio_output_param()->::deepflow::SIOOutputParam::MergeFrom(from.sio_output_param());
  }
  if (from.has_log_param()) {
    mutable_log_param()->::deepflow::LogParam::MergeFrom(from.log_param());
  }
  if (from.has_loss_param()) {
    mutable_loss_param()->::deepflow::LossParam::MergeFrom(from.loss_param());
  }
}

void NodeParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeParam::CopyFrom(const NodeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.NodeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeParam::IsInitialized() const {
  return true;
}

void NodeParam::Swap(NodeParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeParam::InternalSwap(NodeParam* other) {
  input_.InternalSwap(&other->input_);
  output_.InternalSwap(&other->output_);
  phase_.InternalSwap(&other->phase_);
  name_.Swap(&other->name_);
  std::swap(block_param_, other->block_param_);
  std::swap(variable_param_, other->variable_param_);
  std::swap(place_holder_param_, other->place_holder_param_);
  std::swap(phaseplexer_param_, other->phaseplexer_param_);
  std::swap(add_param_, other->add_param_);
  std::swap(bias_add_param_, other->bias_add_param_);
  std::swap(conv_2d_param_, other->conv_2d_param_);
  std::swap(transposed_conv_2d_param_, other->transposed_conv_2d_param_);
  std::swap(dropout_param_, other->dropout_param_);
  std::swap(leaky_relu_param_, other->leaky_relu_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(square_param_, other->square_param_);
  std::swap(matmul_param_, other->matmul_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(reduce_param_, other->reduce_param_);
  std::swap(equal_param_, other->equal_param_);
  std::swap(print_param_, other->print_param_);
  std::swap(cast_float_param_, other->cast_float_param_);
  std::swap(accumulator_param_, other->accumulator_param_);
  std::swap(display_param_, other->display_param_);
  std::swap(activation_param_, other->activation_param_);
  std::swap(psnr_param_, other->psnr_param_);
  std::swap(random_selector_param_, other->random_selector_param_);
  std::swap(logger_param_, other->logger_param_);
  std::swap(restructure_param_, other->restructure_param_);
  std::swap(image_reader_param_, other->image_reader_param_);
  std::swap(multiplexer_param_, other->multiplexer_param_);
  std::swap(negate_param_, other->negate_param_);
  std::swap(batch_normalization_param_, other->batch_normalization_param_);
  std::swap(mnist_param_, other->mnist_param_);
  std::swap(data_generator_param_, other->data_generator_param_);
  std::swap(image_batch_reader_param_, other->image_batch_reader_param_);
  std::swap(dot_param_, other->dot_param_);
  std::swap(replay_memory_param_, other->replay_memory_param_);
  std::swap(euclidean_distance_param_, other->euclidean_distance_param_);
  std::swap(sio_output_param_, other->sio_output_param_);
  std::swap(log_param_, other->log_param_);
  std::swap(loss_param_, other->loss_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeParam

// string name = 1;
void NodeParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeParam::name() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.name)
  return name_.GetNoArena();
}
void NodeParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.name)
}
#if LANG_CXX11
void NodeParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.NodeParam.name)
}
#endif
void NodeParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.NodeParam.name)
}
void NodeParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.NodeParam.name)
}
::std::string* NodeParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeParam::release_name() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.name)
}

// repeated string input = 2;
int NodeParam::input_size() const {
  return input_.size();
}
void NodeParam::clear_input() {
  input_.Clear();
}
const ::std::string& NodeParam::input(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.input)
  return input_.Get(index);
}
::std::string* NodeParam::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.input)
  return input_.Mutable(index);
}
void NodeParam::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deepflow.NodeParam.input)
}
void NodeParam::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deepflow.NodeParam.input)
}
::std::string* NodeParam::add_input() {
  // @@protoc_insertion_point(field_add_mutable:deepflow.NodeParam.input)
  return input_.Add();
}
void NodeParam::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.input)
}
#if LANG_CXX11
void NodeParam::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.input)
}
#endif
void NodeParam::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deepflow.NodeParam.input)
}
void NodeParam::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deepflow.NodeParam.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::input() const {
  // @@protoc_insertion_point(field_list:deepflow.NodeParam.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.NodeParam.input)
  return &input_;
}

// repeated string output = 3;
int NodeParam::output_size() const {
  return output_.size();
}
void NodeParam::clear_output() {
  output_.Clear();
}
const ::std::string& NodeParam::output(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.output)
  return output_.Get(index);
}
::std::string* NodeParam::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.output)
  return output_.Mutable(index);
}
void NodeParam::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deepflow.NodeParam.output)
}
void NodeParam::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deepflow.NodeParam.output)
}
::std::string* NodeParam::add_output() {
  // @@protoc_insertion_point(field_add_mutable:deepflow.NodeParam.output)
  return output_.Add();
}
void NodeParam::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.output)
}
#if LANG_CXX11
void NodeParam::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.output)
}
#endif
void NodeParam::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deepflow.NodeParam.output)
}
void NodeParam::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deepflow.NodeParam.output)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::output() const {
  // @@protoc_insertion_point(field_list:deepflow.NodeParam.output)
  return output_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.NodeParam.output)
  return &output_;
}

// repeated string phase = 4;
int NodeParam::phase_size() const {
  return phase_.size();
}
void NodeParam::clear_phase() {
  phase_.Clear();
}
const ::std::string& NodeParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.phase)
  return phase_.Get(index);
}
::std::string* NodeParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.phase)
  return phase_.Mutable(index);
}
void NodeParam::set_phase(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.phase)
  phase_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeParam::set_phase(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:deepflow.NodeParam.phase)
  phase_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeParam::set_phase(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phase_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:deepflow.NodeParam.phase)
}
void NodeParam::set_phase(int index, const char* value, size_t size) {
  phase_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:deepflow.NodeParam.phase)
}
::std::string* NodeParam::add_phase() {
  // @@protoc_insertion_point(field_add_mutable:deepflow.NodeParam.phase)
  return phase_.Add();
}
void NodeParam::add_phase(const ::std::string& value) {
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.phase)
}
#if LANG_CXX11
void NodeParam::add_phase(::std::string&& value) {
  phase_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:deepflow.NodeParam.phase)
}
#endif
void NodeParam::add_phase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phase_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:deepflow.NodeParam.phase)
}
void NodeParam::add_phase(const char* value, size_t size) {
  phase_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:deepflow.NodeParam.phase)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeParam::phase() const {
  // @@protoc_insertion_point(field_list:deepflow.NodeParam.phase)
  return phase_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.NodeParam.phase)
  return &phase_;
}

// .deepflow.BlockParam block_param = 5;
bool NodeParam::has_block_param() const {
  return this != internal_default_instance() && block_param_ != NULL;
}
void NodeParam::clear_block_param() {
  if (GetArenaNoVirtual() == NULL && block_param_ != NULL) delete block_param_;
  block_param_ = NULL;
}
const ::deepflow::BlockParam& NodeParam::block_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.block_param)
  return block_param_ != NULL ? *block_param_
                         : *::deepflow::BlockParam::internal_default_instance();
}
::deepflow::BlockParam* NodeParam::mutable_block_param() {
  
  if (block_param_ == NULL) {
    block_param_ = new ::deepflow::BlockParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.block_param)
  return block_param_;
}
::deepflow::BlockParam* NodeParam::release_block_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.block_param)
  
  ::deepflow::BlockParam* temp = block_param_;
  block_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_block_param(::deepflow::BlockParam* block_param) {
  delete block_param_;
  block_param_ = block_param;
  if (block_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.block_param)
}

// .deepflow.VariableParam variable_param = 100;
bool NodeParam::has_variable_param() const {
  return this != internal_default_instance() && variable_param_ != NULL;
}
void NodeParam::clear_variable_param() {
  if (GetArenaNoVirtual() == NULL && variable_param_ != NULL) delete variable_param_;
  variable_param_ = NULL;
}
const ::deepflow::VariableParam& NodeParam::variable_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.variable_param)
  return variable_param_ != NULL ? *variable_param_
                         : *::deepflow::VariableParam::internal_default_instance();
}
::deepflow::VariableParam* NodeParam::mutable_variable_param() {
  
  if (variable_param_ == NULL) {
    variable_param_ = new ::deepflow::VariableParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.variable_param)
  return variable_param_;
}
::deepflow::VariableParam* NodeParam::release_variable_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.variable_param)
  
  ::deepflow::VariableParam* temp = variable_param_;
  variable_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_variable_param(::deepflow::VariableParam* variable_param) {
  delete variable_param_;
  variable_param_ = variable_param;
  if (variable_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.variable_param)
}

// .deepflow.PlaceHolderParam place_holder_param = 101;
bool NodeParam::has_place_holder_param() const {
  return this != internal_default_instance() && place_holder_param_ != NULL;
}
void NodeParam::clear_place_holder_param() {
  if (GetArenaNoVirtual() == NULL && place_holder_param_ != NULL) delete place_holder_param_;
  place_holder_param_ = NULL;
}
const ::deepflow::PlaceHolderParam& NodeParam::place_holder_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.place_holder_param)
  return place_holder_param_ != NULL ? *place_holder_param_
                         : *::deepflow::PlaceHolderParam::internal_default_instance();
}
::deepflow::PlaceHolderParam* NodeParam::mutable_place_holder_param() {
  
  if (place_holder_param_ == NULL) {
    place_holder_param_ = new ::deepflow::PlaceHolderParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.place_holder_param)
  return place_holder_param_;
}
::deepflow::PlaceHolderParam* NodeParam::release_place_holder_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.place_holder_param)
  
  ::deepflow::PlaceHolderParam* temp = place_holder_param_;
  place_holder_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_place_holder_param(::deepflow::PlaceHolderParam* place_holder_param) {
  delete place_holder_param_;
  place_holder_param_ = place_holder_param;
  if (place_holder_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.place_holder_param)
}

// .deepflow.PhaseplexerParam phaseplexer_param = 102;
bool NodeParam::has_phaseplexer_param() const {
  return this != internal_default_instance() && phaseplexer_param_ != NULL;
}
void NodeParam::clear_phaseplexer_param() {
  if (GetArenaNoVirtual() == NULL && phaseplexer_param_ != NULL) delete phaseplexer_param_;
  phaseplexer_param_ = NULL;
}
const ::deepflow::PhaseplexerParam& NodeParam::phaseplexer_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.phaseplexer_param)
  return phaseplexer_param_ != NULL ? *phaseplexer_param_
                         : *::deepflow::PhaseplexerParam::internal_default_instance();
}
::deepflow::PhaseplexerParam* NodeParam::mutable_phaseplexer_param() {
  
  if (phaseplexer_param_ == NULL) {
    phaseplexer_param_ = new ::deepflow::PhaseplexerParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.phaseplexer_param)
  return phaseplexer_param_;
}
::deepflow::PhaseplexerParam* NodeParam::release_phaseplexer_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.phaseplexer_param)
  
  ::deepflow::PhaseplexerParam* temp = phaseplexer_param_;
  phaseplexer_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_phaseplexer_param(::deepflow::PhaseplexerParam* phaseplexer_param) {
  delete phaseplexer_param_;
  phaseplexer_param_ = phaseplexer_param;
  if (phaseplexer_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.phaseplexer_param)
}

// .deepflow.AddParam add_param = 103;
bool NodeParam::has_add_param() const {
  return this != internal_default_instance() && add_param_ != NULL;
}
void NodeParam::clear_add_param() {
  if (GetArenaNoVirtual() == NULL && add_param_ != NULL) delete add_param_;
  add_param_ = NULL;
}
const ::deepflow::AddParam& NodeParam::add_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.add_param)
  return add_param_ != NULL ? *add_param_
                         : *::deepflow::AddParam::internal_default_instance();
}
::deepflow::AddParam* NodeParam::mutable_add_param() {
  
  if (add_param_ == NULL) {
    add_param_ = new ::deepflow::AddParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.add_param)
  return add_param_;
}
::deepflow::AddParam* NodeParam::release_add_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.add_param)
  
  ::deepflow::AddParam* temp = add_param_;
  add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_add_param(::deepflow::AddParam* add_param) {
  delete add_param_;
  add_param_ = add_param;
  if (add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.add_param)
}

// .deepflow.BiasAddParam bias_add_param = 104;
bool NodeParam::has_bias_add_param() const {
  return this != internal_default_instance() && bias_add_param_ != NULL;
}
void NodeParam::clear_bias_add_param() {
  if (GetArenaNoVirtual() == NULL && bias_add_param_ != NULL) delete bias_add_param_;
  bias_add_param_ = NULL;
}
const ::deepflow::BiasAddParam& NodeParam::bias_add_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.bias_add_param)
  return bias_add_param_ != NULL ? *bias_add_param_
                         : *::deepflow::BiasAddParam::internal_default_instance();
}
::deepflow::BiasAddParam* NodeParam::mutable_bias_add_param() {
  
  if (bias_add_param_ == NULL) {
    bias_add_param_ = new ::deepflow::BiasAddParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.bias_add_param)
  return bias_add_param_;
}
::deepflow::BiasAddParam* NodeParam::release_bias_add_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.bias_add_param)
  
  ::deepflow::BiasAddParam* temp = bias_add_param_;
  bias_add_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_bias_add_param(::deepflow::BiasAddParam* bias_add_param) {
  delete bias_add_param_;
  bias_add_param_ = bias_add_param;
  if (bias_add_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.bias_add_param)
}

// .deepflow.Conv2dParam conv_2d_param = 105;
bool NodeParam::has_conv_2d_param() const {
  return this != internal_default_instance() && conv_2d_param_ != NULL;
}
void NodeParam::clear_conv_2d_param() {
  if (GetArenaNoVirtual() == NULL && conv_2d_param_ != NULL) delete conv_2d_param_;
  conv_2d_param_ = NULL;
}
const ::deepflow::Conv2dParam& NodeParam::conv_2d_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.conv_2d_param)
  return conv_2d_param_ != NULL ? *conv_2d_param_
                         : *::deepflow::Conv2dParam::internal_default_instance();
}
::deepflow::Conv2dParam* NodeParam::mutable_conv_2d_param() {
  
  if (conv_2d_param_ == NULL) {
    conv_2d_param_ = new ::deepflow::Conv2dParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.conv_2d_param)
  return conv_2d_param_;
}
::deepflow::Conv2dParam* NodeParam::release_conv_2d_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.conv_2d_param)
  
  ::deepflow::Conv2dParam* temp = conv_2d_param_;
  conv_2d_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_conv_2d_param(::deepflow::Conv2dParam* conv_2d_param) {
  delete conv_2d_param_;
  conv_2d_param_ = conv_2d_param;
  if (conv_2d_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.conv_2d_param)
}

// .deepflow.TransposedConv2dParam transposed_conv_2d_param = 106;
bool NodeParam::has_transposed_conv_2d_param() const {
  return this != internal_default_instance() && transposed_conv_2d_param_ != NULL;
}
void NodeParam::clear_transposed_conv_2d_param() {
  if (GetArenaNoVirtual() == NULL && transposed_conv_2d_param_ != NULL) delete transposed_conv_2d_param_;
  transposed_conv_2d_param_ = NULL;
}
const ::deepflow::TransposedConv2dParam& NodeParam::transposed_conv_2d_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.transposed_conv_2d_param)
  return transposed_conv_2d_param_ != NULL ? *transposed_conv_2d_param_
                         : *::deepflow::TransposedConv2dParam::internal_default_instance();
}
::deepflow::TransposedConv2dParam* NodeParam::mutable_transposed_conv_2d_param() {
  
  if (transposed_conv_2d_param_ == NULL) {
    transposed_conv_2d_param_ = new ::deepflow::TransposedConv2dParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.transposed_conv_2d_param)
  return transposed_conv_2d_param_;
}
::deepflow::TransposedConv2dParam* NodeParam::release_transposed_conv_2d_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.transposed_conv_2d_param)
  
  ::deepflow::TransposedConv2dParam* temp = transposed_conv_2d_param_;
  transposed_conv_2d_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_transposed_conv_2d_param(::deepflow::TransposedConv2dParam* transposed_conv_2d_param) {
  delete transposed_conv_2d_param_;
  transposed_conv_2d_param_ = transposed_conv_2d_param;
  if (transposed_conv_2d_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.transposed_conv_2d_param)
}

// .deepflow.DropoutParam dropout_param = 107;
bool NodeParam::has_dropout_param() const {
  return this != internal_default_instance() && dropout_param_ != NULL;
}
void NodeParam::clear_dropout_param() {
  if (GetArenaNoVirtual() == NULL && dropout_param_ != NULL) delete dropout_param_;
  dropout_param_ = NULL;
}
const ::deepflow::DropoutParam& NodeParam::dropout_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_
                         : *::deepflow::DropoutParam::internal_default_instance();
}
::deepflow::DropoutParam* NodeParam::mutable_dropout_param() {
  
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::deepflow::DropoutParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.dropout_param)
  return dropout_param_;
}
::deepflow::DropoutParam* NodeParam::release_dropout_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.dropout_param)
  
  ::deepflow::DropoutParam* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_dropout_param(::deepflow::DropoutParam* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.dropout_param)
}

// .deepflow.LeakyReluParam leaky_relu_param = 108;
bool NodeParam::has_leaky_relu_param() const {
  return this != internal_default_instance() && leaky_relu_param_ != NULL;
}
void NodeParam::clear_leaky_relu_param() {
  if (GetArenaNoVirtual() == NULL && leaky_relu_param_ != NULL) delete leaky_relu_param_;
  leaky_relu_param_ = NULL;
}
const ::deepflow::LeakyReluParam& NodeParam::leaky_relu_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.leaky_relu_param)
  return leaky_relu_param_ != NULL ? *leaky_relu_param_
                         : *::deepflow::LeakyReluParam::internal_default_instance();
}
::deepflow::LeakyReluParam* NodeParam::mutable_leaky_relu_param() {
  
  if (leaky_relu_param_ == NULL) {
    leaky_relu_param_ = new ::deepflow::LeakyReluParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.leaky_relu_param)
  return leaky_relu_param_;
}
::deepflow::LeakyReluParam* NodeParam::release_leaky_relu_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.leaky_relu_param)
  
  ::deepflow::LeakyReluParam* temp = leaky_relu_param_;
  leaky_relu_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_leaky_relu_param(::deepflow::LeakyReluParam* leaky_relu_param) {
  delete leaky_relu_param_;
  leaky_relu_param_ = leaky_relu_param;
  if (leaky_relu_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.leaky_relu_param)
}

// .deepflow.SoftmaxParam softmax_param = 109;
bool NodeParam::has_softmax_param() const {
  return this != internal_default_instance() && softmax_param_ != NULL;
}
void NodeParam::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
const ::deepflow::SoftmaxParam& NodeParam::softmax_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_
                         : *::deepflow::SoftmaxParam::internal_default_instance();
}
::deepflow::SoftmaxParam* NodeParam::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::deepflow::SoftmaxParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.softmax_param)
  return softmax_param_;
}
::deepflow::SoftmaxParam* NodeParam::release_softmax_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.softmax_param)
  
  ::deepflow::SoftmaxParam* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_softmax_param(::deepflow::SoftmaxParam* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.softmax_param)
}

// .deepflow.SquareParam square_param = 110;
bool NodeParam::has_square_param() const {
  return this != internal_default_instance() && square_param_ != NULL;
}
void NodeParam::clear_square_param() {
  if (GetArenaNoVirtual() == NULL && square_param_ != NULL) delete square_param_;
  square_param_ = NULL;
}
const ::deepflow::SquareParam& NodeParam::square_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.square_param)
  return square_param_ != NULL ? *square_param_
                         : *::deepflow::SquareParam::internal_default_instance();
}
::deepflow::SquareParam* NodeParam::mutable_square_param() {
  
  if (square_param_ == NULL) {
    square_param_ = new ::deepflow::SquareParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.square_param)
  return square_param_;
}
::deepflow::SquareParam* NodeParam::release_square_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.square_param)
  
  ::deepflow::SquareParam* temp = square_param_;
  square_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_square_param(::deepflow::SquareParam* square_param) {
  delete square_param_;
  square_param_ = square_param;
  if (square_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.square_param)
}

// .deepflow.MatMulParam matmul_param = 111;
bool NodeParam::has_matmul_param() const {
  return this != internal_default_instance() && matmul_param_ != NULL;
}
void NodeParam::clear_matmul_param() {
  if (GetArenaNoVirtual() == NULL && matmul_param_ != NULL) delete matmul_param_;
  matmul_param_ = NULL;
}
const ::deepflow::MatMulParam& NodeParam::matmul_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.matmul_param)
  return matmul_param_ != NULL ? *matmul_param_
                         : *::deepflow::MatMulParam::internal_default_instance();
}
::deepflow::MatMulParam* NodeParam::mutable_matmul_param() {
  
  if (matmul_param_ == NULL) {
    matmul_param_ = new ::deepflow::MatMulParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.matmul_param)
  return matmul_param_;
}
::deepflow::MatMulParam* NodeParam::release_matmul_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.matmul_param)
  
  ::deepflow::MatMulParam* temp = matmul_param_;
  matmul_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_matmul_param(::deepflow::MatMulParam* matmul_param) {
  delete matmul_param_;
  matmul_param_ = matmul_param;
  if (matmul_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.matmul_param)
}

// .deepflow.PoolingParam pooling_param = 112;
bool NodeParam::has_pooling_param() const {
  return this != internal_default_instance() && pooling_param_ != NULL;
}
void NodeParam::clear_pooling_param() {
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) delete pooling_param_;
  pooling_param_ = NULL;
}
const ::deepflow::PoolingParam& NodeParam::pooling_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_
                         : *::deepflow::PoolingParam::internal_default_instance();
}
::deepflow::PoolingParam* NodeParam::mutable_pooling_param() {
  
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::deepflow::PoolingParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.pooling_param)
  return pooling_param_;
}
::deepflow::PoolingParam* NodeParam::release_pooling_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.pooling_param)
  
  ::deepflow::PoolingParam* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_pooling_param(::deepflow::PoolingParam* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.pooling_param)
}

// .deepflow.ReduceParam reduce_param = 113;
bool NodeParam::has_reduce_param() const {
  return this != internal_default_instance() && reduce_param_ != NULL;
}
void NodeParam::clear_reduce_param() {
  if (GetArenaNoVirtual() == NULL && reduce_param_ != NULL) delete reduce_param_;
  reduce_param_ = NULL;
}
const ::deepflow::ReduceParam& NodeParam::reduce_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.reduce_param)
  return reduce_param_ != NULL ? *reduce_param_
                         : *::deepflow::ReduceParam::internal_default_instance();
}
::deepflow::ReduceParam* NodeParam::mutable_reduce_param() {
  
  if (reduce_param_ == NULL) {
    reduce_param_ = new ::deepflow::ReduceParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.reduce_param)
  return reduce_param_;
}
::deepflow::ReduceParam* NodeParam::release_reduce_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.reduce_param)
  
  ::deepflow::ReduceParam* temp = reduce_param_;
  reduce_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_reduce_param(::deepflow::ReduceParam* reduce_param) {
  delete reduce_param_;
  reduce_param_ = reduce_param;
  if (reduce_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.reduce_param)
}

// .deepflow.EqualParam equal_param = 114;
bool NodeParam::has_equal_param() const {
  return this != internal_default_instance() && equal_param_ != NULL;
}
void NodeParam::clear_equal_param() {
  if (GetArenaNoVirtual() == NULL && equal_param_ != NULL) delete equal_param_;
  equal_param_ = NULL;
}
const ::deepflow::EqualParam& NodeParam::equal_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.equal_param)
  return equal_param_ != NULL ? *equal_param_
                         : *::deepflow::EqualParam::internal_default_instance();
}
::deepflow::EqualParam* NodeParam::mutable_equal_param() {
  
  if (equal_param_ == NULL) {
    equal_param_ = new ::deepflow::EqualParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.equal_param)
  return equal_param_;
}
::deepflow::EqualParam* NodeParam::release_equal_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.equal_param)
  
  ::deepflow::EqualParam* temp = equal_param_;
  equal_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_equal_param(::deepflow::EqualParam* equal_param) {
  delete equal_param_;
  equal_param_ = equal_param;
  if (equal_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.equal_param)
}

// .deepflow.PrintParam print_param = 115;
bool NodeParam::has_print_param() const {
  return this != internal_default_instance() && print_param_ != NULL;
}
void NodeParam::clear_print_param() {
  if (GetArenaNoVirtual() == NULL && print_param_ != NULL) delete print_param_;
  print_param_ = NULL;
}
const ::deepflow::PrintParam& NodeParam::print_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.print_param)
  return print_param_ != NULL ? *print_param_
                         : *::deepflow::PrintParam::internal_default_instance();
}
::deepflow::PrintParam* NodeParam::mutable_print_param() {
  
  if (print_param_ == NULL) {
    print_param_ = new ::deepflow::PrintParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.print_param)
  return print_param_;
}
::deepflow::PrintParam* NodeParam::release_print_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.print_param)
  
  ::deepflow::PrintParam* temp = print_param_;
  print_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_print_param(::deepflow::PrintParam* print_param) {
  delete print_param_;
  print_param_ = print_param;
  if (print_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.print_param)
}

// .deepflow.CastFloatParam cast_float_param = 116;
bool NodeParam::has_cast_float_param() const {
  return this != internal_default_instance() && cast_float_param_ != NULL;
}
void NodeParam::clear_cast_float_param() {
  if (GetArenaNoVirtual() == NULL && cast_float_param_ != NULL) delete cast_float_param_;
  cast_float_param_ = NULL;
}
const ::deepflow::CastFloatParam& NodeParam::cast_float_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.cast_float_param)
  return cast_float_param_ != NULL ? *cast_float_param_
                         : *::deepflow::CastFloatParam::internal_default_instance();
}
::deepflow::CastFloatParam* NodeParam::mutable_cast_float_param() {
  
  if (cast_float_param_ == NULL) {
    cast_float_param_ = new ::deepflow::CastFloatParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.cast_float_param)
  return cast_float_param_;
}
::deepflow::CastFloatParam* NodeParam::release_cast_float_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.cast_float_param)
  
  ::deepflow::CastFloatParam* temp = cast_float_param_;
  cast_float_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_cast_float_param(::deepflow::CastFloatParam* cast_float_param) {
  delete cast_float_param_;
  cast_float_param_ = cast_float_param;
  if (cast_float_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.cast_float_param)
}

// .deepflow.AccumulatorParam accumulator_param = 117;
bool NodeParam::has_accumulator_param() const {
  return this != internal_default_instance() && accumulator_param_ != NULL;
}
void NodeParam::clear_accumulator_param() {
  if (GetArenaNoVirtual() == NULL && accumulator_param_ != NULL) delete accumulator_param_;
  accumulator_param_ = NULL;
}
const ::deepflow::AccumulatorParam& NodeParam::accumulator_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.accumulator_param)
  return accumulator_param_ != NULL ? *accumulator_param_
                         : *::deepflow::AccumulatorParam::internal_default_instance();
}
::deepflow::AccumulatorParam* NodeParam::mutable_accumulator_param() {
  
  if (accumulator_param_ == NULL) {
    accumulator_param_ = new ::deepflow::AccumulatorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.accumulator_param)
  return accumulator_param_;
}
::deepflow::AccumulatorParam* NodeParam::release_accumulator_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.accumulator_param)
  
  ::deepflow::AccumulatorParam* temp = accumulator_param_;
  accumulator_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_accumulator_param(::deepflow::AccumulatorParam* accumulator_param) {
  delete accumulator_param_;
  accumulator_param_ = accumulator_param;
  if (accumulator_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.accumulator_param)
}

// .deepflow.DisplayParam display_param = 118;
bool NodeParam::has_display_param() const {
  return this != internal_default_instance() && display_param_ != NULL;
}
void NodeParam::clear_display_param() {
  if (GetArenaNoVirtual() == NULL && display_param_ != NULL) delete display_param_;
  display_param_ = NULL;
}
const ::deepflow::DisplayParam& NodeParam::display_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.display_param)
  return display_param_ != NULL ? *display_param_
                         : *::deepflow::DisplayParam::internal_default_instance();
}
::deepflow::DisplayParam* NodeParam::mutable_display_param() {
  
  if (display_param_ == NULL) {
    display_param_ = new ::deepflow::DisplayParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.display_param)
  return display_param_;
}
::deepflow::DisplayParam* NodeParam::release_display_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.display_param)
  
  ::deepflow::DisplayParam* temp = display_param_;
  display_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_display_param(::deepflow::DisplayParam* display_param) {
  delete display_param_;
  display_param_ = display_param;
  if (display_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.display_param)
}

// .deepflow.ActivationParam activation_param = 119;
bool NodeParam::has_activation_param() const {
  return this != internal_default_instance() && activation_param_ != NULL;
}
void NodeParam::clear_activation_param() {
  if (GetArenaNoVirtual() == NULL && activation_param_ != NULL) delete activation_param_;
  activation_param_ = NULL;
}
const ::deepflow::ActivationParam& NodeParam::activation_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.activation_param)
  return activation_param_ != NULL ? *activation_param_
                         : *::deepflow::ActivationParam::internal_default_instance();
}
::deepflow::ActivationParam* NodeParam::mutable_activation_param() {
  
  if (activation_param_ == NULL) {
    activation_param_ = new ::deepflow::ActivationParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.activation_param)
  return activation_param_;
}
::deepflow::ActivationParam* NodeParam::release_activation_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.activation_param)
  
  ::deepflow::ActivationParam* temp = activation_param_;
  activation_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_activation_param(::deepflow::ActivationParam* activation_param) {
  delete activation_param_;
  activation_param_ = activation_param;
  if (activation_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.activation_param)
}

// .deepflow.PsnrParam psnr_param = 120;
bool NodeParam::has_psnr_param() const {
  return this != internal_default_instance() && psnr_param_ != NULL;
}
void NodeParam::clear_psnr_param() {
  if (GetArenaNoVirtual() == NULL && psnr_param_ != NULL) delete psnr_param_;
  psnr_param_ = NULL;
}
const ::deepflow::PsnrParam& NodeParam::psnr_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.psnr_param)
  return psnr_param_ != NULL ? *psnr_param_
                         : *::deepflow::PsnrParam::internal_default_instance();
}
::deepflow::PsnrParam* NodeParam::mutable_psnr_param() {
  
  if (psnr_param_ == NULL) {
    psnr_param_ = new ::deepflow::PsnrParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.psnr_param)
  return psnr_param_;
}
::deepflow::PsnrParam* NodeParam::release_psnr_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.psnr_param)
  
  ::deepflow::PsnrParam* temp = psnr_param_;
  psnr_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_psnr_param(::deepflow::PsnrParam* psnr_param) {
  delete psnr_param_;
  psnr_param_ = psnr_param;
  if (psnr_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.psnr_param)
}

// .deepflow.RandomSelectorParam random_selector_param = 121;
bool NodeParam::has_random_selector_param() const {
  return this != internal_default_instance() && random_selector_param_ != NULL;
}
void NodeParam::clear_random_selector_param() {
  if (GetArenaNoVirtual() == NULL && random_selector_param_ != NULL) delete random_selector_param_;
  random_selector_param_ = NULL;
}
const ::deepflow::RandomSelectorParam& NodeParam::random_selector_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.random_selector_param)
  return random_selector_param_ != NULL ? *random_selector_param_
                         : *::deepflow::RandomSelectorParam::internal_default_instance();
}
::deepflow::RandomSelectorParam* NodeParam::mutable_random_selector_param() {
  
  if (random_selector_param_ == NULL) {
    random_selector_param_ = new ::deepflow::RandomSelectorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.random_selector_param)
  return random_selector_param_;
}
::deepflow::RandomSelectorParam* NodeParam::release_random_selector_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.random_selector_param)
  
  ::deepflow::RandomSelectorParam* temp = random_selector_param_;
  random_selector_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_random_selector_param(::deepflow::RandomSelectorParam* random_selector_param) {
  delete random_selector_param_;
  random_selector_param_ = random_selector_param;
  if (random_selector_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.random_selector_param)
}

// .deepflow.LoggerParam logger_param = 122;
bool NodeParam::has_logger_param() const {
  return this != internal_default_instance() && logger_param_ != NULL;
}
void NodeParam::clear_logger_param() {
  if (GetArenaNoVirtual() == NULL && logger_param_ != NULL) delete logger_param_;
  logger_param_ = NULL;
}
const ::deepflow::LoggerParam& NodeParam::logger_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.logger_param)
  return logger_param_ != NULL ? *logger_param_
                         : *::deepflow::LoggerParam::internal_default_instance();
}
::deepflow::LoggerParam* NodeParam::mutable_logger_param() {
  
  if (logger_param_ == NULL) {
    logger_param_ = new ::deepflow::LoggerParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.logger_param)
  return logger_param_;
}
::deepflow::LoggerParam* NodeParam::release_logger_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.logger_param)
  
  ::deepflow::LoggerParam* temp = logger_param_;
  logger_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_logger_param(::deepflow::LoggerParam* logger_param) {
  delete logger_param_;
  logger_param_ = logger_param;
  if (logger_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.logger_param)
}

// .deepflow.RestructureParam restructure_param = 123;
bool NodeParam::has_restructure_param() const {
  return this != internal_default_instance() && restructure_param_ != NULL;
}
void NodeParam::clear_restructure_param() {
  if (GetArenaNoVirtual() == NULL && restructure_param_ != NULL) delete restructure_param_;
  restructure_param_ = NULL;
}
const ::deepflow::RestructureParam& NodeParam::restructure_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.restructure_param)
  return restructure_param_ != NULL ? *restructure_param_
                         : *::deepflow::RestructureParam::internal_default_instance();
}
::deepflow::RestructureParam* NodeParam::mutable_restructure_param() {
  
  if (restructure_param_ == NULL) {
    restructure_param_ = new ::deepflow::RestructureParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.restructure_param)
  return restructure_param_;
}
::deepflow::RestructureParam* NodeParam::release_restructure_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.restructure_param)
  
  ::deepflow::RestructureParam* temp = restructure_param_;
  restructure_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_restructure_param(::deepflow::RestructureParam* restructure_param) {
  delete restructure_param_;
  restructure_param_ = restructure_param;
  if (restructure_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.restructure_param)
}

// .deepflow.ImageReaderParam image_reader_param = 124;
bool NodeParam::has_image_reader_param() const {
  return this != internal_default_instance() && image_reader_param_ != NULL;
}
void NodeParam::clear_image_reader_param() {
  if (GetArenaNoVirtual() == NULL && image_reader_param_ != NULL) delete image_reader_param_;
  image_reader_param_ = NULL;
}
const ::deepflow::ImageReaderParam& NodeParam::image_reader_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.image_reader_param)
  return image_reader_param_ != NULL ? *image_reader_param_
                         : *::deepflow::ImageReaderParam::internal_default_instance();
}
::deepflow::ImageReaderParam* NodeParam::mutable_image_reader_param() {
  
  if (image_reader_param_ == NULL) {
    image_reader_param_ = new ::deepflow::ImageReaderParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.image_reader_param)
  return image_reader_param_;
}
::deepflow::ImageReaderParam* NodeParam::release_image_reader_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.image_reader_param)
  
  ::deepflow::ImageReaderParam* temp = image_reader_param_;
  image_reader_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_image_reader_param(::deepflow::ImageReaderParam* image_reader_param) {
  delete image_reader_param_;
  image_reader_param_ = image_reader_param;
  if (image_reader_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.image_reader_param)
}

// .deepflow.MultiplexerParam multiplexer_param = 125;
bool NodeParam::has_multiplexer_param() const {
  return this != internal_default_instance() && multiplexer_param_ != NULL;
}
void NodeParam::clear_multiplexer_param() {
  if (GetArenaNoVirtual() == NULL && multiplexer_param_ != NULL) delete multiplexer_param_;
  multiplexer_param_ = NULL;
}
const ::deepflow::MultiplexerParam& NodeParam::multiplexer_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.multiplexer_param)
  return multiplexer_param_ != NULL ? *multiplexer_param_
                         : *::deepflow::MultiplexerParam::internal_default_instance();
}
::deepflow::MultiplexerParam* NodeParam::mutable_multiplexer_param() {
  
  if (multiplexer_param_ == NULL) {
    multiplexer_param_ = new ::deepflow::MultiplexerParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.multiplexer_param)
  return multiplexer_param_;
}
::deepflow::MultiplexerParam* NodeParam::release_multiplexer_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.multiplexer_param)
  
  ::deepflow::MultiplexerParam* temp = multiplexer_param_;
  multiplexer_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_multiplexer_param(::deepflow::MultiplexerParam* multiplexer_param) {
  delete multiplexer_param_;
  multiplexer_param_ = multiplexer_param;
  if (multiplexer_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.multiplexer_param)
}

// .deepflow.NegateParam negate_param = 126;
bool NodeParam::has_negate_param() const {
  return this != internal_default_instance() && negate_param_ != NULL;
}
void NodeParam::clear_negate_param() {
  if (GetArenaNoVirtual() == NULL && negate_param_ != NULL) delete negate_param_;
  negate_param_ = NULL;
}
const ::deepflow::NegateParam& NodeParam::negate_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.negate_param)
  return negate_param_ != NULL ? *negate_param_
                         : *::deepflow::NegateParam::internal_default_instance();
}
::deepflow::NegateParam* NodeParam::mutable_negate_param() {
  
  if (negate_param_ == NULL) {
    negate_param_ = new ::deepflow::NegateParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.negate_param)
  return negate_param_;
}
::deepflow::NegateParam* NodeParam::release_negate_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.negate_param)
  
  ::deepflow::NegateParam* temp = negate_param_;
  negate_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_negate_param(::deepflow::NegateParam* negate_param) {
  delete negate_param_;
  negate_param_ = negate_param;
  if (negate_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.negate_param)
}

// .deepflow.BatchNormalizationParam batch_normalization_param = 127;
bool NodeParam::has_batch_normalization_param() const {
  return this != internal_default_instance() && batch_normalization_param_ != NULL;
}
void NodeParam::clear_batch_normalization_param() {
  if (GetArenaNoVirtual() == NULL && batch_normalization_param_ != NULL) delete batch_normalization_param_;
  batch_normalization_param_ = NULL;
}
const ::deepflow::BatchNormalizationParam& NodeParam::batch_normalization_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.batch_normalization_param)
  return batch_normalization_param_ != NULL ? *batch_normalization_param_
                         : *::deepflow::BatchNormalizationParam::internal_default_instance();
}
::deepflow::BatchNormalizationParam* NodeParam::mutable_batch_normalization_param() {
  
  if (batch_normalization_param_ == NULL) {
    batch_normalization_param_ = new ::deepflow::BatchNormalizationParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.batch_normalization_param)
  return batch_normalization_param_;
}
::deepflow::BatchNormalizationParam* NodeParam::release_batch_normalization_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.batch_normalization_param)
  
  ::deepflow::BatchNormalizationParam* temp = batch_normalization_param_;
  batch_normalization_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_batch_normalization_param(::deepflow::BatchNormalizationParam* batch_normalization_param) {
  delete batch_normalization_param_;
  batch_normalization_param_ = batch_normalization_param;
  if (batch_normalization_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.batch_normalization_param)
}

// .deepflow.MnistParam mnist_param = 128;
bool NodeParam::has_mnist_param() const {
  return this != internal_default_instance() && mnist_param_ != NULL;
}
void NodeParam::clear_mnist_param() {
  if (GetArenaNoVirtual() == NULL && mnist_param_ != NULL) delete mnist_param_;
  mnist_param_ = NULL;
}
const ::deepflow::MnistParam& NodeParam::mnist_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.mnist_param)
  return mnist_param_ != NULL ? *mnist_param_
                         : *::deepflow::MnistParam::internal_default_instance();
}
::deepflow::MnistParam* NodeParam::mutable_mnist_param() {
  
  if (mnist_param_ == NULL) {
    mnist_param_ = new ::deepflow::MnistParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.mnist_param)
  return mnist_param_;
}
::deepflow::MnistParam* NodeParam::release_mnist_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.mnist_param)
  
  ::deepflow::MnistParam* temp = mnist_param_;
  mnist_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_mnist_param(::deepflow::MnistParam* mnist_param) {
  delete mnist_param_;
  mnist_param_ = mnist_param;
  if (mnist_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.mnist_param)
}

// .deepflow.DataGeneratorParam data_generator_param = 129;
bool NodeParam::has_data_generator_param() const {
  return this != internal_default_instance() && data_generator_param_ != NULL;
}
void NodeParam::clear_data_generator_param() {
  if (GetArenaNoVirtual() == NULL && data_generator_param_ != NULL) delete data_generator_param_;
  data_generator_param_ = NULL;
}
const ::deepflow::DataGeneratorParam& NodeParam::data_generator_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.data_generator_param)
  return data_generator_param_ != NULL ? *data_generator_param_
                         : *::deepflow::DataGeneratorParam::internal_default_instance();
}
::deepflow::DataGeneratorParam* NodeParam::mutable_data_generator_param() {
  
  if (data_generator_param_ == NULL) {
    data_generator_param_ = new ::deepflow::DataGeneratorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.data_generator_param)
  return data_generator_param_;
}
::deepflow::DataGeneratorParam* NodeParam::release_data_generator_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.data_generator_param)
  
  ::deepflow::DataGeneratorParam* temp = data_generator_param_;
  data_generator_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_data_generator_param(::deepflow::DataGeneratorParam* data_generator_param) {
  delete data_generator_param_;
  data_generator_param_ = data_generator_param;
  if (data_generator_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.data_generator_param)
}

// .deepflow.ImageBatchReaderParam image_batch_reader_param = 130;
bool NodeParam::has_image_batch_reader_param() const {
  return this != internal_default_instance() && image_batch_reader_param_ != NULL;
}
void NodeParam::clear_image_batch_reader_param() {
  if (GetArenaNoVirtual() == NULL && image_batch_reader_param_ != NULL) delete image_batch_reader_param_;
  image_batch_reader_param_ = NULL;
}
const ::deepflow::ImageBatchReaderParam& NodeParam::image_batch_reader_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.image_batch_reader_param)
  return image_batch_reader_param_ != NULL ? *image_batch_reader_param_
                         : *::deepflow::ImageBatchReaderParam::internal_default_instance();
}
::deepflow::ImageBatchReaderParam* NodeParam::mutable_image_batch_reader_param() {
  
  if (image_batch_reader_param_ == NULL) {
    image_batch_reader_param_ = new ::deepflow::ImageBatchReaderParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.image_batch_reader_param)
  return image_batch_reader_param_;
}
::deepflow::ImageBatchReaderParam* NodeParam::release_image_batch_reader_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.image_batch_reader_param)
  
  ::deepflow::ImageBatchReaderParam* temp = image_batch_reader_param_;
  image_batch_reader_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_image_batch_reader_param(::deepflow::ImageBatchReaderParam* image_batch_reader_param) {
  delete image_batch_reader_param_;
  image_batch_reader_param_ = image_batch_reader_param;
  if (image_batch_reader_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.image_batch_reader_param)
}

// .deepflow.DotParam dot_param = 131;
bool NodeParam::has_dot_param() const {
  return this != internal_default_instance() && dot_param_ != NULL;
}
void NodeParam::clear_dot_param() {
  if (GetArenaNoVirtual() == NULL && dot_param_ != NULL) delete dot_param_;
  dot_param_ = NULL;
}
const ::deepflow::DotParam& NodeParam::dot_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.dot_param)
  return dot_param_ != NULL ? *dot_param_
                         : *::deepflow::DotParam::internal_default_instance();
}
::deepflow::DotParam* NodeParam::mutable_dot_param() {
  
  if (dot_param_ == NULL) {
    dot_param_ = new ::deepflow::DotParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.dot_param)
  return dot_param_;
}
::deepflow::DotParam* NodeParam::release_dot_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.dot_param)
  
  ::deepflow::DotParam* temp = dot_param_;
  dot_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_dot_param(::deepflow::DotParam* dot_param) {
  delete dot_param_;
  dot_param_ = dot_param;
  if (dot_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.dot_param)
}

// .deepflow.ReplayMemoryParam replay_memory_param = 132;
bool NodeParam::has_replay_memory_param() const {
  return this != internal_default_instance() && replay_memory_param_ != NULL;
}
void NodeParam::clear_replay_memory_param() {
  if (GetArenaNoVirtual() == NULL && replay_memory_param_ != NULL) delete replay_memory_param_;
  replay_memory_param_ = NULL;
}
const ::deepflow::ReplayMemoryParam& NodeParam::replay_memory_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.replay_memory_param)
  return replay_memory_param_ != NULL ? *replay_memory_param_
                         : *::deepflow::ReplayMemoryParam::internal_default_instance();
}
::deepflow::ReplayMemoryParam* NodeParam::mutable_replay_memory_param() {
  
  if (replay_memory_param_ == NULL) {
    replay_memory_param_ = new ::deepflow::ReplayMemoryParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.replay_memory_param)
  return replay_memory_param_;
}
::deepflow::ReplayMemoryParam* NodeParam::release_replay_memory_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.replay_memory_param)
  
  ::deepflow::ReplayMemoryParam* temp = replay_memory_param_;
  replay_memory_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_replay_memory_param(::deepflow::ReplayMemoryParam* replay_memory_param) {
  delete replay_memory_param_;
  replay_memory_param_ = replay_memory_param;
  if (replay_memory_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.replay_memory_param)
}

// .deepflow.EuclideanDistanceParam euclidean_distance_param = 134;
bool NodeParam::has_euclidean_distance_param() const {
  return this != internal_default_instance() && euclidean_distance_param_ != NULL;
}
void NodeParam::clear_euclidean_distance_param() {
  if (GetArenaNoVirtual() == NULL && euclidean_distance_param_ != NULL) delete euclidean_distance_param_;
  euclidean_distance_param_ = NULL;
}
const ::deepflow::EuclideanDistanceParam& NodeParam::euclidean_distance_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.euclidean_distance_param)
  return euclidean_distance_param_ != NULL ? *euclidean_distance_param_
                         : *::deepflow::EuclideanDistanceParam::internal_default_instance();
}
::deepflow::EuclideanDistanceParam* NodeParam::mutable_euclidean_distance_param() {
  
  if (euclidean_distance_param_ == NULL) {
    euclidean_distance_param_ = new ::deepflow::EuclideanDistanceParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.euclidean_distance_param)
  return euclidean_distance_param_;
}
::deepflow::EuclideanDistanceParam* NodeParam::release_euclidean_distance_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.euclidean_distance_param)
  
  ::deepflow::EuclideanDistanceParam* temp = euclidean_distance_param_;
  euclidean_distance_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_euclidean_distance_param(::deepflow::EuclideanDistanceParam* euclidean_distance_param) {
  delete euclidean_distance_param_;
  euclidean_distance_param_ = euclidean_distance_param;
  if (euclidean_distance_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.euclidean_distance_param)
}

// .deepflow.SIOOutputParam sio_output_param = 135;
bool NodeParam::has_sio_output_param() const {
  return this != internal_default_instance() && sio_output_param_ != NULL;
}
void NodeParam::clear_sio_output_param() {
  if (GetArenaNoVirtual() == NULL && sio_output_param_ != NULL) delete sio_output_param_;
  sio_output_param_ = NULL;
}
const ::deepflow::SIOOutputParam& NodeParam::sio_output_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.sio_output_param)
  return sio_output_param_ != NULL ? *sio_output_param_
                         : *::deepflow::SIOOutputParam::internal_default_instance();
}
::deepflow::SIOOutputParam* NodeParam::mutable_sio_output_param() {
  
  if (sio_output_param_ == NULL) {
    sio_output_param_ = new ::deepflow::SIOOutputParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.sio_output_param)
  return sio_output_param_;
}
::deepflow::SIOOutputParam* NodeParam::release_sio_output_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.sio_output_param)
  
  ::deepflow::SIOOutputParam* temp = sio_output_param_;
  sio_output_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_sio_output_param(::deepflow::SIOOutputParam* sio_output_param) {
  delete sio_output_param_;
  sio_output_param_ = sio_output_param;
  if (sio_output_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.sio_output_param)
}

// .deepflow.LogParam log_param = 136;
bool NodeParam::has_log_param() const {
  return this != internal_default_instance() && log_param_ != NULL;
}
void NodeParam::clear_log_param() {
  if (GetArenaNoVirtual() == NULL && log_param_ != NULL) delete log_param_;
  log_param_ = NULL;
}
const ::deepflow::LogParam& NodeParam::log_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.log_param)
  return log_param_ != NULL ? *log_param_
                         : *::deepflow::LogParam::internal_default_instance();
}
::deepflow::LogParam* NodeParam::mutable_log_param() {
  
  if (log_param_ == NULL) {
    log_param_ = new ::deepflow::LogParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.log_param)
  return log_param_;
}
::deepflow::LogParam* NodeParam::release_log_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.log_param)
  
  ::deepflow::LogParam* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_log_param(::deepflow::LogParam* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.log_param)
}

// .deepflow.LossParam loss_param = 137;
bool NodeParam::has_loss_param() const {
  return this != internal_default_instance() && loss_param_ != NULL;
}
void NodeParam::clear_loss_param() {
  if (GetArenaNoVirtual() == NULL && loss_param_ != NULL) delete loss_param_;
  loss_param_ = NULL;
}
const ::deepflow::LossParam& NodeParam::loss_param() const {
  // @@protoc_insertion_point(field_get:deepflow.NodeParam.loss_param)
  return loss_param_ != NULL ? *loss_param_
                         : *::deepflow::LossParam::internal_default_instance();
}
::deepflow::LossParam* NodeParam::mutable_loss_param() {
  
  if (loss_param_ == NULL) {
    loss_param_ = new ::deepflow::LossParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.NodeParam.loss_param)
  return loss_param_;
}
::deepflow::LossParam* NodeParam::release_loss_param() {
  // @@protoc_insertion_point(field_release:deepflow.NodeParam.loss_param)
  
  ::deepflow::LossParam* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void NodeParam::set_allocated_loss_param(::deepflow::LossParam* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.NodeParam.loss_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SquareParam::SquareParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SquareParam)
}
SquareParam::SquareParam(const SquareParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.SquareParam)
}

void SquareParam::SharedCtor() {
  _cached_size_ = 0;
}

SquareParam::~SquareParam() {
  // @@protoc_insertion_point(destructor:deepflow.SquareParam)
  SharedDtor();
}

void SquareParam::SharedDtor() {
}

void SquareParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SquareParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SquareParam& SquareParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SquareParam* SquareParam::New(::google::protobuf::Arena* arena) const {
  SquareParam* n = new SquareParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SquareParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SquareParam)
}

bool SquareParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SquareParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SquareParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SquareParam)
  return false;
#undef DO_
}

void SquareParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SquareParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.SquareParam)
}

::google::protobuf::uint8* SquareParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SquareParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SquareParam)
  return target;
}

size_t SquareParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SquareParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SquareParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SquareParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SquareParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SquareParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SquareParam)
    MergeFrom(*source);
  }
}

void SquareParam::MergeFrom(const SquareParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SquareParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SquareParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SquareParam::CopyFrom(const SquareParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SquareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SquareParam::IsInitialized() const {
  return true;
}

void SquareParam::Swap(SquareParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SquareParam::InternalSwap(SquareParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SquareParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SquareParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EuclideanDistanceParam::EuclideanDistanceParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.EuclideanDistanceParam)
}
EuclideanDistanceParam::EuclideanDistanceParam(const EuclideanDistanceParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.EuclideanDistanceParam)
}

void EuclideanDistanceParam::SharedCtor() {
  _cached_size_ = 0;
}

EuclideanDistanceParam::~EuclideanDistanceParam() {
  // @@protoc_insertion_point(destructor:deepflow.EuclideanDistanceParam)
  SharedDtor();
}

void EuclideanDistanceParam::SharedDtor() {
}

void EuclideanDistanceParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EuclideanDistanceParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EuclideanDistanceParam& EuclideanDistanceParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

EuclideanDistanceParam* EuclideanDistanceParam::New(::google::protobuf::Arena* arena) const {
  EuclideanDistanceParam* n = new EuclideanDistanceParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EuclideanDistanceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.EuclideanDistanceParam)
}

bool EuclideanDistanceParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.EuclideanDistanceParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.EuclideanDistanceParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.EuclideanDistanceParam)
  return false;
#undef DO_
}

void EuclideanDistanceParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.EuclideanDistanceParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.EuclideanDistanceParam)
}

::google::protobuf::uint8* EuclideanDistanceParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.EuclideanDistanceParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.EuclideanDistanceParam)
  return target;
}

size_t EuclideanDistanceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.EuclideanDistanceParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EuclideanDistanceParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.EuclideanDistanceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EuclideanDistanceParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EuclideanDistanceParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.EuclideanDistanceParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.EuclideanDistanceParam)
    MergeFrom(*source);
  }
}

void EuclideanDistanceParam::MergeFrom(const EuclideanDistanceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.EuclideanDistanceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EuclideanDistanceParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.EuclideanDistanceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EuclideanDistanceParam::CopyFrom(const EuclideanDistanceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.EuclideanDistanceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EuclideanDistanceParam::IsInitialized() const {
  return true;
}

void EuclideanDistanceParam::Swap(EuclideanDistanceParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EuclideanDistanceParam::InternalSwap(EuclideanDistanceParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EuclideanDistanceParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EuclideanDistanceParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParam::SoftmaxParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SoftmaxParam)
}
SoftmaxParam::SoftmaxParam(const SoftmaxParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.SoftmaxParam)
}

void SoftmaxParam::SharedCtor() {
  _cached_size_ = 0;
}

SoftmaxParam::~SoftmaxParam() {
  // @@protoc_insertion_point(destructor:deepflow.SoftmaxParam)
  SharedDtor();
}

void SoftmaxParam::SharedDtor() {
}

void SoftmaxParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftmaxParam& SoftmaxParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxParam* SoftmaxParam::New(::google::protobuf::Arena* arena) const {
  SoftmaxParam* n = new SoftmaxParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SoftmaxParam)
}

bool SoftmaxParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SoftmaxParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SoftmaxParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SoftmaxParam)
  return false;
#undef DO_
}

void SoftmaxParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SoftmaxParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.SoftmaxParam)
}

::google::protobuf::uint8* SoftmaxParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SoftmaxParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SoftmaxParam)
  return target;
}

size_t SoftmaxParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SoftmaxParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SoftmaxParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SoftmaxParam)
    MergeFrom(*source);
  }
}

void SoftmaxParam::MergeFrom(const SoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SoftmaxParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SoftmaxParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParam::CopyFrom(const SoftmaxParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SoftmaxParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParam::IsInitialized() const {
  return true;
}

void SoftmaxParam::Swap(SoftmaxParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParam::InternalSwap(SoftmaxParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitFillParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitFillParam::InitFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitFillParam)
}
InitFillParam::InitFillParam(const InitFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:deepflow.InitFillParam)
}

void InitFillParam::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

InitFillParam::~InitFillParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitFillParam)
  SharedDtor();
}

void InitFillParam::SharedDtor() {
}

void InitFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitFillParam& InitFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitFillParam* InitFillParam::New(::google::protobuf::Arena* arena) const {
  InitFillParam* n = new InitFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitFillParam)
  value_ = 0;
}

bool InitFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitFillParam)
  return false;
#undef DO_
}

void InitFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitFillParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitFillParam)
}

::google::protobuf::uint8* InitFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitFillParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitFillParam)
  return target;
}

size_t InitFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitFillParam)
  size_t total_size = 0;

  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitFillParam)
    MergeFrom(*source);
  }
}

void InitFillParam::MergeFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void InitFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitFillParam::CopyFrom(const InitFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitFillParam::IsInitialized() const {
  return true;
}

void InitFillParam::Swap(InitFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitFillParam::InternalSwap(InitFillParam* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitFillParam

// float value = 1;
void InitFillParam::clear_value() {
  value_ = 0;
}
float InitFillParam::value() const {
  // @@protoc_insertion_point(field_get:deepflow.InitFillParam.value)
  return value_;
}
void InitFillParam::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitFillParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitIndexFillParam::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitIndexFillParam::InitIndexFillParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitIndexFillParam)
}
InitIndexFillParam::InitIndexFillParam(const InitIndexFillParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:deepflow.InitIndexFillParam)
}

void InitIndexFillParam::SharedCtor() {
  offset_ = 0;
  _cached_size_ = 0;
}

InitIndexFillParam::~InitIndexFillParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitIndexFillParam)
  SharedDtor();
}

void InitIndexFillParam::SharedDtor() {
}

void InitIndexFillParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitIndexFillParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitIndexFillParam& InitIndexFillParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitIndexFillParam* InitIndexFillParam::New(::google::protobuf::Arena* arena) const {
  InitIndexFillParam* n = new InitIndexFillParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitIndexFillParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitIndexFillParam)
  offset_ = 0;
}

bool InitIndexFillParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitIndexFillParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitIndexFillParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitIndexFillParam)
  return false;
#undef DO_
}

void InitIndexFillParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitIndexFillParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float offset = 1;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitIndexFillParam)
}

::google::protobuf::uint8* InitIndexFillParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitIndexFillParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float offset = 1;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitIndexFillParam)
  return target;
}

size_t InitIndexFillParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitIndexFillParam)
  size_t total_size = 0;

  // float offset = 1;
  if (this->offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitIndexFillParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitIndexFillParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitIndexFillParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitIndexFillParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitIndexFillParam)
    MergeFrom(*source);
  }
}

void InitIndexFillParam::MergeFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitIndexFillParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void InitIndexFillParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitIndexFillParam::CopyFrom(const InitIndexFillParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitIndexFillParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitIndexFillParam::IsInitialized() const {
  return true;
}

void InitIndexFillParam::Swap(InitIndexFillParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitIndexFillParam::InternalSwap(InitIndexFillParam* other) {
  std::swap(offset_, other->offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitIndexFillParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitIndexFillParam

// float offset = 1;
void InitIndexFillParam::clear_offset() {
  offset_ = 0;
}
float InitIndexFillParam::offset() const {
  // @@protoc_insertion_point(field_get:deepflow.InitIndexFillParam.offset)
  return offset_;
}
void InitIndexFillParam::set_offset(float value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitIndexFillParam.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRandomUniformParam::kMinFieldNumber;
const int InitRandomUniformParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRandomUniformParam::InitRandomUniformParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitRandomUniformParam)
}
InitRandomUniformParam::InitRandomUniformParam(const InitRandomUniformParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:deepflow.InitRandomUniformParam)
}

void InitRandomUniformParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitRandomUniformParam::~InitRandomUniformParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitRandomUniformParam)
  SharedDtor();
}

void InitRandomUniformParam::SharedDtor() {
}

void InitRandomUniformParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRandomUniformParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRandomUniformParam& InitRandomUniformParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRandomUniformParam* InitRandomUniformParam::New(::google::protobuf::Arena* arena) const {
  InitRandomUniformParam* n = new InitRandomUniformParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRandomUniformParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitRandomUniformParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitRandomUniformParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitRandomUniformParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitRandomUniformParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitRandomUniformParam)
  return false;
#undef DO_
}

void InitRandomUniformParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitRandomUniformParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitRandomUniformParam)
}

::google::protobuf::uint8* InitRandomUniformParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitRandomUniformParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitRandomUniformParam)
  return target;
}

size_t InitRandomUniformParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitRandomUniformParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRandomUniformParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRandomUniformParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRandomUniformParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitRandomUniformParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitRandomUniformParam)
    MergeFrom(*source);
  }
}

void InitRandomUniformParam::MergeFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitRandomUniformParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitRandomUniformParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRandomUniformParam::CopyFrom(const InitRandomUniformParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitRandomUniformParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRandomUniformParam::IsInitialized() const {
  return true;
}

void InitRandomUniformParam::Swap(InitRandomUniformParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRandomUniformParam::InternalSwap(InitRandomUniformParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRandomUniformParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRandomUniformParam

// float min = 1;
void InitRandomUniformParam::clear_min() {
  min_ = 0;
}
float InitRandomUniformParam::min() const {
  // @@protoc_insertion_point(field_get:deepflow.InitRandomUniformParam.min)
  return min_;
}
void InitRandomUniformParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitRandomUniformParam.min)
}

// float max = 2;
void InitRandomUniformParam::clear_max() {
  max_ = 0;
}
float InitRandomUniformParam::max() const {
  // @@protoc_insertion_point(field_get:deepflow.InitRandomUniformParam.max)
  return max_;
}
void InitRandomUniformParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitRandomUniformParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRandomNormalParam::kMeanFieldNumber;
const int InitRandomNormalParam::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRandomNormalParam::InitRandomNormalParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitRandomNormalParam)
}
InitRandomNormalParam::InitRandomNormalParam(const InitRandomNormalParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:deepflow.InitRandomNormalParam)
}

void InitRandomNormalParam::SharedCtor() {
  ::memset(&mean_, 0, reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_) + sizeof(stddev_));
  _cached_size_ = 0;
}

InitRandomNormalParam::~InitRandomNormalParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitRandomNormalParam)
  SharedDtor();
}

void InitRandomNormalParam::SharedDtor() {
}

void InitRandomNormalParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRandomNormalParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRandomNormalParam& InitRandomNormalParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRandomNormalParam* InitRandomNormalParam::New(::google::protobuf::Arena* arena) const {
  InitRandomNormalParam* n = new InitRandomNormalParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRandomNormalParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitRandomNormalParam)
  ::memset(&mean_, 0, reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_) + sizeof(stddev_));
}

bool InitRandomNormalParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitRandomNormalParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stddev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitRandomNormalParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitRandomNormalParam)
  return false;
#undef DO_
}

void InitRandomNormalParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitRandomNormalParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mean = 1;
  if (this->mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // float stddev = 2;
  if (this->stddev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitRandomNormalParam)
}

::google::protobuf::uint8* InitRandomNormalParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitRandomNormalParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mean = 1;
  if (this->mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // float stddev = 2;
  if (this->stddev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitRandomNormalParam)
  return target;
}

size_t InitRandomNormalParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitRandomNormalParam)
  size_t total_size = 0;

  // float mean = 1;
  if (this->mean() != 0) {
    total_size += 1 + 4;
  }

  // float stddev = 2;
  if (this->stddev() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRandomNormalParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitRandomNormalParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRandomNormalParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRandomNormalParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitRandomNormalParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitRandomNormalParam)
    MergeFrom(*source);
  }
}

void InitRandomNormalParam::MergeFrom(const InitRandomNormalParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitRandomNormalParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mean() != 0) {
    set_mean(from.mean());
  }
  if (from.stddev() != 0) {
    set_stddev(from.stddev());
  }
}

void InitRandomNormalParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitRandomNormalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRandomNormalParam::CopyFrom(const InitRandomNormalParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitRandomNormalParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRandomNormalParam::IsInitialized() const {
  return true;
}

void InitRandomNormalParam::Swap(InitRandomNormalParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRandomNormalParam::InternalSwap(InitRandomNormalParam* other) {
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRandomNormalParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRandomNormalParam

// float mean = 1;
void InitRandomNormalParam::clear_mean() {
  mean_ = 0;
}
float InitRandomNormalParam::mean() const {
  // @@protoc_insertion_point(field_get:deepflow.InitRandomNormalParam.mean)
  return mean_;
}
void InitRandomNormalParam::set_mean(float value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitRandomNormalParam.mean)
}

// float stddev = 2;
void InitRandomNormalParam::clear_stddev() {
  stddev_ = 0;
}
float InitRandomNormalParam::stddev() const {
  // @@protoc_insertion_point(field_get:deepflow.InitRandomNormalParam.stddev)
  return stddev_;
}
void InitRandomNormalParam::set_stddev(float value) {
  
  stddev_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitRandomNormalParam.stddev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitStepParam::kMinFieldNumber;
const int InitStepParam::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitStepParam::InitStepParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitStepParam)
}
InitStepParam::InitStepParam(const InitStepParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:deepflow.InitStepParam)
}

void InitStepParam::SharedCtor() {
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
  _cached_size_ = 0;
}

InitStepParam::~InitStepParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitStepParam)
  SharedDtor();
}

void InitStepParam::SharedDtor() {
}

void InitStepParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitStepParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitStepParam& InitStepParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitStepParam* InitStepParam::New(::google::protobuf::Arena* arena) const {
  InitStepParam* n = new InitStepParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitStepParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitStepParam)
  ::memset(&min_, 0, reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_) + sizeof(max_));
}

bool InitStepParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitStepParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitStepParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitStepParam)
  return false;
#undef DO_
}

void InitStepParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitStepParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitStepParam)
}

::google::protobuf::uint8* InitStepParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitStepParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitStepParam)
  return target;
}

size_t InitStepParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitStepParam)
  size_t total_size = 0;

  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitStepParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitStepParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitStepParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitStepParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitStepParam)
    MergeFrom(*source);
  }
}

void InitStepParam::MergeFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitStepParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void InitStepParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitStepParam::CopyFrom(const InitStepParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitStepParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitStepParam::IsInitialized() const {
  return true;
}

void InitStepParam::Swap(InitStepParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitStepParam::InternalSwap(InitStepParam* other) {
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitStepParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitStepParam

// float min = 1;
void InitStepParam::clear_min() {
  min_ = 0;
}
float InitStepParam::min() const {
  // @@protoc_insertion_point(field_get:deepflow.InitStepParam.min)
  return min_;
}
void InitStepParam::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitStepParam.min)
}

// float max = 2;
void InitStepParam::clear_max() {
  max_ = 0;
}
float InitStepParam::max() const {
  // @@protoc_insertion_point(field_get:deepflow.InitStepParam.max)
  return max_;
}
void InitStepParam::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:deepflow.InitStepParam.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitThreeStateParam::InitThreeStateParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitThreeStateParam)
}
InitThreeStateParam::InitThreeStateParam(const InitThreeStateParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.InitThreeStateParam)
}

void InitThreeStateParam::SharedCtor() {
  _cached_size_ = 0;
}

InitThreeStateParam::~InitThreeStateParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitThreeStateParam)
  SharedDtor();
}

void InitThreeStateParam::SharedDtor() {
}

void InitThreeStateParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitThreeStateParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitThreeStateParam& InitThreeStateParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitThreeStateParam* InitThreeStateParam::New(::google::protobuf::Arena* arena) const {
  InitThreeStateParam* n = new InitThreeStateParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitThreeStateParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitThreeStateParam)
}

bool InitThreeStateParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitThreeStateParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitThreeStateParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitThreeStateParam)
  return false;
#undef DO_
}

void InitThreeStateParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitThreeStateParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:deepflow.InitThreeStateParam)
}

::google::protobuf::uint8* InitThreeStateParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitThreeStateParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitThreeStateParam)
  return target;
}

size_t InitThreeStateParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitThreeStateParam)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitThreeStateParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitThreeStateParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitThreeStateParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitThreeStateParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitThreeStateParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitThreeStateParam)
    MergeFrom(*source);
  }
}

void InitThreeStateParam::MergeFrom(const InitThreeStateParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitThreeStateParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InitThreeStateParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitThreeStateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitThreeStateParam::CopyFrom(const InitThreeStateParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitThreeStateParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitThreeStateParam::IsInitialized() const {
  return true;
}

void InitThreeStateParam::Swap(InitThreeStateParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitThreeStateParam::InternalSwap(InitThreeStateParam* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitThreeStateParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitThreeStateParam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitParam::kNameFieldNumber;
const int InitParam::kTensorParamFieldNumber;
const int InitParam::kInitDataFieldNumber;
const int InitParam::kFillParamFieldNumber;
const int InitParam::kIndexFillParamFieldNumber;
const int InitParam::kRandomUniformParamFieldNumber;
const int InitParam::kStepParamFieldNumber;
const int InitParam::kRandomNormalParamFieldNumber;
const int InitParam::kThreeStateParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitParam::InitParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.InitParam)
}
InitParam::InitParam(const InitParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_param()) {
    tensor_param_ = new ::deepflow::TensorParam(*from.tensor_param_);
  } else {
    tensor_param_ = NULL;
  }
  if (from.has_init_data()) {
    init_data_ = new ::deepflow::TensorData(*from.init_data_);
  } else {
    init_data_ = NULL;
  }
  if (from.has_fill_param()) {
    fill_param_ = new ::deepflow::InitFillParam(*from.fill_param_);
  } else {
    fill_param_ = NULL;
  }
  if (from.has_index_fill_param()) {
    index_fill_param_ = new ::deepflow::InitIndexFillParam(*from.index_fill_param_);
  } else {
    index_fill_param_ = NULL;
  }
  if (from.has_random_uniform_param()) {
    random_uniform_param_ = new ::deepflow::InitRandomUniformParam(*from.random_uniform_param_);
  } else {
    random_uniform_param_ = NULL;
  }
  if (from.has_step_param()) {
    step_param_ = new ::deepflow::InitStepParam(*from.step_param_);
  } else {
    step_param_ = NULL;
  }
  if (from.has_random_normal_param()) {
    random_normal_param_ = new ::deepflow::InitRandomNormalParam(*from.random_normal_param_);
  } else {
    random_normal_param_ = NULL;
  }
  if (from.has_three_state_param()) {
    three_state_param_ = new ::deepflow::InitThreeStateParam(*from.three_state_param_);
  } else {
    three_state_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:deepflow.InitParam)
}

void InitParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_param_, 0, reinterpret_cast<char*>(&three_state_param_) -
    reinterpret_cast<char*>(&tensor_param_) + sizeof(three_state_param_));
  _cached_size_ = 0;
}

InitParam::~InitParam() {
  // @@protoc_insertion_point(destructor:deepflow.InitParam)
  SharedDtor();
}

void InitParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tensor_param_;
  }
  if (this != internal_default_instance()) {
    delete init_data_;
  }
  if (this != internal_default_instance()) {
    delete fill_param_;
  }
  if (this != internal_default_instance()) {
    delete index_fill_param_;
  }
  if (this != internal_default_instance()) {
    delete random_uniform_param_;
  }
  if (this != internal_default_instance()) {
    delete step_param_;
  }
  if (this != internal_default_instance()) {
    delete random_normal_param_;
  }
  if (this != internal_default_instance()) {
    delete three_state_param_;
  }
}

void InitParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitParam& InitParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitParam* InitParam::New(::google::protobuf::Arena* arena) const {
  InitParam* n = new InitParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.InitParam)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) {
    delete tensor_param_;
  }
  tensor_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && init_data_ != NULL) {
    delete init_data_;
  }
  init_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) {
    delete fill_param_;
  }
  fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) {
    delete index_fill_param_;
  }
  index_fill_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) {
    delete random_uniform_param_;
  }
  random_uniform_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) {
    delete step_param_;
  }
  step_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_normal_param_ != NULL) {
    delete random_normal_param_;
  }
  random_normal_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && three_state_param_ != NULL) {
    delete three_state_param_;
  }
  three_state_param_ = NULL;
}

bool InitParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.InitParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.InitParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorParam tensor_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.TensorData init_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitFillParam fill_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitIndexFillParam index_fill_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_fill_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitRandomUniformParam random_uniform_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_uniform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitStepParam step_param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitRandomNormalParam random_normal_param = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_normal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.InitThreeStateParam three_state_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_three_state_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.InitParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.InitParam)
  return false;
#undef DO_
}

void InitParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.InitParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.InitParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tensor_param_, output);
  }

  // .deepflow.TensorData init_data = 3;
  if (this->has_init_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->init_data_, output);
  }

  // .deepflow.InitFillParam fill_param = 4;
  if (this->has_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->fill_param_, output);
  }

  // .deepflow.InitIndexFillParam index_fill_param = 5;
  if (this->has_index_fill_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->index_fill_param_, output);
  }

  // .deepflow.InitRandomUniformParam random_uniform_param = 6;
  if (this->has_random_uniform_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->random_uniform_param_, output);
  }

  // .deepflow.InitStepParam step_param = 7;
  if (this->has_step_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->step_param_, output);
  }

  // .deepflow.InitRandomNormalParam random_normal_param = 8;
  if (this->has_random_normal_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->random_normal_param_, output);
  }

  // .deepflow.InitThreeStateParam three_state_param = 9;
  if (this->has_three_state_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->three_state_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.InitParam)
}

::google::protobuf::uint8* InitParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.InitParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.InitParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tensor_param_, deterministic, target);
  }

  // .deepflow.TensorData init_data = 3;
  if (this->has_init_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->init_data_, deterministic, target);
  }

  // .deepflow.InitFillParam fill_param = 4;
  if (this->has_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->fill_param_, deterministic, target);
  }

  // .deepflow.InitIndexFillParam index_fill_param = 5;
  if (this->has_index_fill_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->index_fill_param_, deterministic, target);
  }

  // .deepflow.InitRandomUniformParam random_uniform_param = 6;
  if (this->has_random_uniform_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->random_uniform_param_, deterministic, target);
  }

  // .deepflow.InitStepParam step_param = 7;
  if (this->has_step_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->step_param_, deterministic, target);
  }

  // .deepflow.InitRandomNormalParam random_normal_param = 8;
  if (this->has_random_normal_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->random_normal_param_, deterministic, target);
  }

  // .deepflow.InitThreeStateParam three_state_param = 9;
  if (this->has_three_state_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->three_state_param_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.InitParam)
  return target;
}

size_t InitParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.InitParam)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .deepflow.TensorParam tensor_param = 2;
  if (this->has_tensor_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_param_);
  }

  // .deepflow.TensorData init_data = 3;
  if (this->has_init_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->init_data_);
  }

  // .deepflow.InitFillParam fill_param = 4;
  if (this->has_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fill_param_);
  }

  // .deepflow.InitIndexFillParam index_fill_param = 5;
  if (this->has_index_fill_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_fill_param_);
  }

  // .deepflow.InitRandomUniformParam random_uniform_param = 6;
  if (this->has_random_uniform_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_uniform_param_);
  }

  // .deepflow.InitStepParam step_param = 7;
  if (this->has_step_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->step_param_);
  }

  // .deepflow.InitRandomNormalParam random_normal_param = 8;
  if (this->has_random_normal_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_normal_param_);
  }

  // .deepflow.InitThreeStateParam three_state_param = 9;
  if (this->has_three_state_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->three_state_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InitParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.InitParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.InitParam)
    MergeFrom(*source);
  }
}

void InitParam::MergeFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.InitParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_tensor_param()) {
    mutable_tensor_param()->::deepflow::TensorParam::MergeFrom(from.tensor_param());
  }
  if (from.has_init_data()) {
    mutable_init_data()->::deepflow::TensorData::MergeFrom(from.init_data());
  }
  if (from.has_fill_param()) {
    mutable_fill_param()->::deepflow::InitFillParam::MergeFrom(from.fill_param());
  }
  if (from.has_index_fill_param()) {
    mutable_index_fill_param()->::deepflow::InitIndexFillParam::MergeFrom(from.index_fill_param());
  }
  if (from.has_random_uniform_param()) {
    mutable_random_uniform_param()->::deepflow::InitRandomUniformParam::MergeFrom(from.random_uniform_param());
  }
  if (from.has_step_param()) {
    mutable_step_param()->::deepflow::InitStepParam::MergeFrom(from.step_param());
  }
  if (from.has_random_normal_param()) {
    mutable_random_normal_param()->::deepflow::InitRandomNormalParam::MergeFrom(from.random_normal_param());
  }
  if (from.has_three_state_param()) {
    mutable_three_state_param()->::deepflow::InitThreeStateParam::MergeFrom(from.three_state_param());
  }
}

void InitParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitParam::CopyFrom(const InitParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.InitParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParam::IsInitialized() const {
  return true;
}

void InitParam::Swap(InitParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitParam::InternalSwap(InitParam* other) {
  name_.Swap(&other->name_);
  std::swap(tensor_param_, other->tensor_param_);
  std::swap(init_data_, other->init_data_);
  std::swap(fill_param_, other->fill_param_);
  std::swap(index_fill_param_, other->index_fill_param_);
  std::swap(random_uniform_param_, other->random_uniform_param_);
  std::swap(step_param_, other->step_param_);
  std::swap(random_normal_param_, other->random_normal_param_);
  std::swap(three_state_param_, other->three_state_param_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitParam

// string name = 1;
void InitParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InitParam::name() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.name)
  return name_.GetNoArena();
}
void InitParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.InitParam.name)
}
#if LANG_CXX11
void InitParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.InitParam.name)
}
#endif
void InitParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.InitParam.name)
}
void InitParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.InitParam.name)
}
::std::string* InitParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitParam::release_name() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.name)
}

// .deepflow.TensorParam tensor_param = 2;
bool InitParam::has_tensor_param() const {
  return this != internal_default_instance() && tensor_param_ != NULL;
}
void InitParam::clear_tensor_param() {
  if (GetArenaNoVirtual() == NULL && tensor_param_ != NULL) delete tensor_param_;
  tensor_param_ = NULL;
}
const ::deepflow::TensorParam& InitParam::tensor_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.tensor_param)
  return tensor_param_ != NULL ? *tensor_param_
                         : *::deepflow::TensorParam::internal_default_instance();
}
::deepflow::TensorParam* InitParam::mutable_tensor_param() {
  
  if (tensor_param_ == NULL) {
    tensor_param_ = new ::deepflow::TensorParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.tensor_param)
  return tensor_param_;
}
::deepflow::TensorParam* InitParam::release_tensor_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.tensor_param)
  
  ::deepflow::TensorParam* temp = tensor_param_;
  tensor_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_tensor_param(::deepflow::TensorParam* tensor_param) {
  delete tensor_param_;
  tensor_param_ = tensor_param;
  if (tensor_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.tensor_param)
}

// .deepflow.TensorData init_data = 3;
bool InitParam::has_init_data() const {
  return this != internal_default_instance() && init_data_ != NULL;
}
void InitParam::clear_init_data() {
  if (GetArenaNoVirtual() == NULL && init_data_ != NULL) delete init_data_;
  init_data_ = NULL;
}
const ::deepflow::TensorData& InitParam::init_data() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.init_data)
  return init_data_ != NULL ? *init_data_
                         : *::deepflow::TensorData::internal_default_instance();
}
::deepflow::TensorData* InitParam::mutable_init_data() {
  
  if (init_data_ == NULL) {
    init_data_ = new ::deepflow::TensorData;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.init_data)
  return init_data_;
}
::deepflow::TensorData* InitParam::release_init_data() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.init_data)
  
  ::deepflow::TensorData* temp = init_data_;
  init_data_ = NULL;
  return temp;
}
void InitParam::set_allocated_init_data(::deepflow::TensorData* init_data) {
  delete init_data_;
  init_data_ = init_data;
  if (init_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.init_data)
}

// .deepflow.InitFillParam fill_param = 4;
bool InitParam::has_fill_param() const {
  return this != internal_default_instance() && fill_param_ != NULL;
}
void InitParam::clear_fill_param() {
  if (GetArenaNoVirtual() == NULL && fill_param_ != NULL) delete fill_param_;
  fill_param_ = NULL;
}
const ::deepflow::InitFillParam& InitParam::fill_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.fill_param)
  return fill_param_ != NULL ? *fill_param_
                         : *::deepflow::InitFillParam::internal_default_instance();
}
::deepflow::InitFillParam* InitParam::mutable_fill_param() {
  
  if (fill_param_ == NULL) {
    fill_param_ = new ::deepflow::InitFillParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.fill_param)
  return fill_param_;
}
::deepflow::InitFillParam* InitParam::release_fill_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.fill_param)
  
  ::deepflow::InitFillParam* temp = fill_param_;
  fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_fill_param(::deepflow::InitFillParam* fill_param) {
  delete fill_param_;
  fill_param_ = fill_param;
  if (fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.fill_param)
}

// .deepflow.InitIndexFillParam index_fill_param = 5;
bool InitParam::has_index_fill_param() const {
  return this != internal_default_instance() && index_fill_param_ != NULL;
}
void InitParam::clear_index_fill_param() {
  if (GetArenaNoVirtual() == NULL && index_fill_param_ != NULL) delete index_fill_param_;
  index_fill_param_ = NULL;
}
const ::deepflow::InitIndexFillParam& InitParam::index_fill_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.index_fill_param)
  return index_fill_param_ != NULL ? *index_fill_param_
                         : *::deepflow::InitIndexFillParam::internal_default_instance();
}
::deepflow::InitIndexFillParam* InitParam::mutable_index_fill_param() {
  
  if (index_fill_param_ == NULL) {
    index_fill_param_ = new ::deepflow::InitIndexFillParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.index_fill_param)
  return index_fill_param_;
}
::deepflow::InitIndexFillParam* InitParam::release_index_fill_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.index_fill_param)
  
  ::deepflow::InitIndexFillParam* temp = index_fill_param_;
  index_fill_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_index_fill_param(::deepflow::InitIndexFillParam* index_fill_param) {
  delete index_fill_param_;
  index_fill_param_ = index_fill_param;
  if (index_fill_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.index_fill_param)
}

// .deepflow.InitRandomUniformParam random_uniform_param = 6;
bool InitParam::has_random_uniform_param() const {
  return this != internal_default_instance() && random_uniform_param_ != NULL;
}
void InitParam::clear_random_uniform_param() {
  if (GetArenaNoVirtual() == NULL && random_uniform_param_ != NULL) delete random_uniform_param_;
  random_uniform_param_ = NULL;
}
const ::deepflow::InitRandomUniformParam& InitParam::random_uniform_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.random_uniform_param)
  return random_uniform_param_ != NULL ? *random_uniform_param_
                         : *::deepflow::InitRandomUniformParam::internal_default_instance();
}
::deepflow::InitRandomUniformParam* InitParam::mutable_random_uniform_param() {
  
  if (random_uniform_param_ == NULL) {
    random_uniform_param_ = new ::deepflow::InitRandomUniformParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.random_uniform_param)
  return random_uniform_param_;
}
::deepflow::InitRandomUniformParam* InitParam::release_random_uniform_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.random_uniform_param)
  
  ::deepflow::InitRandomUniformParam* temp = random_uniform_param_;
  random_uniform_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_random_uniform_param(::deepflow::InitRandomUniformParam* random_uniform_param) {
  delete random_uniform_param_;
  random_uniform_param_ = random_uniform_param;
  if (random_uniform_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.random_uniform_param)
}

// .deepflow.InitStepParam step_param = 7;
bool InitParam::has_step_param() const {
  return this != internal_default_instance() && step_param_ != NULL;
}
void InitParam::clear_step_param() {
  if (GetArenaNoVirtual() == NULL && step_param_ != NULL) delete step_param_;
  step_param_ = NULL;
}
const ::deepflow::InitStepParam& InitParam::step_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.step_param)
  return step_param_ != NULL ? *step_param_
                         : *::deepflow::InitStepParam::internal_default_instance();
}
::deepflow::InitStepParam* InitParam::mutable_step_param() {
  
  if (step_param_ == NULL) {
    step_param_ = new ::deepflow::InitStepParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.step_param)
  return step_param_;
}
::deepflow::InitStepParam* InitParam::release_step_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.step_param)
  
  ::deepflow::InitStepParam* temp = step_param_;
  step_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_step_param(::deepflow::InitStepParam* step_param) {
  delete step_param_;
  step_param_ = step_param;
  if (step_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.step_param)
}

// .deepflow.InitRandomNormalParam random_normal_param = 8;
bool InitParam::has_random_normal_param() const {
  return this != internal_default_instance() && random_normal_param_ != NULL;
}
void InitParam::clear_random_normal_param() {
  if (GetArenaNoVirtual() == NULL && random_normal_param_ != NULL) delete random_normal_param_;
  random_normal_param_ = NULL;
}
const ::deepflow::InitRandomNormalParam& InitParam::random_normal_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.random_normal_param)
  return random_normal_param_ != NULL ? *random_normal_param_
                         : *::deepflow::InitRandomNormalParam::internal_default_instance();
}
::deepflow::InitRandomNormalParam* InitParam::mutable_random_normal_param() {
  
  if (random_normal_param_ == NULL) {
    random_normal_param_ = new ::deepflow::InitRandomNormalParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.random_normal_param)
  return random_normal_param_;
}
::deepflow::InitRandomNormalParam* InitParam::release_random_normal_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.random_normal_param)
  
  ::deepflow::InitRandomNormalParam* temp = random_normal_param_;
  random_normal_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_random_normal_param(::deepflow::InitRandomNormalParam* random_normal_param) {
  delete random_normal_param_;
  random_normal_param_ = random_normal_param;
  if (random_normal_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.random_normal_param)
}

// .deepflow.InitThreeStateParam three_state_param = 9;
bool InitParam::has_three_state_param() const {
  return this != internal_default_instance() && three_state_param_ != NULL;
}
void InitParam::clear_three_state_param() {
  if (GetArenaNoVirtual() == NULL && three_state_param_ != NULL) delete three_state_param_;
  three_state_param_ = NULL;
}
const ::deepflow::InitThreeStateParam& InitParam::three_state_param() const {
  // @@protoc_insertion_point(field_get:deepflow.InitParam.three_state_param)
  return three_state_param_ != NULL ? *three_state_param_
                         : *::deepflow::InitThreeStateParam::internal_default_instance();
}
::deepflow::InitThreeStateParam* InitParam::mutable_three_state_param() {
  
  if (three_state_param_ == NULL) {
    three_state_param_ = new ::deepflow::InitThreeStateParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.InitParam.three_state_param)
  return three_state_param_;
}
::deepflow::InitThreeStateParam* InitParam::release_three_state_param() {
  // @@protoc_insertion_point(field_release:deepflow.InitParam.three_state_param)
  
  ::deepflow::InitThreeStateParam* temp = three_state_param_;
  three_state_param_ = NULL;
  return temp;
}
void InitParam::set_allocated_three_state_param(::deepflow::InitThreeStateParam* three_state_param) {
  delete three_state_param_;
  three_state_param_ = three_state_param;
  if (three_state_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.InitParam.three_state_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SGDSolverParam::kLearningRateFieldNumber;
const int SGDSolverParam::kMomentumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SGDSolverParam::SGDSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SGDSolverParam)
}
SGDSolverParam::SGDSolverParam(const SGDSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
  // @@protoc_insertion_point(copy_constructor:deepflow.SGDSolverParam)
}

void SGDSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
  _cached_size_ = 0;
}

SGDSolverParam::~SGDSolverParam() {
  // @@protoc_insertion_point(destructor:deepflow.SGDSolverParam)
  SharedDtor();
}

void SGDSolverParam::SharedDtor() {
}

void SGDSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SGDSolverParam& SGDSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SGDSolverParam* SGDSolverParam::New(::google::protobuf::Arena* arena) const {
  SGDSolverParam* n = new SGDSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SGDSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SGDSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&momentum_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(momentum_));
}

bool SGDSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SGDSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SGDSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SGDSolverParam)
  return false;
#undef DO_
}

void SGDSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SGDSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.SGDSolverParam)
}

::google::protobuf::uint8* SGDSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SGDSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SGDSolverParam)
  return target;
}

size_t SGDSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SGDSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SGDSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SGDSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SGDSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SGDSolverParam)
    MergeFrom(*source);
  }
}

void SGDSolverParam::MergeFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SGDSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
}

void SGDSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDSolverParam::CopyFrom(const SGDSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SGDSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDSolverParam::IsInitialized() const {
  return true;
}

void SGDSolverParam::Swap(SGDSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SGDSolverParam::InternalSwap(SGDSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SGDSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SGDSolverParam

// float learning_rate = 1;
void SGDSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float SGDSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:deepflow.SGDSolverParam.learning_rate)
  return learning_rate_;
}
void SGDSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SGDSolverParam.learning_rate)
}

// float momentum = 2;
void SGDSolverParam::clear_momentum() {
  momentum_ = 0;
}
float SGDSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:deepflow.SGDSolverParam.momentum)
  return momentum_;
}
void SGDSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:deepflow.SGDSolverParam.momentum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GainSolverParam::kLearningRateFieldNumber;
const int GainSolverParam::kMomentumFieldNumber;
const int GainSolverParam::kMaxGainFieldNumber;
const int GainSolverParam::kMinGainFieldNumber;
const int GainSolverParam::kGainPlusFieldNumber;
const int GainSolverParam::kGainMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GainSolverParam::GainSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.GainSolverParam)
}
GainSolverParam::GainSolverParam(const GainSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
  // @@protoc_insertion_point(copy_constructor:deepflow.GainSolverParam)
}

void GainSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
  _cached_size_ = 0;
}

GainSolverParam::~GainSolverParam() {
  // @@protoc_insertion_point(destructor:deepflow.GainSolverParam)
  SharedDtor();
}

void GainSolverParam::SharedDtor() {
}

void GainSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GainSolverParam& GainSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

GainSolverParam* GainSolverParam::New(::google::protobuf::Arena* arena) const {
  GainSolverParam* n = new GainSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GainSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.GainSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&gain_mult_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(gain_mult_));
}

bool GainSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.GainSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_plus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_plus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain_mult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.GainSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.GainSolverParam)
  return false;
#undef DO_
}

void GainSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.GainSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_gain(), output);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_gain(), output);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gain_plus(), output);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gain_mult(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.GainSolverParam)
}

::google::protobuf::uint8* GainSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.GainSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_gain(), target);
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_gain(), target);
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gain_plus(), target);
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gain_mult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.GainSolverParam)
  return target;
}

size_t GainSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.GainSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float max_gain = 3;
  if (this->max_gain() != 0) {
    total_size += 1 + 4;
  }

  // float min_gain = 4;
  if (this->min_gain() != 0) {
    total_size += 1 + 4;
  }

  // float gain_plus = 5;
  if (this->gain_plus() != 0) {
    total_size += 1 + 4;
  }

  // float gain_mult = 6;
  if (this->gain_mult() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GainSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GainSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.GainSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.GainSolverParam)
    MergeFrom(*source);
  }
}

void GainSolverParam::MergeFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.GainSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.max_gain() != 0) {
    set_max_gain(from.max_gain());
  }
  if (from.min_gain() != 0) {
    set_min_gain(from.min_gain());
  }
  if (from.gain_plus() != 0) {
    set_gain_plus(from.gain_plus());
  }
  if (from.gain_mult() != 0) {
    set_gain_mult(from.gain_mult());
  }
}

void GainSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainSolverParam::CopyFrom(const GainSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.GainSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainSolverParam::IsInitialized() const {
  return true;
}

void GainSolverParam::Swap(GainSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GainSolverParam::InternalSwap(GainSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(max_gain_, other->max_gain_);
  std::swap(min_gain_, other->min_gain_);
  std::swap(gain_plus_, other->gain_plus_);
  std::swap(gain_mult_, other->gain_mult_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GainSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GainSolverParam

// float learning_rate = 1;
void GainSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float GainSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.learning_rate)
  return learning_rate_;
}
void GainSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.learning_rate)
}

// float momentum = 2;
void GainSolverParam::clear_momentum() {
  momentum_ = 0;
}
float GainSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.momentum)
  return momentum_;
}
void GainSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.momentum)
}

// float max_gain = 3;
void GainSolverParam::clear_max_gain() {
  max_gain_ = 0;
}
float GainSolverParam::max_gain() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.max_gain)
  return max_gain_;
}
void GainSolverParam::set_max_gain(float value) {
  
  max_gain_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.max_gain)
}

// float min_gain = 4;
void GainSolverParam::clear_min_gain() {
  min_gain_ = 0;
}
float GainSolverParam::min_gain() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.min_gain)
  return min_gain_;
}
void GainSolverParam::set_min_gain(float value) {
  
  min_gain_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.min_gain)
}

// float gain_plus = 5;
void GainSolverParam::clear_gain_plus() {
  gain_plus_ = 0;
}
float GainSolverParam::gain_plus() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.gain_plus)
  return gain_plus_;
}
void GainSolverParam::set_gain_plus(float value) {
  
  gain_plus_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.gain_plus)
}

// float gain_mult = 6;
void GainSolverParam::clear_gain_mult() {
  gain_mult_ = 0;
}
float GainSolverParam::gain_mult() const {
  // @@protoc_insertion_point(field_get:deepflow.GainSolverParam.gain_mult)
  return gain_mult_;
}
void GainSolverParam::set_gain_mult(float value) {
  
  gain_mult_ = value;
  // @@protoc_insertion_point(field_set:deepflow.GainSolverParam.gain_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdaDeltaSolverParam::kLearningRateFieldNumber;
const int AdaDeltaSolverParam::kMomentumFieldNumber;
const int AdaDeltaSolverParam::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdaDeltaSolverParam::AdaDeltaSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.AdaDeltaSolverParam)
}
AdaDeltaSolverParam::AdaDeltaSolverParam(const AdaDeltaSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:deepflow.AdaDeltaSolverParam)
}

void AdaDeltaSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
  _cached_size_ = 0;
}

AdaDeltaSolverParam::~AdaDeltaSolverParam() {
  // @@protoc_insertion_point(destructor:deepflow.AdaDeltaSolverParam)
  SharedDtor();
}

void AdaDeltaSolverParam::SharedDtor() {
}

void AdaDeltaSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaDeltaSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdaDeltaSolverParam& AdaDeltaSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdaDeltaSolverParam* AdaDeltaSolverParam::New(::google::protobuf::Arena* arena) const {
  AdaDeltaSolverParam* n = new AdaDeltaSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdaDeltaSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.AdaDeltaSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(delta_));
}

bool AdaDeltaSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.AdaDeltaSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float momentum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.AdaDeltaSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.AdaDeltaSolverParam)
  return false;
#undef DO_
}

void AdaDeltaSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.AdaDeltaSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->momentum(), output);
  }

  // float delta = 3;
  if (this->delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delta(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.AdaDeltaSolverParam)
}

::google::protobuf::uint8* AdaDeltaSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.AdaDeltaSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->momentum(), target);
  }

  // float delta = 3;
  if (this->delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->delta(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.AdaDeltaSolverParam)
  return target;
}

size_t AdaDeltaSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.AdaDeltaSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float momentum = 2;
  if (this->momentum() != 0) {
    total_size += 1 + 4;
  }

  // float delta = 3;
  if (this->delta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaDeltaSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.AdaDeltaSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaDeltaSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdaDeltaSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.AdaDeltaSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.AdaDeltaSolverParam)
    MergeFrom(*source);
  }
}

void AdaDeltaSolverParam::MergeFrom(const AdaDeltaSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.AdaDeltaSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
}

void AdaDeltaSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.AdaDeltaSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaDeltaSolverParam::CopyFrom(const AdaDeltaSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.AdaDeltaSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaDeltaSolverParam::IsInitialized() const {
  return true;
}

void AdaDeltaSolverParam::Swap(AdaDeltaSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdaDeltaSolverParam::InternalSwap(AdaDeltaSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(delta_, other->delta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdaDeltaSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdaDeltaSolverParam

// float learning_rate = 1;
void AdaDeltaSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float AdaDeltaSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:deepflow.AdaDeltaSolverParam.learning_rate)
  return learning_rate_;
}
void AdaDeltaSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdaDeltaSolverParam.learning_rate)
}

// float momentum = 2;
void AdaDeltaSolverParam::clear_momentum() {
  momentum_ = 0;
}
float AdaDeltaSolverParam::momentum() const {
  // @@protoc_insertion_point(field_get:deepflow.AdaDeltaSolverParam.momentum)
  return momentum_;
}
void AdaDeltaSolverParam::set_momentum(float value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdaDeltaSolverParam.momentum)
}

// float delta = 3;
void AdaDeltaSolverParam::clear_delta() {
  delta_ = 0;
}
float AdaDeltaSolverParam::delta() const {
  // @@protoc_insertion_point(field_get:deepflow.AdaDeltaSolverParam.delta)
  return delta_;
}
void AdaDeltaSolverParam::set_delta(float value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdaDeltaSolverParam.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdamSolverParam::kLearningRateFieldNumber;
const int AdamSolverParam::kBeta1FieldNumber;
const int AdamSolverParam::kBeta2FieldNumber;
const int AdamSolverParam::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdamSolverParam::AdamSolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.AdamSolverParam)
}
AdamSolverParam::AdamSolverParam(const AdamSolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&learning_rate_, &from.learning_rate_,
    reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:deepflow.AdamSolverParam)
}

void AdamSolverParam::SharedCtor() {
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
  _cached_size_ = 0;
}

AdamSolverParam::~AdamSolverParam() {
  // @@protoc_insertion_point(destructor:deepflow.AdamSolverParam)
  SharedDtor();
}

void AdamSolverParam::SharedDtor() {
}

void AdamSolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdamSolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdamSolverParam& AdamSolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdamSolverParam* AdamSolverParam::New(::google::protobuf::Arena* arena) const {
  AdamSolverParam* n = new AdamSolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdamSolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.AdamSolverParam)
  ::memset(&learning_rate_, 0, reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&learning_rate_) + sizeof(eps_));
}

bool AdamSolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.AdamSolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float learning_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float beta2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.AdamSolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.AdamSolverParam)
  return false;
#undef DO_
}

void AdamSolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.AdamSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->beta1(), output);
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta2(), output);
  }

  // float eps = 4;
  if (this->eps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->eps(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.AdamSolverParam)
}

::google::protobuf::uint8* AdamSolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.AdamSolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->beta1(), target);
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta2(), target);
  }

  // float eps = 4;
  if (this->eps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->eps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.AdamSolverParam)
  return target;
}

size_t AdamSolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.AdamSolverParam)
  size_t total_size = 0;

  // float learning_rate = 1;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // float beta1 = 2;
  if (this->beta1() != 0) {
    total_size += 1 + 4;
  }

  // float beta2 = 3;
  if (this->beta2() != 0) {
    total_size += 1 + 4;
  }

  // float eps = 4;
  if (this->eps() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdamSolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.AdamSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdamSolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdamSolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.AdamSolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.AdamSolverParam)
    MergeFrom(*source);
  }
}

void AdamSolverParam::MergeFrom(const AdamSolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.AdamSolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.beta1() != 0) {
    set_beta1(from.beta1());
  }
  if (from.beta2() != 0) {
    set_beta2(from.beta2());
  }
  if (from.eps() != 0) {
    set_eps(from.eps());
  }
}

void AdamSolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.AdamSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdamSolverParam::CopyFrom(const AdamSolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.AdamSolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdamSolverParam::IsInitialized() const {
  return true;
}

void AdamSolverParam::Swap(AdamSolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdamSolverParam::InternalSwap(AdamSolverParam* other) {
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(beta1_, other->beta1_);
  std::swap(beta2_, other->beta2_);
  std::swap(eps_, other->eps_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdamSolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdamSolverParam

// float learning_rate = 1;
void AdamSolverParam::clear_learning_rate() {
  learning_rate_ = 0;
}
float AdamSolverParam::learning_rate() const {
  // @@protoc_insertion_point(field_get:deepflow.AdamSolverParam.learning_rate)
  return learning_rate_;
}
void AdamSolverParam::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdamSolverParam.learning_rate)
}

// float beta1 = 2;
void AdamSolverParam::clear_beta1() {
  beta1_ = 0;
}
float AdamSolverParam::beta1() const {
  // @@protoc_insertion_point(field_get:deepflow.AdamSolverParam.beta1)
  return beta1_;
}
void AdamSolverParam::set_beta1(float value) {
  
  beta1_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdamSolverParam.beta1)
}

// float beta2 = 3;
void AdamSolverParam::clear_beta2() {
  beta2_ = 0;
}
float AdamSolverParam::beta2() const {
  // @@protoc_insertion_point(field_get:deepflow.AdamSolverParam.beta2)
  return beta2_;
}
void AdamSolverParam::set_beta2(float value) {
  
  beta2_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdamSolverParam.beta2)
}

// float eps = 4;
void AdamSolverParam::clear_eps() {
  eps_ = 0;
}
float AdamSolverParam::eps() const {
  // @@protoc_insertion_point(field_get:deepflow.AdamSolverParam.eps)
  return eps_;
}
void AdamSolverParam::set_eps(float value) {
  
  eps_ = value;
  // @@protoc_insertion_point(field_set:deepflow.AdamSolverParam.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParam::kNameFieldNumber;
const int SolverParam::kEnableInputFieldNumber;
const int SolverParam::kSgdSolverFieldNumber;
const int SolverParam::kGainSolverFieldNumber;
const int SolverParam::kAdamSolverFieldNumber;
const int SolverParam::kAdadeltaSolverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParam::SolverParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.SolverParam)
}
SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  enable_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enable_input().size() > 0) {
    enable_input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_input_);
  }
  if (from.has_sgd_solver()) {
    sgd_solver_ = new ::deepflow::SGDSolverParam(*from.sgd_solver_);
  } else {
    sgd_solver_ = NULL;
  }
  if (from.has_gain_solver()) {
    gain_solver_ = new ::deepflow::GainSolverParam(*from.gain_solver_);
  } else {
    gain_solver_ = NULL;
  }
  if (from.has_adam_solver()) {
    adam_solver_ = new ::deepflow::AdamSolverParam(*from.adam_solver_);
  } else {
    adam_solver_ = NULL;
  }
  if (from.has_adadelta_solver()) {
    adadelta_solver_ = new ::deepflow::AdaDeltaSolverParam(*from.adadelta_solver_);
  } else {
    adadelta_solver_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:deepflow.SolverParam)
}

void SolverParam::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sgd_solver_, 0, reinterpret_cast<char*>(&adadelta_solver_) -
    reinterpret_cast<char*>(&sgd_solver_) + sizeof(adadelta_solver_));
  _cached_size_ = 0;
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:deepflow.SolverParam)
  SharedDtor();
}

void SolverParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sgd_solver_;
  }
  if (this != internal_default_instance()) {
    delete gain_solver_;
  }
  if (this != internal_default_instance()) {
    delete adam_solver_;
  }
  if (this != internal_default_instance()) {
    delete adadelta_solver_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverParam& SolverParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParam* SolverParam::New(::google::protobuf::Arena* arena) const {
  SolverParam* n = new SolverParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.SolverParam)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) {
    delete sgd_solver_;
  }
  sgd_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) {
    delete gain_solver_;
  }
  gain_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && adam_solver_ != NULL) {
    delete adam_solver_;
  }
  adam_solver_ = NULL;
  if (GetArenaNoVirtual() == NULL && adadelta_solver_ != NULL) {
    delete adadelta_solver_;
  }
  adadelta_solver_ = NULL;
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.SolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.SolverParam.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enable_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enable_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enable_input().data(), this->enable_input().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.SolverParam.enable_input"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.SGDSolverParam sgd_solver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.GainSolverParam gain_solver = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.AdamSolverParam adam_solver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adam_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.AdaDeltaSolverParam adadelta_solver = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adadelta_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.SolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.SolverParam)
  return false;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.SolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SolverParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string enable_input = 2;
  if (this->enable_input().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_input().data(), this->enable_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SolverParam.enable_input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enable_input(), output);
  }

  // .deepflow.SGDSolverParam sgd_solver = 3;
  if (this->has_sgd_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sgd_solver_, output);
  }

  // .deepflow.GainSolverParam gain_solver = 4;
  if (this->has_gain_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gain_solver_, output);
  }

  // .deepflow.AdamSolverParam adam_solver = 5;
  if (this->has_adam_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->adam_solver_, output);
  }

  // .deepflow.AdaDeltaSolverParam adadelta_solver = 6;
  if (this->has_adadelta_solver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adadelta_solver_, output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.SolverParam)
}

::google::protobuf::uint8* SolverParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.SolverParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SolverParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string enable_input = 2;
  if (this->enable_input().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_input().data(), this->enable_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.SolverParam.enable_input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enable_input(), target);
  }

  // .deepflow.SGDSolverParam sgd_solver = 3;
  if (this->has_sgd_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sgd_solver_, deterministic, target);
  }

  // .deepflow.GainSolverParam gain_solver = 4;
  if (this->has_gain_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gain_solver_, deterministic, target);
  }

  // .deepflow.AdamSolverParam adam_solver = 5;
  if (this->has_adam_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->adam_solver_, deterministic, target);
  }

  // .deepflow.AdaDeltaSolverParam adadelta_solver = 6;
  if (this->has_adadelta_solver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->adadelta_solver_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.SolverParam)
  return target;
}

size_t SolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.SolverParam)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string enable_input = 2;
  if (this->enable_input().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enable_input());
  }

  // .deepflow.SGDSolverParam sgd_solver = 3;
  if (this->has_sgd_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sgd_solver_);
  }

  // .deepflow.GainSolverParam gain_solver = 4;
  if (this->has_gain_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gain_solver_);
  }

  // .deepflow.AdamSolverParam adam_solver = 5;
  if (this->has_adam_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adam_solver_);
  }

  // .deepflow.AdaDeltaSolverParam adadelta_solver = 6;
  if (this->has_adadelta_solver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adadelta_solver_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.SolverParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.SolverParam)
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.enable_input().size() > 0) {

    enable_input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enable_input_);
  }
  if (from.has_sgd_solver()) {
    mutable_sgd_solver()->::deepflow::SGDSolverParam::MergeFrom(from.sgd_solver());
  }
  if (from.has_gain_solver()) {
    mutable_gain_solver()->::deepflow::GainSolverParam::MergeFrom(from.gain_solver());
  }
  if (from.has_adam_solver()) {
    mutable_adam_solver()->::deepflow::AdamSolverParam::MergeFrom(from.adam_solver());
  }
  if (from.has_adadelta_solver()) {
    mutable_adadelta_solver()->::deepflow::AdaDeltaSolverParam::MergeFrom(from.adadelta_solver());
  }
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParam::InternalSwap(SolverParam* other) {
  name_.Swap(&other->name_);
  enable_input_.Swap(&other->enable_input_);
  std::swap(sgd_solver_, other->sgd_solver_);
  std::swap(gain_solver_, other->gain_solver_);
  std::swap(adam_solver_, other->adam_solver_);
  std::swap(adadelta_solver_, other->adadelta_solver_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParam

// string name = 1;
void SolverParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SolverParam::name() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.name)
  return name_.GetNoArena();
}
void SolverParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.SolverParam.name)
}
#if LANG_CXX11
void SolverParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.SolverParam.name)
}
#endif
void SolverParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.SolverParam.name)
}
void SolverParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.SolverParam.name)
}
::std::string* SolverParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParam::release_name() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.name)
}

// string enable_input = 2;
void SolverParam::clear_enable_input() {
  enable_input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SolverParam::enable_input() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.enable_input)
  return enable_input_.GetNoArena();
}
void SolverParam::set_enable_input(const ::std::string& value) {
  
  enable_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.SolverParam.enable_input)
}
#if LANG_CXX11
void SolverParam::set_enable_input(::std::string&& value) {
  
  enable_input_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.SolverParam.enable_input)
}
#endif
void SolverParam::set_enable_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enable_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.SolverParam.enable_input)
}
void SolverParam::set_enable_input(const char* value, size_t size) {
  
  enable_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.SolverParam.enable_input)
}
::std::string* SolverParam::mutable_enable_input() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.enable_input)
  return enable_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParam::release_enable_input() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.enable_input)
  
  return enable_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParam::set_allocated_enable_input(::std::string* enable_input) {
  if (enable_input != NULL) {
    
  } else {
    
  }
  enable_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enable_input);
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.enable_input)
}

// .deepflow.SGDSolverParam sgd_solver = 3;
bool SolverParam::has_sgd_solver() const {
  return this != internal_default_instance() && sgd_solver_ != NULL;
}
void SolverParam::clear_sgd_solver() {
  if (GetArenaNoVirtual() == NULL && sgd_solver_ != NULL) delete sgd_solver_;
  sgd_solver_ = NULL;
}
const ::deepflow::SGDSolverParam& SolverParam::sgd_solver() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.sgd_solver)
  return sgd_solver_ != NULL ? *sgd_solver_
                         : *::deepflow::SGDSolverParam::internal_default_instance();
}
::deepflow::SGDSolverParam* SolverParam::mutable_sgd_solver() {
  
  if (sgd_solver_ == NULL) {
    sgd_solver_ = new ::deepflow::SGDSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.sgd_solver)
  return sgd_solver_;
}
::deepflow::SGDSolverParam* SolverParam::release_sgd_solver() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.sgd_solver)
  
  ::deepflow::SGDSolverParam* temp = sgd_solver_;
  sgd_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_sgd_solver(::deepflow::SGDSolverParam* sgd_solver) {
  delete sgd_solver_;
  sgd_solver_ = sgd_solver;
  if (sgd_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.sgd_solver)
}

// .deepflow.GainSolverParam gain_solver = 4;
bool SolverParam::has_gain_solver() const {
  return this != internal_default_instance() && gain_solver_ != NULL;
}
void SolverParam::clear_gain_solver() {
  if (GetArenaNoVirtual() == NULL && gain_solver_ != NULL) delete gain_solver_;
  gain_solver_ = NULL;
}
const ::deepflow::GainSolverParam& SolverParam::gain_solver() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.gain_solver)
  return gain_solver_ != NULL ? *gain_solver_
                         : *::deepflow::GainSolverParam::internal_default_instance();
}
::deepflow::GainSolverParam* SolverParam::mutable_gain_solver() {
  
  if (gain_solver_ == NULL) {
    gain_solver_ = new ::deepflow::GainSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.gain_solver)
  return gain_solver_;
}
::deepflow::GainSolverParam* SolverParam::release_gain_solver() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.gain_solver)
  
  ::deepflow::GainSolverParam* temp = gain_solver_;
  gain_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_gain_solver(::deepflow::GainSolverParam* gain_solver) {
  delete gain_solver_;
  gain_solver_ = gain_solver;
  if (gain_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.gain_solver)
}

// .deepflow.AdamSolverParam adam_solver = 5;
bool SolverParam::has_adam_solver() const {
  return this != internal_default_instance() && adam_solver_ != NULL;
}
void SolverParam::clear_adam_solver() {
  if (GetArenaNoVirtual() == NULL && adam_solver_ != NULL) delete adam_solver_;
  adam_solver_ = NULL;
}
const ::deepflow::AdamSolverParam& SolverParam::adam_solver() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.adam_solver)
  return adam_solver_ != NULL ? *adam_solver_
                         : *::deepflow::AdamSolverParam::internal_default_instance();
}
::deepflow::AdamSolverParam* SolverParam::mutable_adam_solver() {
  
  if (adam_solver_ == NULL) {
    adam_solver_ = new ::deepflow::AdamSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.adam_solver)
  return adam_solver_;
}
::deepflow::AdamSolverParam* SolverParam::release_adam_solver() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.adam_solver)
  
  ::deepflow::AdamSolverParam* temp = adam_solver_;
  adam_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_adam_solver(::deepflow::AdamSolverParam* adam_solver) {
  delete adam_solver_;
  adam_solver_ = adam_solver;
  if (adam_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.adam_solver)
}

// .deepflow.AdaDeltaSolverParam adadelta_solver = 6;
bool SolverParam::has_adadelta_solver() const {
  return this != internal_default_instance() && adadelta_solver_ != NULL;
}
void SolverParam::clear_adadelta_solver() {
  if (GetArenaNoVirtual() == NULL && adadelta_solver_ != NULL) delete adadelta_solver_;
  adadelta_solver_ = NULL;
}
const ::deepflow::AdaDeltaSolverParam& SolverParam::adadelta_solver() const {
  // @@protoc_insertion_point(field_get:deepflow.SolverParam.adadelta_solver)
  return adadelta_solver_ != NULL ? *adadelta_solver_
                         : *::deepflow::AdaDeltaSolverParam::internal_default_instance();
}
::deepflow::AdaDeltaSolverParam* SolverParam::mutable_adadelta_solver() {
  
  if (adadelta_solver_ == NULL) {
    adadelta_solver_ = new ::deepflow::AdaDeltaSolverParam;
  }
  // @@protoc_insertion_point(field_mutable:deepflow.SolverParam.adadelta_solver)
  return adadelta_solver_;
}
::deepflow::AdaDeltaSolverParam* SolverParam::release_adadelta_solver() {
  // @@protoc_insertion_point(field_release:deepflow.SolverParam.adadelta_solver)
  
  ::deepflow::AdaDeltaSolverParam* temp = adadelta_solver_;
  adadelta_solver_ = NULL;
  return temp;
}
void SolverParam::set_allocated_adadelta_solver(::deepflow::AdaDeltaSolverParam* adadelta_solver) {
  delete adadelta_solver_;
  adadelta_solver_ = adadelta_solver;
  if (adadelta_solver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:deepflow.SolverParam.adadelta_solver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhaseParam::kPhaseFieldNumber;
const int PhaseParam::kBehaviourFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhaseParam::PhaseParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.PhaseParam)
}
PhaseParam::PhaseParam(const PhaseParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phase().size() > 0) {
    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  behaviour_ = from.behaviour_;
  // @@protoc_insertion_point(copy_constructor:deepflow.PhaseParam)
}

void PhaseParam::SharedCtor() {
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  behaviour_ = 0;
  _cached_size_ = 0;
}

PhaseParam::~PhaseParam() {
  // @@protoc_insertion_point(destructor:deepflow.PhaseParam)
  SharedDtor();
}

void PhaseParam::SharedDtor() {
  phase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhaseParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhaseParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhaseParam& PhaseParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhaseParam* PhaseParam::New(::google::protobuf::Arena* arena) const {
  PhaseParam* n = new PhaseParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhaseParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.PhaseParam)
  phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  behaviour_ = 0;
}

bool PhaseParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.PhaseParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phase().data(), this->phase().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "deepflow.PhaseParam.phase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .deepflow.PhaseParam.PhaseBehaviour behaviour = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behaviour(static_cast< ::deepflow::PhaseParam_PhaseBehaviour >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.PhaseParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.PhaseParam)
  return false;
#undef DO_
}

void PhaseParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.PhaseParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phase = 1;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), this->phase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PhaseParam.phase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phase(), output);
  }

  // .deepflow.PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->behaviour(), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.PhaseParam)
}

::google::protobuf::uint8* PhaseParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.PhaseParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phase = 1;
  if (this->phase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phase().data(), this->phase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "deepflow.PhaseParam.phase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phase(), target);
  }

  // .deepflow.PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->behaviour(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.PhaseParam)
  return target;
}

size_t PhaseParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.PhaseParam)
  size_t total_size = 0;

  // string phase = 1;
  if (this->phase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phase());
  }

  // .deepflow.PhaseParam.PhaseBehaviour behaviour = 2;
  if (this->behaviour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->behaviour());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhaseParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.PhaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PhaseParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhaseParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.PhaseParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.PhaseParam)
    MergeFrom(*source);
  }
}

void PhaseParam::MergeFrom(const PhaseParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.PhaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phase().size() > 0) {

    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  if (from.behaviour() != 0) {
    set_behaviour(from.behaviour());
  }
}

void PhaseParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.PhaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhaseParam::CopyFrom(const PhaseParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.PhaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhaseParam::IsInitialized() const {
  return true;
}

void PhaseParam::Swap(PhaseParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhaseParam::InternalSwap(PhaseParam* other) {
  phase_.Swap(&other->phase_);
  std::swap(behaviour_, other->behaviour_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhaseParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhaseParam

// string phase = 1;
void PhaseParam::clear_phase() {
  phase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhaseParam::phase() const {
  // @@protoc_insertion_point(field_get:deepflow.PhaseParam.phase)
  return phase_.GetNoArena();
}
void PhaseParam::set_phase(const ::std::string& value) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:deepflow.PhaseParam.phase)
}
#if LANG_CXX11
void PhaseParam::set_phase(::std::string&& value) {
  
  phase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:deepflow.PhaseParam.phase)
}
#endif
void PhaseParam::set_phase(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:deepflow.PhaseParam.phase)
}
void PhaseParam::set_phase(const char* value, size_t size) {
  
  phase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:deepflow.PhaseParam.phase)
}
::std::string* PhaseParam::mutable_phase() {
  
  // @@protoc_insertion_point(field_mutable:deepflow.PhaseParam.phase)
  return phase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhaseParam::release_phase() {
  // @@protoc_insertion_point(field_release:deepflow.PhaseParam.phase)
  
  return phase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhaseParam::set_allocated_phase(::std::string* phase) {
  if (phase != NULL) {
    
  } else {
    
  }
  phase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phase);
  // @@protoc_insertion_point(field_set_allocated:deepflow.PhaseParam.phase)
}

// .deepflow.PhaseParam.PhaseBehaviour behaviour = 2;
void PhaseParam::clear_behaviour() {
  behaviour_ = 0;
}
::deepflow::PhaseParam_PhaseBehaviour PhaseParam::behaviour() const {
  // @@protoc_insertion_point(field_get:deepflow.PhaseParam.behaviour)
  return static_cast< ::deepflow::PhaseParam_PhaseBehaviour >(behaviour_);
}
void PhaseParam::set_behaviour(::deepflow::PhaseParam_PhaseBehaviour value) {
  
  behaviour_ = value;
  // @@protoc_insertion_point(field_set:deepflow.PhaseParam.behaviour)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockParam::kNodeFieldNumber;
const int BlockParam::kSolverFieldNumber;
const int BlockParam::kPhaseFieldNumber;
const int BlockParam::kInitializerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockParam::BlockParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_deepflow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:deepflow.BlockParam)
}
BlockParam::BlockParam(const BlockParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_(from.node_),
      solver_(from.solver_),
      phase_(from.phase_),
      initializer_(from.initializer_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:deepflow.BlockParam)
}

void BlockParam::SharedCtor() {
  _cached_size_ = 0;
}

BlockParam::~BlockParam() {
  // @@protoc_insertion_point(destructor:deepflow.BlockParam)
  SharedDtor();
}

void BlockParam::SharedDtor() {
}

void BlockParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockParam::descriptor() {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockParam& BlockParam::default_instance() {
  protobuf_deepflow_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockParam* BlockParam::New(::google::protobuf::Arena* arena) const {
  BlockParam* n = new BlockParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockParam::Clear() {
// @@protoc_insertion_point(message_clear_start:deepflow.BlockParam)
  node_.Clear();
  solver_.Clear();
  phase_.Clear();
  initializer_.Clear();
}

bool BlockParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:deepflow.BlockParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .deepflow.NodeParam node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .deepflow.SolverParam solver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .deepflow.PhaseParam phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .deepflow.InitParam initializer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initializer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:deepflow.BlockParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:deepflow.BlockParam)
  return false;
#undef DO_
}

void BlockParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:deepflow.BlockParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .deepflow.NodeParam node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // repeated .deepflow.SolverParam solver = 2;
  for (unsigned int i = 0, n = this->solver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->solver(i), output);
  }

  // repeated .deepflow.PhaseParam phase = 3;
  for (unsigned int i = 0, n = this->phase_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phase(i), output);
  }

  // repeated .deepflow.InitParam initializer = 4;
  for (unsigned int i = 0, n = this->initializer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initializer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:deepflow.BlockParam)
}

::google::protobuf::uint8* BlockParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:deepflow.BlockParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .deepflow.NodeParam node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(i), deterministic, target);
  }

  // repeated .deepflow.SolverParam solver = 2;
  for (unsigned int i = 0, n = this->solver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->solver(i), deterministic, target);
  }

  // repeated .deepflow.PhaseParam phase = 3;
  for (unsigned int i = 0, n = this->phase_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->phase(i), deterministic, target);
  }

  // repeated .deepflow.InitParam initializer = 4;
  for (unsigned int i = 0, n = this->initializer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->initializer(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:deepflow.BlockParam)
  return target;
}

size_t BlockParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:deepflow.BlockParam)
  size_t total_size = 0;

  // repeated .deepflow.NodeParam node = 1;
  {
    unsigned int count = this->node_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(i));
    }
  }

  // repeated .deepflow.SolverParam solver = 2;
  {
    unsigned int count = this->solver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solver(i));
    }
  }

  // repeated .deepflow.PhaseParam phase = 3;
  {
    unsigned int count = this->phase_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phase(i));
    }
  }

  // repeated .deepflow.InitParam initializer = 4;
  {
    unsigned int count = this->initializer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initializer(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:deepflow.BlockParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:deepflow.BlockParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:deepflow.BlockParam)
    MergeFrom(*source);
  }
}

void BlockParam::MergeFrom(const BlockParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:deepflow.BlockParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  solver_.MergeFrom(from.solver_);
  phase_.MergeFrom(from.phase_);
  initializer_.MergeFrom(from.initializer_);
}

void BlockParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:deepflow.BlockParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockParam::CopyFrom(const BlockParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:deepflow.BlockParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParam::IsInitialized() const {
  return true;
}

void BlockParam::Swap(BlockParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockParam::InternalSwap(BlockParam* other) {
  node_.InternalSwap(&other->node_);
  solver_.InternalSwap(&other->solver_);
  phase_.InternalSwap(&other->phase_);
  initializer_.InternalSwap(&other->initializer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockParam::GetMetadata() const {
  protobuf_deepflow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_deepflow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockParam

// repeated .deepflow.NodeParam node = 1;
int BlockParam::node_size() const {
  return node_.size();
}
void BlockParam::clear_node() {
  node_.Clear();
}
const ::deepflow::NodeParam& BlockParam::node(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.BlockParam.node)
  return node_.Get(index);
}
::deepflow::NodeParam* BlockParam::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.BlockParam.node)
  return node_.Mutable(index);
}
::deepflow::NodeParam* BlockParam::add_node() {
  // @@protoc_insertion_point(field_add:deepflow.BlockParam.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::deepflow::NodeParam >*
BlockParam::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.BlockParam.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::deepflow::NodeParam >&
BlockParam::node() const {
  // @@protoc_insertion_point(field_list:deepflow.BlockParam.node)
  return node_;
}

// repeated .deepflow.SolverParam solver = 2;
int BlockParam::solver_size() const {
  return solver_.size();
}
void BlockParam::clear_solver() {
  solver_.Clear();
}
const ::deepflow::SolverParam& BlockParam::solver(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.BlockParam.solver)
  return solver_.Get(index);
}
::deepflow::SolverParam* BlockParam::mutable_solver(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.BlockParam.solver)
  return solver_.Mutable(index);
}
::deepflow::SolverParam* BlockParam::add_solver() {
  // @@protoc_insertion_point(field_add:deepflow.BlockParam.solver)
  return solver_.Add();
}
::google::protobuf::RepeatedPtrField< ::deepflow::SolverParam >*
BlockParam::mutable_solver() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.BlockParam.solver)
  return &solver_;
}
const ::google::protobuf::RepeatedPtrField< ::deepflow::SolverParam >&
BlockParam::solver() const {
  // @@protoc_insertion_point(field_list:deepflow.BlockParam.solver)
  return solver_;
}

// repeated .deepflow.PhaseParam phase = 3;
int BlockParam::phase_size() const {
  return phase_.size();
}
void BlockParam::clear_phase() {
  phase_.Clear();
}
const ::deepflow::PhaseParam& BlockParam::phase(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.BlockParam.phase)
  return phase_.Get(index);
}
::deepflow::PhaseParam* BlockParam::mutable_phase(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.BlockParam.phase)
  return phase_.Mutable(index);
}
::deepflow::PhaseParam* BlockParam::add_phase() {
  // @@protoc_insertion_point(field_add:deepflow.BlockParam.phase)
  return phase_.Add();
}
::google::protobuf::RepeatedPtrField< ::deepflow::PhaseParam >*
BlockParam::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.BlockParam.phase)
  return &phase_;
}
const ::google::protobuf::RepeatedPtrField< ::deepflow::PhaseParam >&
BlockParam::phase() const {
  // @@protoc_insertion_point(field_list:deepflow.BlockParam.phase)
  return phase_;
}

// repeated .deepflow.InitParam initializer = 4;
int BlockParam::initializer_size() const {
  return initializer_.size();
}
void BlockParam::clear_initializer() {
  initializer_.Clear();
}
const ::deepflow::InitParam& BlockParam::initializer(int index) const {
  // @@protoc_insertion_point(field_get:deepflow.BlockParam.initializer)
  return initializer_.Get(index);
}
::deepflow::InitParam* BlockParam::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:deepflow.BlockParam.initializer)
  return initializer_.Mutable(index);
}
::deepflow::InitParam* BlockParam::add_initializer() {
  // @@protoc_insertion_point(field_add:deepflow.BlockParam.initializer)
  return initializer_.Add();
}
::google::protobuf::RepeatedPtrField< ::deepflow::InitParam >*
BlockParam::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:deepflow.BlockParam.initializer)
  return &initializer_;
}
const ::google::protobuf::RepeatedPtrField< ::deepflow::InitParam >&
BlockParam::initializer() const {
  // @@protoc_insertion_point(field_list:deepflow.BlockParam.initializer)
  return initializer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace deepflow

// @@protoc_insertion_point(global_scope)
